<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Mysql</title>
    <link href="/2024/01/26/Mysql%E5%9F%BA%E7%A1%80%20/"/>
    <url>/2024/01/26/Mysql%E5%9F%BA%E7%A1%80%20/</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p>简单来说，数据库就是一个存储数据的仓库，它将数据按照特定的规律存储在磁盘上。为了方便用户组织和管理数据，其专门提供了数据库管理系统。通过数据库管理系统，用户可以有效的组织和管理存储在数据库中的数据。本教程所要讲解的 MySQL，就是一种非常优秀的数据库管理系统。</p><h2 id="存储数据方式演变"><a href="#存储数据方式演变" class="headerlink" title="存储数据方式演变"></a>存储数据方式演变</h2><p>从古至今人们都有存储数据的需求，比方说记录账目开支、货物清单、人口统计等等等等，存储的方式也一直在变化。</p><h3 id="人工管理阶段"><a href="#人工管理阶段" class="headerlink" title="人工管理阶段"></a>人工管理阶段</h3><p>很久很久以前，人们把数据存在动物骨头上，后来存到竹片上，再后来存到纸上，直到近代发明了磁带留声机啥的，不过这些都是依赖人工进行整理、保存和查询的，特点就是效率低下、错误率高、查找不方便等等等等。</p><h3 id="文件系统阶段"><a href="#文件系统阶段" class="headerlink" title="文件系统阶段"></a>文件系统阶段</h3><p>后来人们发明了计算机，为了管理各种数据，人们发明了一种叫文件系统的东东，可以方便的通过文件的存储路径和文件名来访问各个文件的内容，计算机程序也可以直接通过文件系统来操作各种文件，比人工管理爽多了。</p><h3 id="数据库阶段"><a href="#数据库阶段" class="headerlink" title="数据库阶段"></a>数据库阶段</h3><p>随着文件中存储的内容越来越多，在文件中修改和查找某些数据已经变得非常困难了，所以人们发明了一种专门的软件来管理存储的数据，这些数据依照一定格式保存，通过这个软件可以方便的对数据进行增删改查操作，从而极大的提升了数据管理效率，人们就把这个管理数据的软件叫做数据库管理系统（英文：<code>Database Management System</code>，简称：<code>DBMS</code>）。</p><p><img src="/pages_images/Mysql/image-20210922115640480-16322830018691.png" alt="image-20210922115640480"></p><h1 id="一、sql介绍"><a href="#一、sql介绍" class="headerlink" title="一、sql介绍"></a>一、sql介绍</h1><h2 id="1-1、什么是sql？"><a href="#1-1、什么是sql？" class="headerlink" title="1.1、什么是sql？"></a>1.1、什么是sql？</h2><p>对数据库进行查询和修改操作的语言叫做 SQL（Structured Query Language，结构化查询语言）。SQL是专为数据库而建立的操作命令集，是一种功能齐全的数据库语言。</p><p>SQL 是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统。与其他程序设计语言（如 C语言、Java 等）不同的是，SQL 由很少的关键字组成，每个 SQL 语句通过一个或多个关键字构成。</p><p>在使用它时，只需要发出“做什么”的命令，“怎么做”是不用使用者考虑的。SQL功能强大、简单易学、使用方便，已经成为了数据库操作的基础，并且现在几乎所有的数据库(Oracle、DB2、Sybase、SQL Server )均支持sql。</p><h2 id="1-2、sql规范"><a href="#1-2、sql规范" class="headerlink" title="1.2、sql规范"></a>1.2、sql规范</h2><p>&lt;1&gt; 在数据库系统中，SQL语句不区分大小写(建议用大写) 。但字符串常量区分大小写。建议命令大写，表名库名小写；</p><p>&lt;2&gt; SQL语句可单行或多行书写，以“;”结尾。关键词不能跨多行或简写。</p><p>&lt;3&gt; 用空格和缩进来提高语句的可读性。子句通常位于独立行，便于编辑，提高可读性。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tb_table <br>     <span class="hljs-keyword">WHERE</span> NAME<span class="hljs-operator">=</span>&quot;YUAN&quot;;<br></code></pre></td></tr></table></figure><p>&lt;4&gt; 注释：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 单行注释</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>&lt;5&gt; sql语句可以折行操作</p><h2 id="1-3、sql构成"><a href="#1-3、sql构成" class="headerlink" title="1.3、sql构成"></a>1.3、sql构成</h2><p>（1）数据定义语言（Data Definition Language，DDL）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 用来创建或删除数据库以及表等对象，主要包含以下几种命令：</span><br><br><span class="hljs-comment">-- DROP：删除数据库和表等对象</span><br><span class="hljs-comment">-- CREATE：创建数据库和表等对象</span><br><span class="hljs-comment">-- ALTER：修改数据库和表等对象的结构</span><br></code></pre></td></tr></table></figure><p>(2）数据操作语言（Data Manipulation Language，DML）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 用来变更表中的记录，主要包含以下几种命令：</span><br><br><span class="hljs-comment">-- SELECT：查询表中的数据</span><br><span class="hljs-comment">-- INSERT：向表中插入新数据</span><br><span class="hljs-comment">-- UPDATE：更新表中的数据</span><br><span class="hljs-comment">-- DELETE：删除表中的数据</span><br></code></pre></td></tr></table></figure><p>(3）数据查询语言（Data Query Language，DQL）</p><p>用来查询表中的记录，主要包含 SELECT 命令，来查询表中的数据。</p><p>(4）数据控制语言（Data Control Language，DCL）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 用来确认或者取消对数据库中的数据进行的变更。除此之外，还可以对数据库中的用户设定权限。主要包含以下几种命令：</span><br><br><span class="hljs-comment">-- GRANT：赋予用户操作权限</span><br><span class="hljs-comment">-- REVOKE：取消用户的操作权限</span><br><span class="hljs-comment">-- COMMIT：确认对数据库中的数据进行的变更</span><br><span class="hljs-comment">-- ROLLBACK：取消对数据库中的数据进行的变更</span><br></code></pre></td></tr></table></figure><h1 id="二、数据库操作"><a href="#二、数据库操作" class="headerlink" title="二、数据库操作"></a>二、数据库操作</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 1.创建数据库（在磁盘上创建一个对应的文件夹）</span><br>    <span class="hljs-keyword">create</span> database [if <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>] db_name [<span class="hljs-type">character</span> <span class="hljs-keyword">set</span> xxx] <br>   <br><span class="hljs-comment">-- 2.查看数据库</span><br>    <span class="hljs-keyword">show</span> databases;  <span class="hljs-comment">-- 查看所有数据库</span><br>    <span class="hljs-keyword">SHOW</span> DATABASES <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%test%&#x27;</span>;<span class="hljs-comment">-- 查看名字中包含 test 的数据库</span><br>    <span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> database db_name; <span class="hljs-comment">-- 查看数据库的创建方式</span><br><br><span class="hljs-comment">-- 3.修改数据库</span><br>    <span class="hljs-keyword">alter</span> database db_name [<span class="hljs-type">character</span> <span class="hljs-keyword">set</span> xxx] <br><br><span class="hljs-comment">-- 4.删除数据库</span><br>    <span class="hljs-keyword">drop</span> database [if <span class="hljs-keyword">exists</span>] db_name;<br>    <br><span class="hljs-comment">-- 5.使用数据库</span><br>    use db_name; <span class="hljs-comment">-- 切换数据库  注意：进入到某个数据库后没办法再退回之前状态，但可以通过use进行切换</span><br>    <span class="hljs-keyword">select</span> database(); <span class="hljs-comment">--  查看当前使用的数据库</span><br></code></pre></td></tr></table></figure><blockquote><p>使用 DROP DATABASE 命令时要非常谨慎，在执行该命令后，MySQL 不会给出任何提示确认信息。DROP DATABASE 删除数据库后，数据库中存储的所有数据表和数据也将一同被删除，而且不能恢复。因此最好在删除数据库之前先将数据库进行备份。</p></blockquote><h1 id="三、数据表操作"><a href="#三、数据表操作" class="headerlink" title="三、数据表操作"></a>三、数据表操作</h1><p>数据表是数据库的重要组成部分，每一个数据库都是由若干个数据表组成的。比如，在电脑中一个文件夹有若干excel文件。这里的文件夹就相当于数据库，excel文件就相当于数据表。</p><p><img src="/./pages_images/Mysql/image-20230702121521881-8271322.png" alt="image-20230702121521881"></p><h2 id="3-1、创建数据表"><a href="#3-1、创建数据表" class="headerlink" title="3.1、创建数据表"></a>3.1、创建数据表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 语法</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tab_name(<br>            field1 type [约束条件],<br>            field2 type,<br>            ...<br>            fieldn type    <span class="hljs-comment">-- 一定不要加逗号，否则报错！</span><br>        )[<span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8];<br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employee(<br>           id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment ,<br>           name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>           gender bit <span class="hljs-keyword">default</span> <span class="hljs-number">1</span>,<br>           birthday <span class="hljs-type">date</span>,<br>           department <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>           salary <span class="hljs-keyword">double</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>) unsigned,<br>           resume text<br>         )<span class="hljs-type">character</span> <span class="hljs-keyword">set</span><span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- show tables;</span><br></code></pre></td></tr></table></figure><h2 id="3-2、查看表"><a href="#3-2、查看表" class="headerlink" title="3.2、查看表"></a>3.2、查看表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">desc</span> employee;    <span class="hljs-comment">-- 查看表结构,等同于show columns from tab_name  </span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------+----------------------+------+-----+---------+----------------+</span><br><span class="hljs-operator">|</span> Field      <span class="hljs-operator">|</span> Type                 <span class="hljs-operator">|</span> <span class="hljs-keyword">Null</span> <span class="hljs-operator">|</span> Key <span class="hljs-operator">|</span> <span class="hljs-keyword">Default</span> <span class="hljs-operator">|</span> Extra          <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------+----------------------+------+-----+---------+----------------+</span><br><span class="hljs-operator">|</span> id         <span class="hljs-operator">|</span> <span class="hljs-type">int</span>(<span class="hljs-number">11</span>)              <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span> PRI <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> auto_increment <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> name       <span class="hljs-operator">|</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)          <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> gender     <span class="hljs-operator">|</span> bit(<span class="hljs-number">1</span>)               <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> b<span class="hljs-string">&#x27;1&#x27;</span>    <span class="hljs-operator">|</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> birthday   <span class="hljs-operator">|</span> <span class="hljs-type">date</span>                 <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> department <span class="hljs-operator">|</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)          <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> salary     <span class="hljs-operator">|</span> <span class="hljs-keyword">double</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>) unsigned <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> resume     <span class="hljs-operator">|</span> text                 <span class="hljs-operator">|</span> YES  <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>                <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------+----------------------+------+-----+---------+----------------+</span><br><br><br><span class="hljs-keyword">show</span> tables 　　　　　　　　　　　<span class="hljs-comment">-- 查看当前数据库中的所有的表</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tab_name      <span class="hljs-comment">-- 查看当前数据库表建表语句 </span><br></code></pre></td></tr></table></figure><h2 id="3-3、修改表结构"><a href="#3-3、修改表结构" class="headerlink" title="3.3、修改表结构"></a>3.3、修改表结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- (1) 增加列(字段)</span><br>   <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ADD</span> <span class="hljs-operator">&lt;</span>新字段名<span class="hljs-operator">&gt;</span><span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span>[约束条件]［<span class="hljs-keyword">first</span>｜after 字段名］;<br>   <span class="hljs-comment">-- 添加多个字段</span><br>   <span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> users2 <br>         <span class="hljs-keyword">add</span> addr <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>         <span class="hljs-keyword">add</span> age  <span class="hljs-type">int</span> <span class="hljs-keyword">first</span>,<br>         <span class="hljs-keyword">add</span> birth <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) after name;<br><br><span class="hljs-comment">-- (2) 修改某字段类型</span><br>   <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> MODIFY <span class="hljs-operator">&lt;</span>字段名<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span> [完整性约束条件]［<span class="hljs-keyword">first</span>｜after 字段名］;<br><span class="hljs-comment">-- (3) 修改某字段名</span><br>   <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> CHANGE <span class="hljs-operator">&lt;</span>旧字段名<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>新字段名<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>新数据类型<span class="hljs-operator">&gt;</span>  [完整性约束条件]［<span class="hljs-keyword">first</span>｜after 字段名］;；<br><span class="hljs-comment">-- (4) 删除某字段</span><br>   <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">DROP</span> <span class="hljs-operator">&lt;</span>字段名<span class="hljs-operator">&gt;</span>；<br><span class="hljs-comment">-- (5) 修改表名  </span><br>   <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>旧表名<span class="hljs-operator">&gt;</span> RENAME [<span class="hljs-keyword">TO</span>] <span class="hljs-operator">&lt;</span>新表名<span class="hljs-operator">&gt;</span>；<br><span class="hljs-comment">-- (6)修该表所用的字符集    </span><br>   <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 [<span class="hljs-keyword">DEFAULT</span>] <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">&lt;</span>字符集名<span class="hljs-operator">&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="3-4、删除表"><a href="#3-4、删除表" class="headerlink" title="3.4、删除表"></a>3.4、删除表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> [IF <span class="hljs-keyword">EXISTS</span>] 表名<span class="hljs-number">1</span> [ ,表名<span class="hljs-number">2</span>, 表名<span class="hljs-number">3</span> ...]<br></code></pre></td></tr></table></figure><h1 id="四、表记录操作"><a href="#四、表记录操作" class="headerlink" title="四、表记录操作"></a>四、表记录操作</h1><h2 id="4-1、添加记录"><a href="#4-1、添加记录" class="headerlink" title="4.1、添加记录"></a>4.1、添加记录</h2><p>INSERT 语句有两种语法形式，分别是 INSERT…VALUES 语句和 INSERT…SET 语句。</p><h4 id="1-INSERT…VALUES语句"><a href="#1-INSERT…VALUES语句" class="headerlink" title="(1)  INSERT…VALUES语句"></a>(1)  INSERT…VALUES语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> [<span class="hljs-keyword">INTO</span>] <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> [ <span class="hljs-operator">&lt;</span>列名<span class="hljs-number">1</span><span class="hljs-operator">&gt;</span> [ , … <span class="hljs-operator">&lt;</span>列名n<span class="hljs-operator">&gt;</span>] ] <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>) [… , (值n) ];<br></code></pre></td></tr></table></figure><blockquote><ol><li><p>指定需要插入数据的列名。若向表中的所有列插入数据，则全部的列名均可以省略，直接采用 INSERT&lt;表名&gt;VALUES(…) 即可。</p></li><li><p>INSERT 语句后面的列名称顺序可以不是 表定义时的顺序，即插入数据时，不需要按照表定义的顺序插入，只要保证值的顺序与列字段的顺序相同就可以。</p></li><li><p>使用 INSERT…VALUES 语句可以向表中插入一行数据，也可以插入多行数据；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> [<span class="hljs-keyword">INTO</span>] <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> [ <span class="hljs-operator">&lt;</span>列名<span class="hljs-number">1</span><span class="hljs-operator">&gt;</span> [ , … <span class="hljs-operator">&lt;</span>列名n<span class="hljs-operator">&gt;</span>] ] <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>…,值n),<br>                                                      (值<span class="hljs-number">1</span>…,值n),<br>                                                      ...<br>                                                      (值<span class="hljs-number">1</span>…,值n);<br><span class="hljs-comment">-- 用单条 INSERT 语句处理多个插入要比使用多条 INSERT 语句更快。</span><br></code></pre></td></tr></table></figure></li></ol></blockquote><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> employee (name,gender,birthday,salary,department) <span class="hljs-keyword">VALUES</span> <br>                                                               (&quot;yuan&quot;,<span class="hljs-number">1</span>,&quot;1985-12-12&quot;,<span class="hljs-number">8000</span>,&quot;教学部&quot;),<br>                                                               (&quot;alvin&quot;,<span class="hljs-number">1</span>,&quot;1987-08-08&quot;,<span class="hljs-number">5000</span>,&quot;保安部&quot;),<br>                                                               (&quot;rain&quot;,<span class="hljs-number">1</span>,&quot;1990-06-06&quot;,<span class="hljs-number">20000</span>,&quot;销售部&quot;);<br></code></pre></td></tr></table></figure><h4 id="2-INSERT…SET语句"><a href="#2-INSERT…SET语句" class="headerlink" title="(2) INSERT…SET语句"></a>(2) INSERT…SET语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span><br>       <span class="hljs-keyword">SET</span> <span class="hljs-operator">&lt;</span>列名<span class="hljs-number">1</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span> <span class="hljs-operator">&lt;</span>值<span class="hljs-number">1</span><span class="hljs-operator">&gt;</span>,<br>           <span class="hljs-operator">&lt;</span>列名<span class="hljs-number">2</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">=</span> <span class="hljs-operator">&lt;</span>值<span class="hljs-number">2</span><span class="hljs-operator">&gt;</span>,<br>            …<br></code></pre></td></tr></table></figure><p>此语句用于直接给表中的某些列指定对应的列值，即要插入的数据的列名在 SET 子句中指定。对于未指定的列，列值会指定为该列的默认值。</p><h2 id="4-2、查询记录"><a href="#4-2、查询记录" class="headerlink" title="4.2、查询记录"></a>4.2、查询记录</h2><p>标准语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询语法：</span><br><br>   <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-operator">|</span>field1,filed2 ...   <span class="hljs-keyword">FROM</span> tab_name<br>                  <span class="hljs-keyword">WHERE</span> 条件<br>                  <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> field<br>                  <span class="hljs-keyword">HAVING</span> 筛选<br>                  <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> field<br>                  LIMIT 限制条数<br><br><br><span class="hljs-comment">-- Mysql在执行sql语句时的执行顺序：</span><br>                <span class="hljs-comment">-- from  where  select  group by  having order by</span><br></code></pre></td></tr></table></figure><p>准备数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> emp(<br>    id       <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>    name     <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>    gender   ENUM(&quot;male&quot;,&quot;female&quot;,&quot;other&quot;),<br>    age      TINYINT,<br>    dep      <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>    city     <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>   salary    <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>)<br>)<span class="hljs-type">character</span> <span class="hljs-keyword">set</span><span class="hljs-operator">=</span>utf8;<br><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (name,gender,age,dep,city,salary) <span class="hljs-keyword">VALUES</span><br>                (&quot;yuan&quot;,&quot;male&quot;,<span class="hljs-number">24</span>,&quot;教学部&quot;,&quot;河北省&quot;,<span class="hljs-number">8000</span>),<br>                (&quot;eric&quot;,&quot;male&quot;,<span class="hljs-number">34</span>,&quot;销售部&quot;,&quot;山东省&quot;,<span class="hljs-number">8000</span>),<br>                (&quot;rain&quot;,&quot;male&quot;,<span class="hljs-number">28</span>,&quot;销售部&quot;,&quot;山东省&quot;,<span class="hljs-number">10000</span>),<br>                (&quot;alvin&quot;,&quot;female&quot;,<span class="hljs-number">22</span>,&quot;教学部&quot;,&quot;北京&quot;,<span class="hljs-number">9000</span>),<br>                (&quot;George&quot;, &quot;male&quot;,<span class="hljs-number">24</span>,&quot;教学部&quot;,&quot;河北省&quot;,<span class="hljs-number">6000</span>),<br>                (&quot;danae&quot;, &quot;male&quot;,<span class="hljs-number">32</span>,&quot;运营部&quot;,&quot;北京&quot;,<span class="hljs-number">12000</span>),<br>                (&quot;Sera&quot;, &quot;male&quot;,<span class="hljs-number">38</span>,&quot;运营部&quot;,&quot;河北省&quot;,<span class="hljs-number">7000</span>),<br>                (&quot;Echo&quot;, &quot;male&quot;,<span class="hljs-number">19</span>,&quot;运营部&quot;,&quot;河北省&quot;,<span class="hljs-number">9000</span>),<br>                (&quot;Abel&quot;, &quot;female&quot;,<span class="hljs-number">24</span>,&quot;销售部&quot;,&quot;北京&quot;,<span class="hljs-number">9000</span>);<br><br><br></code></pre></td></tr></table></figure><h3 id="4-2-1、查询字段（select）"><a href="#4-2-1、查询字段（select）" class="headerlink" title="4.2.1、查询字段（select）"></a>4.2.1、查询字段（select）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span>  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------+--------+------+--------+--------+----------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name   <span class="hljs-operator">|</span> gender <span class="hljs-operator">|</span> age  <span class="hljs-operator">|</span> dep    <span class="hljs-operator">|</span> city   <span class="hljs-operator">|</span> salary   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------+--------+------+--------+--------+----------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> yuan   <span class="hljs-operator">|</span> male   <span class="hljs-operator">|</span>   <span class="hljs-number">24</span> <span class="hljs-operator">|</span> 教学部 <span class="hljs-operator">|</span> 河北省 <span class="hljs-operator">|</span>  <span class="hljs-number">8000.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> eric   <span class="hljs-operator">|</span> male   <span class="hljs-operator">|</span>   <span class="hljs-number">34</span> <span class="hljs-operator">|</span> 销售部 <span class="hljs-operator">|</span> 山东省 <span class="hljs-operator">|</span>  <span class="hljs-number">8000.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> rain   <span class="hljs-operator">|</span> male   <span class="hljs-operator">|</span>   <span class="hljs-number">28</span> <span class="hljs-operator">|</span> 销售部 <span class="hljs-operator">|</span> 山东省 <span class="hljs-operator">|</span> <span class="hljs-number">10000.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span> alvin  <span class="hljs-operator">|</span> female <span class="hljs-operator">|</span>   <span class="hljs-number">22</span> <span class="hljs-operator">|</span> 教学部 <span class="hljs-operator">|</span> 北京   <span class="hljs-operator">|</span>  <span class="hljs-number">9000.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">5</span> <span class="hljs-operator">|</span> George <span class="hljs-operator">|</span> male   <span class="hljs-operator">|</span>   <span class="hljs-number">24</span> <span class="hljs-operator">|</span> 教学部 <span class="hljs-operator">|</span> 河北省 <span class="hljs-operator">|</span>  <span class="hljs-number">6000.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">6</span> <span class="hljs-operator">|</span> danae  <span class="hljs-operator">|</span> male   <span class="hljs-operator">|</span>   <span class="hljs-number">32</span> <span class="hljs-operator">|</span> 运营部 <span class="hljs-operator">|</span> 北京   <span class="hljs-operator">|</span> <span class="hljs-number">12000.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">7</span> <span class="hljs-operator">|</span> Sera   <span class="hljs-operator">|</span> male   <span class="hljs-operator">|</span>   <span class="hljs-number">38</span> <span class="hljs-operator">|</span> 运营部 <span class="hljs-operator">|</span> 河北省 <span class="hljs-operator">|</span>  <span class="hljs-number">7000.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">8</span> <span class="hljs-operator">|</span> Echo   <span class="hljs-operator">|</span> male   <span class="hljs-operator">|</span>   <span class="hljs-number">19</span> <span class="hljs-operator">|</span> 运营部 <span class="hljs-operator">|</span> 河北省 <span class="hljs-operator">|</span>  <span class="hljs-number">9000.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">9</span> <span class="hljs-operator">|</span> Abel   <span class="hljs-operator">|</span> female <span class="hljs-operator">|</span>   <span class="hljs-number">24</span> <span class="hljs-operator">|</span> 销售部 <span class="hljs-operator">|</span> 北京   <span class="hljs-operator">|</span>  <span class="hljs-number">9000.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------+--------+------+--------+--------+----------+</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span>  name,dep,salary <span class="hljs-keyword">FROM</span> emp;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------+--------+----------+</span><br><span class="hljs-operator">|</span> name   <span class="hljs-operator">|</span> dep    <span class="hljs-operator">|</span> salary   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------+--------+----------+</span><br><span class="hljs-operator">|</span> yuan   <span class="hljs-operator">|</span> 教学部 <span class="hljs-operator">|</span>  <span class="hljs-number">8000.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> eric   <span class="hljs-operator">|</span> 销售部 <span class="hljs-operator">|</span>  <span class="hljs-number">8000.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> rain   <span class="hljs-operator">|</span> 销售部 <span class="hljs-operator">|</span> <span class="hljs-number">10000.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> alvin  <span class="hljs-operator">|</span> 教学部 <span class="hljs-operator">|</span>  <span class="hljs-number">9000.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> George <span class="hljs-operator">|</span> 教学部 <span class="hljs-operator">|</span>  <span class="hljs-number">6000.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> danae  <span class="hljs-operator">|</span> 运营部 <span class="hljs-operator">|</span> <span class="hljs-number">12000.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Sera   <span class="hljs-operator">|</span> 运营部 <span class="hljs-operator">|</span>  <span class="hljs-number">7000.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Echo   <span class="hljs-operator">|</span> 运营部 <span class="hljs-operator">|</span>  <span class="hljs-number">9000.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> Abel   <span class="hljs-operator">|</span> 销售部 <span class="hljs-operator">|</span>  <span class="hljs-number">9000.00</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------+--------+----------+</span><br></code></pre></td></tr></table></figure><h3 id="4-2-2、where语句"><a href="#4-2-2、where语句" class="headerlink" title="4.2.2、where语句"></a>4.2.2、where语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- where字句中可以使用：</span><br><br>         <span class="hljs-comment">-- 比较运算符：</span><br>                        <span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span> <span class="hljs-operator">&gt;=</span> <span class="hljs-operator">&lt;=</span> <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-operator">!=</span><br>                        <span class="hljs-keyword">between</span> <span class="hljs-number">80</span> <span class="hljs-keyword">and</span> <span class="hljs-number">100</span> 值在<span class="hljs-number">10</span>到<span class="hljs-number">20</span>之间<br>                        <span class="hljs-keyword">in</span>(<span class="hljs-number">80</span>,<span class="hljs-number">90</span>,<span class="hljs-number">100</span>) 值是<span class="hljs-number">10</span>或<span class="hljs-number">20</span>或<span class="hljs-number">30</span><br>                        <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;yuan%&#x27;</span><br>                        <span class="hljs-comment">/*</span><br><span class="hljs-comment">                        pattern可以是%或者_，</span><br><span class="hljs-comment">                        如果是%则表示任意多字符，此例如唐僧,唐国强</span><br><span class="hljs-comment">                        如果是_则表示一个字符唐_，只有唐僧符合。两个_则表示两个字符：__</span><br><span class="hljs-comment">                        */</span><br><br>         <span class="hljs-comment">-- 逻辑运算符</span><br>                        在多个条件直接可以使用逻辑运算符 <span class="hljs-keyword">and</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span><br>                        <br>         <span class="hljs-comment">-- 正则 </span><br>                      <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> emp_name REGEXP <span class="hljs-string">&#x27;^yu&#x27;</span>;<br>                      <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> name REGEXP <span class="hljs-string">&#x27;n$&#x27;</span>;<br>                      <br></code></pre></td></tr></table></figure><p>练习：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询年纪大于24的员工</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> age<span class="hljs-operator">&gt;</span><span class="hljs-number">24</span>;<br><br><span class="hljs-comment">-- 查询教学部的男老师信息</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> dep<span class="hljs-operator">=</span>&quot;教学部&quot; <span class="hljs-keyword">AND</span> gender<span class="hljs-operator">=</span>&quot;male&quot;;<br></code></pre></td></tr></table></figure><h3 id="4-2-3、order：排序"><a href="#4-2-3、order：排序" class="headerlink" title="4.2.3、order：排序"></a>4.2.3、order：排序</h3><p>按指定的列进行，排序的列即可是表中的列名，也可以是select语句后指定的别名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 语法：</span><br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><span class="hljs-operator">|</span>field1,field2... <span class="hljs-keyword">from</span> tab_name <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> field [<span class="hljs-keyword">Asc</span><span class="hljs-operator">|</span><span class="hljs-keyword">Desc</span>]<br>         <span class="hljs-comment">-- Asc 升序、Desc 降序，其中asc为默认值 ORDER BY 子句应位于SELECT语句的结尾。</span><br></code></pre></td></tr></table></figure><p>练习：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 按年龄从高到低进行排序</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> age <span class="hljs-keyword">DESC</span> ;<br><br><span class="hljs-comment">-- 按工资从低到高进行排序</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary;<br><br><span class="hljs-comment">-- 先按工资排序，工资相同的按年龄排序</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary,age;<br></code></pre></td></tr></table></figure><h3 id="4-2-4、group-by：分组查询"><a href="#4-2-4、group-by：分组查询" class="headerlink" title="4.2.4、group by：分组查询"></a>4.2.4、group by：分组查询</h3><p>GROUP BY 语句根据某个列对结果集进行分组。分组一般配合着聚合函数完成查询。</p><p><strong>常用聚合(统计)函数</strong></p><ul><li><code>max()</code>：最大值。</li><li><code>min()</code>：最小值。</li><li><code>avg()</code>：平均值。</li><li><code>sum()</code>：总和。</li><li><code>count()</code>：个数。</li></ul><p>在MySQL的SQL执行逻辑中，where条件必须放在group by前面！也就是先通过where条件将结果查询出来，再交给group by去分组，完事之后进行统计，统计之后的查询用having。</p><p>练习：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询男女员工各有多少人</span><br><span class="hljs-keyword">SELECT</span> gender 性别,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) 人数 <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> gender;<br> <br><span class="hljs-comment">-- 查询各个部门的人数</span><br><span class="hljs-keyword">SELECT</span> dep 部门,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) 人数 <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dep;<br> <br><span class="hljs-comment">-- 查询每个部门最大的年龄</span><br><span class="hljs-keyword">SELECT</span> dep 部门,<span class="hljs-built_in">max</span>(age) 最大年纪 <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dep;<br> <br><span class="hljs-comment">-- 查询每个部门年龄最大的员工姓名</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp5 <span class="hljs-keyword">WHERE</span> age <span class="hljs-keyword">in</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">max</span>(age) <span class="hljs-keyword">FROM</span> emp5 <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dep);<br> <br><span class="hljs-comment">-- 查询每个部门的平均工资</span><br><span class="hljs-keyword">SELECT</span> dep 部门,<span class="hljs-built_in">avg</span>(salary) 最大年纪 <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dep;<br> <br><span class="hljs-comment">--  查询教学部的员工最高工资:</span><br><span class="hljs-keyword">SELECT</span> dep,<span class="hljs-built_in">max</span>(salary) <span class="hljs-keyword">FROM</span> emp11 <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dep <span class="hljs-keyword">HAVING</span> dep<span class="hljs-operator">=</span>&quot;教学部&quot;;<br> <br><span class="hljs-comment">-- 查询平均薪水超过8000的部门</span><br><span class="hljs-keyword">SELECT</span> dep,<span class="hljs-built_in">AVG</span>(salary) <span class="hljs-keyword">FROM</span>  emp <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dep <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">avg</span>(salary)<span class="hljs-operator">&gt;</span><span class="hljs-number">8000</span>;<br> <br><span class="hljs-comment">--  查询每个组的员工姓名</span><br><span class="hljs-keyword">SELECT</span> dep,group_concat(name) <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> dep;<br> <br><span class="hljs-comment">-- 查询公司一共有多少员工(可以将所有记录看成一个组)</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) 员工总人数 <span class="hljs-keyword">FROM</span> emp;<br><br></code></pre></td></tr></table></figure><h3 id="4-2-5、limit：记录条数限制"><a href="#4-2-5、limit：记录条数限制" class="headerlink" title="4.2.5、limit：记录条数限制"></a>4.2.5、limit：记录条数限制</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp limit <span class="hljs-number">1</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp limit <span class="hljs-number">2</span>,<span class="hljs-number">5</span>;        <span class="hljs-comment">--  跳过前两条显示接下来的五条纪录</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> emp limit <span class="hljs-number">2</span>,<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><h3 id="4-2-6、distinct：查询去重"><a href="#4-2-6、distinct：查询去重" class="headerlink" title="4.2.6、distinct：查询去重"></a>4.2.6、distinct：查询去重</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">distinct</span> salary <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> salary;<br></code></pre></td></tr></table></figure><h2 id="4-3、更新记录"><a href="#4-3、更新记录" class="headerlink" title="4.3、更新记录"></a>4.3、更新记录</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SET</span> 字段 <span class="hljs-number">1</span><span class="hljs-operator">=</span>值 <span class="hljs-number">1</span> [,字段 <span class="hljs-number">2</span><span class="hljs-operator">=</span>值 <span class="hljs-number">2</span>… ] [<span class="hljs-keyword">WHERE</span> 子句 ]<br></code></pre></td></tr></table></figure><h2 id="4-4、删除记录"><a href="#4-4、删除记录" class="headerlink" title="4.4、删除记录"></a>4.4、删除记录</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">WHERE</span> 子句] [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 子句] [LIMIT 子句]<br></code></pre></td></tr></table></figure><blockquote><ul><li><code>&lt;表名&gt;</code>：指定要删除数据的表名。</li><li><code>ORDER BY</code> 子句：可选项。表示删除时，表中各行将按照子句中指定的顺序进行删除。</li><li><code>WHERE</code> 子句：可选项。表示为删除操作限定删除条件，若省略该子句，则代表删除该表中的所有行。</li><li><code>LIMIT</code> 子句：可选项。用于告知服务器在控制命令被返回到客户端前被删除行的最大值。</li></ul></blockquote><h1 id="五、表的关联关系"><a href="#五、表的关联关系" class="headerlink" title="五、表的关联关系"></a>五、表的关联关系</h1><h2 id="5-1、一对多"><a href="#5-1、一对多" class="headerlink" title="5.1、一对多"></a>5.1、一对多</h2><p>一对多关系为关系数据库中两个表之间的一种关系，该关系中第一个表中的单个行可以与第二个表中的一个或多个行相关，但第二个表中的一个行只可以与第一个表中的一个行相关。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 书籍表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> book(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>title <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>price <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>),    <br>pub_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>)ENGINE<span class="hljs-operator">=</span>INNODB CHARSET<span class="hljs-operator">=</span>utf8;<br><br><br><span class="hljs-comment">-- 出版社表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> publisher(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>addr <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>)<br>)ENGINE<span class="hljs-operator">=</span>INNODB CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- 插入数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book(title,price,pub_id) <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-string">&#x27;西游记&#x27;</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>),<br>(<span class="hljs-string">&#x27;三国演义&#x27;</span>,<span class="hljs-number">45</span>,<span class="hljs-number">2</span>),<br>(<span class="hljs-string">&#x27;红楼梦&#x27;</span>,<span class="hljs-number">66</span>,<span class="hljs-number">3</span>),<br>(<span class="hljs-string">&#x27;水浒传&#x27;</span>,<span class="hljs-number">21</span>,<span class="hljs-number">2</span>),<br>(<span class="hljs-string">&#x27;红与黑&#x27;</span>,<span class="hljs-number">67</span>,<span class="hljs-number">3</span>),<br>(<span class="hljs-string">&#x27;乱世佳人&#x27;</span>,<span class="hljs-number">44</span>,<span class="hljs-number">6</span>),<br>(<span class="hljs-string">&#x27;飘&#x27;</span>,<span class="hljs-number">56</span>,<span class="hljs-number">1</span>),<br>(<span class="hljs-string">&#x27;放风筝的人&#x27;</span>,<span class="hljs-number">78</span>,<span class="hljs-number">3</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> publisher(id,name,email,addr) <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;清华出版社&#x27;</span>,&quot;123&quot;,&quot;bj&quot;),<br>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;北大出版社&#x27;</span>,&quot;234&quot;,&quot;bj&quot;),<br>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;机械工业出版社&#x27;</span>,&quot;345&quot;,&quot;nj&quot;),<br>(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;邮电出版社&#x27;</span>,&quot;456&quot;,&quot;nj&quot;),<br>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;电子工业出版社&#x27;</span>,&quot;567&quot;,&quot;bj&quot;),<br>(<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;人民大学出版社&#x27;</span>,&quot;678&quot;,&quot;bj&quot;);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> book;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+------------+-------+--------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> title      <span class="hljs-operator">|</span> price <span class="hljs-operator">|</span> pub_id <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------------+-------+--------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 西游记     <span class="hljs-operator">|</span> <span class="hljs-number">15.00</span> <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 三国演义   <span class="hljs-operator">|</span> <span class="hljs-number">45.00</span> <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 红楼梦     <span class="hljs-operator">|</span> <span class="hljs-number">66.00</span> <span class="hljs-operator">|</span>      <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span> 水浒传     <span class="hljs-operator">|</span> <span class="hljs-number">21.00</span> <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">5</span> <span class="hljs-operator">|</span> 红与黑     <span class="hljs-operator">|</span> <span class="hljs-number">67.00</span> <span class="hljs-operator">|</span>      <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">6</span> <span class="hljs-operator">|</span> 乱世佳人   <span class="hljs-operator">|</span> <span class="hljs-number">44.00</span> <span class="hljs-operator">|</span>      <span class="hljs-number">6</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">7</span> <span class="hljs-operator">|</span> 飘         <span class="hljs-operator">|</span> <span class="hljs-number">56.00</span> <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">8</span> <span class="hljs-operator">|</span> 放风筝的人 <span class="hljs-operator">|</span> <span class="hljs-number">78.00</span> <span class="hljs-operator">|</span>      <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------------+-------+--------+</span><br><span class="hljs-number">8</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> publisher;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+----------------+-------+------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name           <span class="hljs-operator">|</span> email <span class="hljs-operator">|</span> addr <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+----------------+-------+------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 清华出版社     <span class="hljs-operator">|</span> <span class="hljs-number">123</span>   <span class="hljs-operator">|</span> bj   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 北大出版社     <span class="hljs-operator">|</span> <span class="hljs-number">234</span>   <span class="hljs-operator">|</span> bj   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 机械工业出版社 <span class="hljs-operator">|</span> <span class="hljs-number">345</span>   <span class="hljs-operator">|</span> nj   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span> 邮电出版社     <span class="hljs-operator">|</span> <span class="hljs-number">456</span>   <span class="hljs-operator">|</span> nj   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">5</span> <span class="hljs-operator">|</span> 电子工业出版社 <span class="hljs-operator">|</span> <span class="hljs-number">567</span>   <span class="hljs-operator">|</span> bj   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">6</span> <span class="hljs-operator">|</span> 人民大学出版社 <span class="hljs-operator">|</span> <span class="hljs-number">678</span>   <span class="hljs-operator">|</span> bj   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+----------------+-------+------+</span><br><span class="hljs-number">6</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h2 id="5-2、多对多"><a href="#5-2、多对多" class="headerlink" title="5.2、多对多"></a>5.2、多对多</h2><p>多对多，在数据库中也比较常见，可以理解为是一对多和多对一的组合。要实现多对多，一般都需要有一张中间表（也叫关联表），将两张表进行关联，形成多对多的形式。</p><p>比如一本书有多个作者，一个作者可以出版多本书籍。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 作者表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> author(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>)ENGINE<span class="hljs-operator">=</span>INNODB CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- 作者表和书籍表的多对多关系表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> book2author(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span> AUTO_INCREMENT,<br>author_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>book_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>)ENGINE<span class="hljs-operator">=</span>INNODB CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- 插入数据</span><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> author(NAME) <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-string">&#x27;yuan&#x27;</span>),<br>(<span class="hljs-string">&#x27;rain&#x27;</span>),<br>(<span class="hljs-string">&#x27;alvin&#x27;</span>),<br>(<span class="hljs-string">&#x27;eric&#x27;</span>);<br><br><span class="hljs-comment">-- 插入关系数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> book2author(author_id,book_id) <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<br>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>),<br>(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),<br>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>),<br>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h2 id="5-3、一对一"><a href="#5-3、一对一" class="headerlink" title="5.3、一对一"></a>5.3、一对一</h2><p>一对一是将数据表“垂直切分”，其实是不常见，或不常用的。也就是 A 表的一条记录对应 B 表的一条记录。</p><blockquote><p>场景：</p><ol><li>一个系统必然有 Employee（员工表）（包含字段：EmployeeId、姓名、性别、年龄、电话、地址等），每个员工都为一个用户，所以还有张 User 表（包含字段：UserId（关联 EmployeeId）、用户名、密码、角色等），这样你会发现，整合为一张表是否不太妥当？因为，User 的记录只会在登录时用到，感觉有点违背三大范式中的“<strong>确保每列都和主键列直接关联，而不是间接关联</strong>”。</li><li>还有种情况，这就要根据具体的业务来决定了。如果，当一张表的字段过于太多，而很多字段可能只有在某些情况下，才会使用到，这时也可以考虑使用一对一设计。</li></ol></blockquote><p>在我们这个例子中，比如，作者表可以有一张一对一的作者详细信息表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> authorDetail(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>tel <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>addr <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>author_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">unique</span> <span class="hljs-comment">-- 也可以给author添加一个关联字段：   alter table author add authorDetail_id INT NOT NULL</span><br>)ENGINE<span class="hljs-operator">=</span>INNODB CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- 插入数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> authorDetail(tel,addr,author_id) <span class="hljs-keyword">VALUES</span><br>(&quot;110&quot;,&quot;北京&quot;,<span class="hljs-number">1</span>),<br>(&quot;911&quot;,&quot;成都&quot;,<span class="hljs-number">2</span>),<br>(&quot;119&quot;,&quot;上海&quot;,<span class="hljs-number">3</span>),<br>(&quot;111&quot;,&quot;广州&quot;,<span class="hljs-number">4</span>);<br><br></code></pre></td></tr></table></figure><blockquote><p>区别于一对多，关联字段加唯一约束！ </p></blockquote><h1 id="六、关联查询"><a href="#六、关联查询" class="headerlink" title="六、关联查询"></a>六、关联查询</h1><h2 id="6-1、子查询"><a href="#6-1、子查询" class="headerlink" title="6.1、子查询"></a>6.1、子查询</h2><p>子查询是 MySQL 中比较常用的查询方法，通过子查询可以实现多表关联查询。子查询指将一个查询语句嵌套在另一个查询语句中。</p><p>练习：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询乱世佳人的出版社名称</span><br> <span class="hljs-keyword">select</span> pub_id <span class="hljs-keyword">from</span> book <span class="hljs-keyword">where</span> title<span class="hljs-operator">=</span>&quot;乱世佳人&quot;;<br> <span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> publisher <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br><span class="hljs-comment">-- 查询清华出版社出版所有书籍名称</span><br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> publisher <span class="hljs-keyword">where</span> name<span class="hljs-operator">=</span>&quot;清华出版社&quot;;<br><span class="hljs-keyword">select</span> id,title <span class="hljs-keyword">from</span> book <span class="hljs-keyword">where</span> pub_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-comment">-- 查询西游记的作者名字</span><br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> book <span class="hljs-keyword">where</span> title<span class="hljs-operator">=</span>&quot;西游记&quot;;<br><span class="hljs-keyword">select</span> author_id <span class="hljs-keyword">from</span> book2author <span class="hljs-keyword">where</span> book_id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> author <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h2 id="6-2、join查询"><a href="#6-2、join查询" class="headerlink" title="6.2、join查询"></a>6.2、join查询</h2><h4 id="6-2-1、笛卡尔积查询"><a href="#6-2-1、笛卡尔积查询" class="headerlink" title="6.2.1、笛卡尔积查询"></a>6.2.1、笛卡尔积查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> book,publisher;<br></code></pre></td></tr></table></figure><p><img src="/pages_images/Mysql/image-20210810152409411.png" alt="image-20210810152409411"></p><h4 id="6-2-2、内连接-inner-join"><a href="#6-2-2、内连接-inner-join" class="headerlink" title="6.2.2、内连接(inner join)"></a>6.2.2、内连接(inner join)</h4><p>查询两张表中都有的关联数据,相当于利用条件从笛卡尔积结果中筛选出了正确的结果。</p><p>案例1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询两张表中都有的关联数据,相当于利用条件从笛卡尔积结果中筛选出了正确的结果。</span><br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> book,publisher <span class="hljs-keyword">where</span> book.pub_id<span class="hljs-operator">=</span>publisher.id;<br><span class="hljs-keyword">OR</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> book <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> publisher <span class="hljs-keyword">ON</span> book.pub_id<span class="hljs-operator">=</span>publisher.id;<br></code></pre></td></tr></table></figure><p><img src="/pages_images/Mysql/image-20210810151907238.png" alt="image-20210810151907238"></p><p>案例2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> book <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> book2author <span class="hljs-keyword">ON</span> book.id<span class="hljs-operator">=</span>book2author.book_id;<br></code></pre></td></tr></table></figure><p><img src="/pages_images/Mysql/image-20210810152714427.png" alt="image-20210810152714427"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> book <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> book2author <span class="hljs-keyword">ON</span> book.id<span class="hljs-operator">=</span>book2author.book_id <br>                   <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> author <span class="hljs-keyword">on</span> book2author.author_id<span class="hljs-operator">=</span>author.id<br></code></pre></td></tr></table></figure><p><img src="/pages_images/Mysql/image-20210810152835332.png" alt="image-20210810152835332"></p><h4 id="6-2-3、左连接-left-join"><a href="#6-2-3、左连接-left-join" class="headerlink" title="6.2.3、左连接(left join)"></a>6.2.3、左连接(left join)</h4><p>左外连接又称为左连接，使用 <strong>LEFT OUTER JOIN</strong> 关键字连接两个表，并使用 ON 子句来设置连接条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> publisher <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> book <span class="hljs-keyword">ON</span> book.pub_id<span class="hljs-operator">=</span>publisher.id;<br></code></pre></td></tr></table></figure><p>上述语法中，“表1”为基表，“表2”为参考表。左连接查询时，可以查询出“表1”中的所有记录和“表2”中匹配连接条件的记录。如果“表1”的某行在“表2”中没有匹配行，那么在返回结果中，“表2”的字段值均为空值（NULL）。</p><p><img src="/pages_images/Mysql/image-20210810153258219.png" alt="image-20210810153258219"></p><h4 id="6-2-4、右连接-right-join"><a href="#6-2-4、右连接-right-join" class="headerlink" title="6.2.4、右连接(right join)"></a>6.2.4、右连接(right join)</h4><p>右外连接又称为右连接，右连接是左连接的反向连接。使用 <strong>RIGHT OUTER JOIN</strong> 关键字连接两个表，并使用 ON 子句来设置连接条件。</p><p>与左连接相反，右连接以“表2”为基表，“表1”为参考表。右连接查询时，可以查询出“表2”中的所有记录和“表1”中匹配连接条件的记录。如果“表2”的某行在“表1”中没有匹配行，那么在返回结果中，“表1”的字段值均为空值（NULL）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> book <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> publisher <span class="hljs-keyword">ON</span> book.pub_id<span class="hljs-operator">=</span>publisher.id;<br></code></pre></td></tr></table></figure><p><img src="/pages_images/Mysql/image-20210810153745139.png" alt="image-20210810153745139"></p><h1 id="七、约束"><a href="#七、约束" class="headerlink" title="七、约束"></a>七、约束</h1><p>约束是一种限制，它通过限制表中的数据，来确保数据的完整性和唯一性。使用约束来限定表中的数据很多情况下是很有必要的。在 MySQL 中，约束是指对表中数据的一种约束，能够帮助数据库管理员更好地管理数据库，并且能够确保数据库中数据的正确性和有效性。例如，在数据表中存放年龄的值时，如果存入 200、300 这些无效的值就毫无意义了。因此，使用约束来限定表中的数据范围是很有必要的。</p><p>在 MySQL 中，主要支持以下 6 种约束：</p><h2 id="7-1、主键约束"><a href="#7-1、主键约束" class="headerlink" title="7.1、主键约束"></a>7.1、主键约束</h2><h4 id="（1）主键约束"><a href="#（1）主键约束" class="headerlink" title="（1）主键约束"></a>（1）主键约束</h4><p>主键约束是使用最频繁的约束。在设计数据表时，一般情况下，都会要求表中设置一个主键。主键是表的一个特殊字段，该字段能唯一标识该表中的每条信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 方式1</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t1(<br>  id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>  name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)<br>);<br><br><span class="hljs-comment">-- 方式2</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t2(<br>  id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)<br>);<br></code></pre></td></tr></table></figure><blockquote><p>1、一张表中最多只能有一个主键</p><p>2、表中如果没有设置主键，默认设置NOT NULL的字段为主键；此外，表中如果有多个NOT NULL的字段，则按顺序将第一个设置NOT NULL的字段设为主键。所以主键一定是非空且唯一，但非空且唯一的字段不一定是主键。</p><p>3、主键类型不一定必须是整型</p></blockquote><h4 id="（2）添加删除主键"><a href="#（2）添加删除主键" class="headerlink" title="（2）添加删除主键"></a>（2）添加删除主键</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> t2 <span class="hljs-keyword">add</span> <span class="hljs-keyword">primary</span> key(id);<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> t2 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">primary</span> key;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> t2 <span class="hljs-keyword">add</span> <span class="hljs-keyword">primary</span> key(name);<br></code></pre></td></tr></table></figure><h4 id="（3）复合-联合-主键"><a href="#（3）复合-联合-主键" class="headerlink" title="（3）复合(联合)主键"></a>（3）复合(联合)主键</h4><p>所谓的复合主键 就是指你表的主键含有一个以上的字段。</p><p>所谓的联合主键，就是这个主键是由一张表中多个字段组成的。</p><p>比如，设置学生选课数据表时，使用学生编号做主键还是用课程编号做主键呢？如果用学生编号做主键，那么一个学生就只能选择一门课程。如果用课程编号做主键，那么一门课程只能有一个学生来选。显然，这两种情况都是不符合实际情况的。</p><p>实际上设计学生选课表，要限定的是一个学生只能选择同一课程一次。因此，学生编号和课程编号可以放在一起共同作为主键，这也就是联合主键了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ①创建时：</span><br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> sc (<br>    studentid <span class="hljs-type">int</span>,<br>    courseid <span class="hljs-type">int</span>,<br>    score <span class="hljs-type">int</span>,<br><span class="hljs-keyword">primary</span> key (studentid,courseid)<br>);        <br><span class="hljs-comment">-- ②修改时：</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> tb_name <span class="hljs-keyword">add</span> <span class="hljs-keyword">primary</span> key (字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span>,字段<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h4 id="4-主键自增约束"><a href="#4-主键自增约束" class="headerlink" title="(4) 主键自增约束"></a>(4) 主键自增约束</h4><p>当主键定义为自增长后，这个主键的值就不再需要用户输入数据了，而由数据库系统根据定义自动赋值。每增加一条记录，主键会自动以相同的步长进行增长。</p><p>通过给字段添加<code>AUTO_INCREMENT</code>属性来实现主键自增长</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t1(<br>   id <span class="hljs-type">INT</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>   name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">25</span>) <br>   );<br></code></pre></td></tr></table></figure><h2 id="7-2、唯一约束"><a href="#7-2、唯一约束" class="headerlink" title="7.2、唯一约束"></a>7.2、唯一约束</h2><p>唯一约束（Unique Key）是指所有记录中字段的值不能重复出现。例如，为 id 字段加上唯一性约束后，每条记录的 id 值都是唯一的，不能出现重复的情况。</p><h4 id="（1）创建约束"><a href="#（1）创建约束" class="headerlink" title="（1）创建约束"></a>（1）创建约束</h4><p>例如，在用户信息表中，要避免表中的用户名重名，就可以把用户名列设置为唯一约束。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span>(<br>    id <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">PRIMARY</span> KEY,<br>    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">22</span>) <span class="hljs-keyword">UNIQUE</span><br>    );<br>    <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">user</span> (id,name) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,&quot;yuan&quot;),(<span class="hljs-number">2</span>,&quot;rain&quot;);   <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">user</span> (id,name) <span class="hljs-keyword">values</span> (<span class="hljs-number">3</span>,&quot;alvin&quot;),(<span class="hljs-number">4</span>,&quot;alvin&quot;);<br><span class="hljs-comment">-- ERROR 1062 (23000): Duplicate entry &#x27;alvin&#x27; for key &#x27;name&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="（2）改表时添加删除唯一约束"><a href="#（2）改表时添加删除唯一约束" class="headerlink" title="（2）改表时添加删除唯一约束"></a>（2）改表时添加删除唯一约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">DROP</span> INDEX <span class="hljs-operator">&lt;</span>唯一约束名<span class="hljs-operator">&gt;</span>;  <span class="hljs-comment">-- 删除唯一约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>数据表名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> <span class="hljs-operator">&lt;</span>唯一约束名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">UNIQUE</span>(<span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span>);  <span class="hljs-comment">-- 添加唯一约束</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span>  <span class="hljs-keyword">DROP</span> INDEX name;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> NAME_INDEX <span class="hljs-keyword">UNIQUE</span>(name);<br></code></pre></td></tr></table></figure><h2 id="7-3、非空约束"><a href="#7-3、非空约束" class="headerlink" title="7.3、非空约束"></a>7.3、非空约束</h2><p>非空约束用来约束表中的字段不能为空。比如，在用户信息表中，如果不添加用户名，那么这条用户信息就是无效的，这时就可以为用户名字段设置非空约束。</p><p>创建表时可以使用<code>NOT NULL</code>关键字设置非空约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span>(<br>   id <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">PRIMARY</span> KEY,<br>   name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">22</span>) <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>   );<br></code></pre></td></tr></table></figure><p>添加和删除非空约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除非空约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>数据表名<span class="hljs-operator">&gt;</span><br>CHANGE <span class="hljs-keyword">COLUMN</span> <span class="hljs-operator">&lt;</span>字段名<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>字段名<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">NULL</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span> CHANGE <span class="hljs-keyword">COLUMN</span> name name <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NULL</span>;<br><span class="hljs-comment">-- 添加非空约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>数据表名<span class="hljs-operator">&gt;</span><br>CHANGE <span class="hljs-keyword">COLUMN</span> <span class="hljs-operator">&lt;</span>字段名<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>字段名<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span> CHANGE <span class="hljs-keyword">COLUMN</span> name name <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><h2 id="7-4、默认值约束"><a href="#7-4、默认值约束" class="headerlink" title="7.4、默认值约束"></a>7.4、默认值约束</h2><p>默认值约束用来约束当数据表中某个字段不输入值时，自动为其添加一个已经设置好的值。</p><p>创建表时可以使用<code>DEFAULT</code>关键字设置默认值约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> stu(<br>   id <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">PRIMARY</span> KEY,<br>   name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">22</span>) <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   gender <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">22</span>) <span class="hljs-keyword">DEFAULT</span> &quot;male&quot;<br>   );<br></code></pre></td></tr></table></figure><p>添加和删除默认值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除非空约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>数据表名<span class="hljs-operator">&gt;</span><br>CHANGE <span class="hljs-keyword">COLUMN</span> <span class="hljs-operator">&lt;</span>字段名<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>字段名<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> stu CHANGE <span class="hljs-keyword">COLUMN</span> gender gender <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>;<br><span class="hljs-comment">-- 添加非空约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>数据表名<span class="hljs-operator">&gt;</span><br>CHANGE <span class="hljs-keyword">COLUMN</span> <span class="hljs-operator">&lt;</span>字段名<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-operator">&lt;</span>默认值<span class="hljs-operator">&gt;</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> stu CHANGE <span class="hljs-keyword">COLUMN</span> gender gender <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> &quot;female&quot;;<br></code></pre></td></tr></table></figure><h2 id="7-5、外键约束"><a href="#7-5、外键约束" class="headerlink" title="7.5、外键约束"></a>7.5、外键约束</h2><p>外键约束经常和主键约束一起使用，用来确保数据的一致性。</p><p>外键约束（FOREIGN KEY）是表的一个特殊字段，经常与主键约束一起使用。对于两个具有关联关系的表而言，相关联字段中主键所在的表就是主表（父表），外键所在的表就是从表（子表）。</p><p>外键用来建立主表与从表的关联关系，为两个表的数据建立连接，约束两个表中数据的一致性和完整性。主表删除某条记录时，从表中与之对应的记录也必须有相应的改变。一个表可以有一个或多个外键，外键可以为空值，若不为空值，则每一个外键的值必须等于主表中主键的某个值。</p><p>比如上面的书籍管理案例，若删除一个清华出版社记录，没有任何影响，但是，书籍表中pub_id &#x3D; 1 的记录出版社字段就没有意义了。</p><blockquote><p>定义外键时，需要遵守下列规则：</p><ul><li>主表必须已经存在于数据库中，或者是当前正在创建的表。如果是后一种情况，则主表与从表是同一个表，这样的表称为自参照表，这种结构称为自参照完整性。</li><li>必须为主表定义主键。</li><li>主键不能包含空值，但允许在外键中出现空值。也就是说，只要外键的每个非空值出现在指定的主键中，这个外键的内容就是正确的。</li><li>在主表的表名后面指定列名或列名的组合。这个列或列的组合必须是主表的主键或候选键。</li><li>外键中列的数目必须和主表的主键中列的数目相同。</li><li>外键中列的数据类型必须和主表主键中对应列的数据类型相同（非常重要）。</li></ul></blockquote><h4 id="（1）创建表时设置外键约束"><a href="#（1）创建表时设置外键约束" class="headerlink" title="（1）创建表时设置外键约束"></a>（1）创建表时设置外键约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">[<span class="hljs-keyword">CONSTRAINT</span> <span class="hljs-operator">&lt;</span>外键名<span class="hljs-operator">&gt;</span>] <span class="hljs-keyword">FOREIGN</span> KEY 字段名 [，字段名<span class="hljs-number">2</span>，…]<br><span class="hljs-keyword">REFERENCES</span> <span class="hljs-operator">&lt;</span>主表名<span class="hljs-operator">&gt;</span> 主键列<span class="hljs-number">1</span> [，主键列<span class="hljs-number">2</span>，…]<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 书籍表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> book(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>title <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>price <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>),    <br>pub_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">FOREIGN</span> KEY(pub_id) <span class="hljs-keyword">REFERENCES</span> publisher(id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> CASCADE <span class="hljs-comment">-- 建立外键约束    </span><br>)ENGINE<span class="hljs-operator">=</span>INNODB CHARSET<span class="hljs-operator">=</span>utf8;<br><br><br><span class="hljs-comment">-- 出版社表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> publisher(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>addr <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>)<br>)ENGINE<span class="hljs-operator">=</span>INNODB CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- 作者表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> author(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>)ENGINE<span class="hljs-operator">=</span>INNODB CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">-- 作者表和书籍表的多对多关系表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> book2author(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span> AUTO_INCREMENT,<br>author_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>book_id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">FOREIGN</span> KEY(author_id) <span class="hljs-keyword">REFERENCES</span> author(id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> CASCADE <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE, <span class="hljs-comment">-- 建立外键约束</span><br><span class="hljs-keyword">FOREIGN</span> KEY(book_id) <span class="hljs-keyword">REFERENCES</span> book(id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> CASCADE <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE     <span class="hljs-comment">-- 建立外键约束</span><br>)ENGINE<span class="hljs-operator">=</span>INNODB CHARSET<span class="hljs-operator">=</span>utf8;<br><br><br></code></pre></td></tr></table></figure><h4 id="（2）添加删除外键约束"><a href="#（2）添加删除外键约束" class="headerlink" title="（2）添加删除外键约束"></a>（2）添加删除外键约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 添加外键约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>数据表名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> <span class="hljs-operator">&lt;</span>外键名<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">FOREIGN</span> KEY(<span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span>) <span class="hljs-keyword">REFERENCES</span> <span class="hljs-operator">&lt;</span>主表名<span class="hljs-operator">&gt;</span> (<span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span>);<br><br><span class="hljs-comment">-- 删除外键约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FOREIGN</span> KEY <span class="hljs-operator">&lt;</span>外键约束名<span class="hljs-operator">&gt;</span>;<br><span class="hljs-keyword">drop</span> index 外键约束名 <span class="hljs-keyword">on</span><span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span>; <span class="hljs-comment">-- 同时将索引删除 </span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> book <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> dep_fk<br><span class="hljs-keyword">FOREIGN</span> KEY(pub_id) <span class="hljs-keyword">REFERENCES</span> publisher(id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE;<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> book;<br><span class="hljs-comment">-- 尝试删除一个出版社记录</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> publisher <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`yuan`.`book`, CONSTRAINT `dep_fk` FOREIGN KEY (`pub_id`) REFERENCES `publisher` (`id`)) */</span><br><span class="hljs-comment">-- 删除外键约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> book <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FOREIGN</span> KEY dep_fk;<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> book;<br><span class="hljs-keyword">drop</span> index dep_fk <span class="hljs-keyword">on</span> book;<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> book;<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> book <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> dep_fk <span class="hljs-keyword">FOREIGN</span> KEY(pub_id) <span class="hljs-keyword">REFERENCES</span> publisher(id) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE; <br><br><br><span class="hljs-comment">--  再次尝试删除一个出版社记录，此时就是级联删除了，所有book表中关联publisher表中id=1的记录都会级联删除</span><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> publisher <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> book;<br></code></pre></td></tr></table></figure><h4 id="（3）INNODB支持的ON语句"><a href="#（3）INNODB支持的ON语句" class="headerlink" title="（3）INNODB支持的ON语句"></a>（3）INNODB支持的ON语句</h4><p>外键约束对子表的含义: 如果在主表中(比如dep)找不到候选键,则不允许在子表(比如emp)上进行insert&#x2F;update</p><p>外键约束对父表的含义: 在主表上进行update&#x2F;delete以更新或删除在子表中有一条或多条应匹配行的候选键时,父表的行为取决于：在定义子表的外键时指定的 – on update&#x2F;on delete子句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">FOREIGN</span> KEY () <span class="hljs-keyword">REFERENCES</span> () <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-comment">-- (1) cascade</span><br>cascade方式 在父表上<span class="hljs-keyword">update</span><span class="hljs-operator">/</span><span class="hljs-keyword">delete</span>记录时，同步<span class="hljs-keyword">update</span><span class="hljs-operator">/</span><span class="hljs-keyword">delete</span>掉子表的匹配记录外键的级联删除：如果父表中的记录被删除，则子表中对应的记录自动被删除<br><br><span class="hljs-comment">-- (2) cascade     </span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">null</span>方式 在父表上<span class="hljs-keyword">update</span><span class="hljs-operator">/</span><span class="hljs-keyword">delete</span>记录时，将子表上匹配记录的列设为<span class="hljs-keyword">null</span> ; 要注意子表的外键列不能为<span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br><br><span class="hljs-comment">-- (3) Restrict</span><br>Restrict方式 :拒绝对父表进行删除更新操作(了解)<br><br><span class="hljs-comment">-- (4) No action</span><br><span class="hljs-keyword">No</span> action方式 在mysql中同Restrict,如果子表中有匹配的记录,则不允许对父表对应候选键 ; 进行<span class="hljs-keyword">update</span><span class="hljs-operator">/</span><span class="hljs-keyword">delete</span>操作（了解）<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Go开发之路</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GO Gin框架入门</title>
    <link href="/2024/01/12/Go_Gin%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E5%88%B0%E7%8B%82%E6%9A%B4/"/>
    <url>/2024/01/12/Go_Gin%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%E5%88%B0%E7%8B%82%E6%9A%B4/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>预备知识点</strong></p><ol><li><strong>Golang基础（数据类型，流程控制语句，函数，结构体等）</strong></li><li><strong>Mysql的基本sql语句</strong></li><li><strong>HTML + CSS</strong></li></ol></blockquote><p><strong>什么是框架，类似写作文的模板一样，比如入党申请书….</strong></p><p><img src="/pages_images/Gin/gin%E5%92%8Cgo-0245512-0245514.png"></p><h1 id="Gin框架入门到精通"><a href="#Gin框架入门到精通" class="headerlink" title="Gin框架入门到精通"></a>Gin框架入门到精通</h1><h1 id="一、Gin开篇"><a href="#一、Gin开篇" class="headerlink" title="一、Gin开篇"></a>一、Gin开篇</h1><h2 id="1-1、web应用程序"><a href="#1-1、web应用程序" class="headerlink" title="1.1、web应用程序"></a>1.1、web应用程序</h2><p><img src="/pages_images/Gin/image-20220901214542004.png" alt="image-20220901214542004"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8888&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> listener.Close()<br><span class="hljs-comment">// 2.服务端不断等待请求处理</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// 阻塞等待客户端连接</span><br>fmt.Println(<span class="hljs-string">&quot;server is waiting...&quot;</span>)<br>conn, err := listener.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br>data := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1024</span>)<br>n, err := conn.Read(data)<br>fmt.Println(<span class="hljs-string">&quot;receive data:\n&quot;</span>, <span class="hljs-type">string</span>(data[:n]))<br>conn.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;HTTP/1.1 200 OK\r\n\r\n&lt;h1&gt;Welcome to Web World!&lt;/h1&gt;&quot;</span>))<br>conn.Close()<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2、http协议"><a href="#1-2、http协议" class="headerlink" title="1.2、http协议"></a>1.2、http协议</h2><h4 id="（1）简介"><a href="#（1）简介" class="headerlink" title="（1）简介"></a>（1）简介</h4><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于万维网（WWW:World Wide Web ）服务器与本地浏览器之间传输超文本的传送协议。HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p><p><img src="/pages_images/Gin/%E6%88%AA%E5%B1%8F2022-08-28%2020.18.31.png" alt="截屏2022-08-28 20.18.31"></p><h4 id="（2）http协议特性"><a href="#（2）http协议特性" class="headerlink" title="（2）http协议特性"></a>（2）http协议特性</h4> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs text">(1) 基于TCP/IP协议<br><br>http协议是基于TCP/IP协议之上的应用层协议。<br><br>(2) 基于请求－响应模式<br><br>HTTP协议规定,请求从客户端发出,最后服务器端响应该请求并 返回。换句话说,肯定是先从客户端开始建立通信的,服务器端在没有 接收到请求之前不会发送响应<br><br> (3) 无状态保存<br><br>HTTP是一种不保存状态,即无状态(stateless)协议。HTTP协议 自身不对请求和响应之间的通信状态进行保存。也就是说在HTTP这个 级别,协议对于发送过的请求或响应都不做持久化处理。<br><br>使用HTTP协议,每当有新的请求发送时,就会有对应的新响应产 生。协议本身并不保留之前一切的请求或响应报文的信息。这是为了更快地处理大量事务,确保协议的可伸缩性,而特意把HTTP协议设计成 如此简单的。<br><br> (4) 短连接和长连接<br><br>HTTP1.0默认使用的是短连接。浏览器和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。<br>HTTP/1.1起，默认使用长连接。要使用长连接，客户端和服务器的HTTP首部的Connection都要设置为keep-alive，才能支持长连接。<br>HTTP长连接，指的是复用TCP连接。多个HTTP请求可以复用同一个TCP连接，这就节省了TCP连接建立和断开的消耗。<br></code></pre></td></tr></table></figure><h4 id="（3）http请求协议与响应协议"><a href="#（3）http请求协议与响应协议" class="headerlink" title="（3）http请求协议与响应协议"></a>（3）http请求协议与响应协议</h4><p>http协议包含由浏览器发送数据到服务器需要遵循的请求协议与服务器发送数据到浏览器需要遵循的请求协议。用于HTTP协议交互的信被为HTTP报文。请求端(客户端)的HTTP报文 做请求报文,响应端(服务器端)的 做响应报文。HTTP报文本身是由多行数据构成的字文本。</p><p>​<img src="/pages_images/Gin/http%E5%8D%8F%E8%AE%AE.png" alt="http协议"></p><blockquote><ol><li>一个完整的URL包括：协议、ip、端口、路径、参数</li></ol><p>例如： <a href="https://www.baidu.com/s?wd=yuan">https://www.baidu.com/s?wd=yuan</a>     其中https是协议，<a href="http://www.baidu.com/">www.baidu.com</a> 是IP，端口默认80，&#x2F;s是路径，参数是wd&#x3D;yuan</p><ol start="2"><li>请求方式: get与post请求</li></ol><ul><li>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditBook?name&#x3D;test1&amp;id&#x3D;123456. POST方法是把提交的数据放在HTTP包的请求体中.</li><li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制</li></ul><ol start="3"><li>响应状态码：状态码的职 是当客户端向服务器端发送请求时, 返回的请求 结果。借助状态码,用户可以知道服务器端是正常 理了请求,还是出 现了 。状态码如200 OK,以3位数字和原因 组成。</li></ol></blockquote><h2 id="1-3、quick-start"><a href="#1-3、quick-start" class="headerlink" title="1.3、quick start"></a>1.3、quick start</h2><p>Gin 是一个用 Go (Golang) 编写的 web 框架（web框架就是web应用程序框架）。 它是一个类似于 <a href="https://github.com/go-martini/martini">martini</a> 但拥有更好性能的 API 框架, 由于 <a href="https://github.com/julienschmidt/httprouter">httprouter</a>，速度提高了近 40 倍。 如果你是性能和高效的追求者, 你会爱上 Gin.</p><h3 id="1-3-1、安装"><a href="#1-3-1、安装" class="headerlink" title="1.3.1、安装"></a>1.3.1、安装</h3><p>要安装 Gin 软件包，需要先安装 Go 并设置 Go 工作区。</p><p>1.下载并安装 gin：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ go get -u github.com/gin-gonic/gin<br></code></pre></td></tr></table></figure><p>2.将 gin 引入到代码中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br></code></pre></td></tr></table></figure><p>3.（可选）如果使用诸如 <code>http.StatusOK</code> 之类的常量，则需要引入 <code>net/http</code> 包：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;net/http&quot;</span><br></code></pre></td></tr></table></figure><h3 id="1-3-2、quick-start"><a href="#1-3-2、quick-start" class="headerlink" title="1.3.2、quick start"></a>1.3.2、quick start</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><span class="hljs-comment">// 返回一个json数据</span><br>r.GET(<span class="hljs-string">&quot;/user&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;yuan&quot;</span>,<br>&#125;)<br>&#125;)<br><br><span class="hljs-comment">// 返回一个html页面</span><br>r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/*&quot;</span>)<br>r.GET(<span class="hljs-string">&quot;/index&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.HTML(http.StatusOK, <span class="hljs-string">&quot;index.html&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;)<br><br>r.Run() <span class="hljs-comment">// 监听并在 0.0.0.0:8080 上启动服务</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-3-3、mvc"><a href="#1-3-3、mvc" class="headerlink" title="1.3.3、mvc"></a>1.3.3、mvc</h3><p>广义看MVC，M是指业务模型，V是指用户界面，C则是控制器，使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。其中，View的定义比较清晰，就是用户界面。</p><p><img src="/pages_images/Gin/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ3NzE0Mjg4,size_16,color_FFFFFF,t_70-9027201-9027242.png" alt="img"></p><blockquote><ul><li>视图层（View）：负责格式化数据并把它们呈现给用户，包括数据展示、用户交互、数据验证、界面设计等功能。</li><li>控制层（Controller）：负责接收并转发请求，对请求进行处理后，指定视图并将响应结果发送给客户端。</li><li>数据模型层（Model）：模型对象拥有最多的处理任务，是应用程序的主体部分，它负责数据逻辑（业务规则）的处理和实现数据操作（即对数据库中的数据增删改查）。</li></ul></blockquote><p>MVC(Model-View-Controller) 模式的基本思想是：数据 ，显示和处理相分离。</p><p>Gin框架的流程图:</p><p><img src="/pages_images/Gin/Gin%E6%A1%86%E6%9E%B6%E6%B5%81%E7%A8%8B%E5%9B%BE-5321444-5321446.png" alt="Gin框架流程图"></p><h3 id="1-3-3、timer案例"><a href="#1-3-3、timer案例" class="headerlink" title="1.3.3、timer案例"></a>1.3.3、timer案例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="1-3-4、登陆案例"><a href="#1-3-4、登陆案例" class="headerlink" title="1.3.4、登陆案例"></a>1.3.4、登陆案例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h1 id="二、Gin路由"><a href="#二、Gin路由" class="headerlink" title="二、Gin路由"></a>二、Gin路由</h1><h2 id="2-1、路由方法"><a href="#2-1、路由方法" class="headerlink" title="2.1、路由方法"></a>2.1、路由方法</h2><p>路由系统支持任意方式的请求，如下的方法用来提供对应方法来接收请求：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(group *RouterGroup)</span></span> DELETE(relativePath <span class="hljs-type">string</span>, handlers ...HandlerFunc) IRoutes<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(group *RouterGroup)</span></span> GET(relativePath <span class="hljs-type">string</span>, handlers ...HandlerFunc) IRoutes<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(group *RouterGroup)</span></span> HEAD(relativePath <span class="hljs-type">string</span>, handlers ...HandlerFunc) IRoutes<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(group *RouterGroup)</span></span> OPTIONS(relativePath <span class="hljs-type">string</span>, handlers ...HandlerFunc) IRoutes<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(group *RouterGroup)</span></span> PATCH(relativePath <span class="hljs-type">string</span>, handlers ...HandlerFunc) IRoutes<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(group *RouterGroup)</span></span> POST(relativePath <span class="hljs-type">string</span>, handlers ...HandlerFunc) IRoutes<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(group *RouterGroup)</span></span> PUT(relativePath <span class="hljs-type">string</span>, handlers ...HandlerFunc) IRoutes<br><span class="hljs-comment">// 任意路由</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(group *RouterGroup)</span></span> ANY(relativePath <span class="hljs-type">string</span>, handlers ...HandlerFunc) IRoutes<br><br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.GET(<span class="hljs-string">&quot;/book&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>&#125;)<br>&#125;)<br><br>r.POST(<span class="hljs-string">&quot;/book&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>&#125;)<br>&#125;)<br><br>r.PUT(<span class="hljs-string">&quot;/book&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;PUT&quot;</span>,<br>&#125;)<br>&#125;)<br><br>r.DELETE(<span class="hljs-string">&quot;/book&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;DELETE&quot;</span>,<br>&#125;)<br>&#125;)<br>  <br>  <span class="hljs-comment">// 路由匹配不成功</span><br>r.NoRoute(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.HTML(http.StatusNotFound, <span class="hljs-string">&quot;404.html&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;)<br>  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2、路由分组"><a href="#2-2、路由分组" class="headerlink" title="2.2、路由分组"></a>2.2、路由分组</h2><p>路由分组用于将多个路由进行统一的处理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 书籍相关的路由</span><br>bookRoute := r.Group(<span class="hljs-string">&quot;/books&quot;</span>)<br>&#123;<br>  bookRoute.GET(<span class="hljs-string">&quot;/&quot;</span>, GetBook)<br>bookRoute.POST(<span class="hljs-string">&quot;/add&quot;</span>, AddBook)<br>bookRoute.GET(<span class="hljs-string">&quot;/edit&quot;</span>, EditBook)<br>bookRoute.GET(<span class="hljs-string">&quot;/delete&quot;</span>, DeleteBook)<br>&#125;<br><br><span class="hljs-comment">// 出版社相关的路由</span><br>publishRoute := r.Group(<span class="hljs-string">&quot;/publish&quot;</span>)<br>&#123;<br>  publishRoute.GET(<span class="hljs-string">&quot;/&quot;</span>, GetPublish)<br>publishRoute.POST(<span class="hljs-string">&quot;/add&quot;</span>, AddPublish)<br>publishRoute.GET(<span class="hljs-string">&quot;/edit&quot;</span>,EditPublish)<br>publishRoute.GET(<span class="hljs-string">&quot;/delete&quot;</span>,DeletePublish)<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="三、请求与响应"><a href="#三、请求与响应" class="headerlink" title="三、请求与响应"></a>三、请求与响应</h1><h2 id="3-1、请求数据"><a href="#3-1、请求数据" class="headerlink" title="3.1、请求数据"></a>3.1、请求数据</h2><h3 id="（1）获取基本请求数据"><a href="#（1）获取基本请求数据" class="headerlink" title="（1）获取基本请求数据"></a>（1）获取基本请求数据</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs golang">  r.GET(<span class="hljs-string">&quot;/test&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>  <span class="hljs-comment">// 获取基本请求信息</span><br>  fmt.Println(c.Request.Method)     <span class="hljs-comment">// GET</span><br>  fmt.Println(c.Request.URL)        <span class="hljs-comment">// /test</span><br>  fmt.Println(c.Request.RemoteAddr) <span class="hljs-comment">// 127.0.0.1:58581</span><br>  fmt.Println(c.ClientIP())         <span class="hljs-comment">// 127.0.0.1</span><br>  <span class="hljs-comment">// 获取请求头</span><br>  fmt.Println(c.Request.Header)<br>  fmt.Println(c.Request.Header[<span class="hljs-string">&quot;User-Agent&quot;</span>])<br>  fmt.Println(c.GetHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>))<br><br>  c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;test OK!&quot;</span>) <br><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="（2）获取路径参数"><a href="#（2）获取路径参数" class="headerlink" title="（2）获取路径参数"></a>（2）获取路径参数</h3><p>获取URL路径参数，指的是获取&#x2F;user&#x2F;:id这类型路由绑定的参数，这个例⼦绑定了⼀个参数id，获取url路径参数常⽤函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c*Context)</span></span>Param(keystring)<span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 例⼦：</span><br>r:=gin.Default()<br>r.GET(<span class="hljs-string">&quot;/user/:id&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c*gin.Context)</span></span>&#123;<br>    <span class="hljs-comment">//获取url参数id</span><br>    id:=c.Param(<span class="hljs-string">&quot;id&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="（3）获取查询参数"><a href="#（3）获取查询参数" class="headerlink" title="（3）获取查询参数"></a>（3）获取查询参数</h3><p>Get请求url例子：<code>/path?kd=yuan</code></p><p>获取Get请求参数的常用函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">func</span>(c*<span class="hljs-type">Context</span>)<span class="hljs-type">Query</span>(keystring)string<br><span class="hljs-title">func</span>(c*<span class="hljs-type">Context</span>)<span class="hljs-type">DefaultQuery</span>(key,defaultValuestring)string<br><span class="hljs-title">func</span>(c*<span class="hljs-type">Context</span>)<span class="hljs-type">GetQuery</span>(keystring)(string,bool)<br></code></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// 例⼦：</span><br>funcHandler(c *gin.Context)&#123;<br>    <span class="hljs-comment">//获取name参数,通过Query获取的参数值是String类型。</span><br>    name:=c.Query(<span class="hljs-string">&quot;name&quot;</span>)<br>    <span class="hljs-comment">//获取name参数,跟Query函数的区别是，可以通过第⼆个参数设置默认值。</span><br>    name:=c.DefaultQuery(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>)<br>    <span class="hljs-comment">//获取id参数,通过GetQuery获取的参数值也是String类型,</span><br>    <span class="hljs-comment">//区别是GetQuery返回两个参数，第⼀个是参数值，第⼆个参数是参数是否存在的bool值，可以⽤来判断参数是否存在。</span><br>    id,ok:=c.GetQuery(<span class="hljs-string">&quot;id&quot;</span>)<br>    <span class="hljs-keyword">if</span>!ok&#123;<br>    <span class="hljs-comment">//参数不存在</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 提⽰：GetQuery函数，判断参数是否存在的逻辑是，参数值为空，参数也算存在，只有没有提交参数，才算参数不存在。</span><br></code></pre></td></tr></table></figure><h3 id="（4）获取PostForm数据"><a href="#（4）获取PostForm数据" class="headerlink" title="（4）获取PostForm数据"></a>（4）获取PostForm数据</h3><p>获取Post请求参数的常用函数：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c*Context)</span></span>PostForm(keystring)<span class="hljs-type">string</span><br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c*Context)</span></span>DefaultPostForm(key,defaultValuestring)<span class="hljs-type">string</span><br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c*Context)</span></span>GetPostForm(keystring)(<span class="hljs-type">string</span>,<span class="hljs-type">bool</span>)<br></code></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// 例⼦：</span><br>funcHandler(c *gin.Context)&#123;<br>    <span class="hljs-comment">//获取name参数,通过PostForm获取的参数值是String类型。</span><br>    name:=c.PostForm(<span class="hljs-string">&quot;name&quot;</span>)<br>    <span class="hljs-comment">//跟PostForm的区别是可以通过第⼆个参数设置参数默认值</span><br>    name:=c.DefaultPostForm(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>)<br>    <span class="hljs-comment">//获取id参数,通过GetPostForm获取的参数值也是String类型,</span><br>        <span class="hljs-comment">//区别是GetPostForm返回两个参数，第⼀个是参数值，第⼆个参数是参数是否存在的bool值，可以⽤来判断参数是否存在。</span><br>    id,ok:=c.GetPostForm(<span class="hljs-string">&quot;id&quot;</span>)<br>    <span class="hljs-keyword">if</span>!ok&#123;<br>    <span class="hljs-comment">//参数不存在</span><br>    &#125;<br>    <span class="hljs-comment">// 获取PostForm的数组值</span><br>    names:=c.PostFormArray(<span class="hljs-string">&quot;names&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（5）ShouldBind函数"><a href="#（5）ShouldBind函数" class="headerlink" title="（5）ShouldBind函数"></a>（5）ShouldBind函数</h3><p>前⾯获取参数的⽅式都是⼀个个参数的读取，⽐较⿇烦，Gin框架⽀持将请求参数⾃动绑定到⼀个struct对象，这种⽅式⽀持Get&#x2F;Post请求，也⽀持http请求body内容为json&#x2F;xml格式的参数。</p><p><strong>ShouldBind</strong>强大的功能，可以基于请求的<strong>Content-Type</strong>识别请求数据类型并利用反射机制自动提取请求中querystring、form表单、JSON、XML等参数到结构体中。能够基于请求自动提取JSON、form表单和querystring类型的数据，并把值绑定到指定的结构体对象。</p><blockquote><p>struct标签说明：<br>（1）json:”name” 数据格式为json格式，并且json字段名为name<br>（2）form:”name” 表单参数名为name<br>提⽰：你可以根据⾃⼰的需要选择⽀持的数据类型，例如需要⽀持json数据格式，可以这样定义字段标签:json:”name”</p></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>Name  <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot; form:&quot;name&quot;`</span><br>Age   <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;age&quot; form:&quot;age&quot;`</span><br>Email <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;email&quot; form:&quot;email&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 1.创建路由</span><br>r := gin.Default()<br><br>r.POST(<span class="hljs-string">&quot;/user/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-comment">//初始化User</span><br>user := User&#123;&#125;<br><span class="hljs-comment">//通过ShouldBind函数，将请求参数绑定到struct对象，处理json请求代码是⼀样的。</span><br><span class="hljs-comment">//如果是post请求则根据Content-Type判断，接收的是json数据，还是普通的http请求参数</span><br><span class="hljs-keyword">if</span> c.ShouldBind(&amp;user) == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">//绑定成功，打印请求参数</span><br>log.Println(<span class="hljs-string">&quot;user:&quot;</span>, user)<br>&#125;<br><span class="hljs-comment">//http请求返回⼀个字符串</span><br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;msg&quot;</span>:             <span class="hljs-string">&quot;parser Success&quot;</span>,<br><span class="hljs-string">&quot;请求的content-type&quot;</span>: c.ContentType(),<br><span class="hljs-string">&quot;解构后的数据&quot;</span>:          user,<br>&#125;)<br>&#125;)<br><br>r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/pages_images/Gin/image-20221202134138674-9959700-9959848.png" alt="image-20221202134138674"></p><p><img src="/pages_images/Gin/image-20221202134224622-9959745-9959864.png" alt="image-20221202134224622"></p><p><img src="/pages_images/Gin/image-20221202134317876-9959799.png" alt="image-20221202134317876"></p><p>ShouldBind有⼀系列函数，⼤致就是把前⾯的⽅式绑定到结构体的⽅式，如：ShouldBindUri()、ShouldBindQuery()等等，⽤法和ShouldBind类似，这⾥就不展开介绍了。</p><blockquote><p>提⽰：如果你通过http请求body传递json格式的请求参数，并且通过post请求的⽅式提交参数，则需要将Content-Type设置为<br>application&#x2F;json,如果是xml格式的数据，则设置为application&#x2F;xml</p></blockquote><h2 id="3-2、响应数据"><a href="#3-2、响应数据" class="headerlink" title="3.2、响应数据"></a>3.2、响应数据</h2><h3 id="3-2-1、响应不同的数据格式"><a href="#3-2-1、响应不同的数据格式" class="headerlink" title="3.2.1、响应不同的数据格式"></a>3.2.1、响应不同的数据格式</h3><h4 id="（1）响应简单字符串"><a href="#（1）响应简单字符串" class="headerlink" title="（1）响应简单字符串"></a>（1）响应简单字符串</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs golang">r.GET(<span class="hljs-string">&quot;/str&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;hello world!&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="（2）响应html页面"><a href="#（2）响应html页面" class="headerlink" title="（2）响应html页面"></a>（2）响应html页面</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang"> r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/*&quot;</span>)<br>r.GET(<span class="hljs-string">&quot;/index&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.HTML(http.StatusOK, <span class="hljs-string">&quot;index.html&quot;</span>,<span class="hljs-literal">nil</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="（3）响应json"><a href="#（3）响应json" class="headerlink" title="（3）响应json"></a>（3）响应json</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 返回一个json数据</span><br>r.GET(<span class="hljs-string">&quot;/json&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;json数据&quot;</span>,<br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="（4）响应xml数据"><a href="#（4）响应xml数据" class="headerlink" title="（4）响应xml数据"></a>（4）响应xml数据</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// 返回一个xml数据</span><br>r.GET(<span class="hljs-string">&quot;/xml&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.XML(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;xml消息&quot;</span>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="（5）响应protobuf格式"><a href="#（5）响应protobuf格式" class="headerlink" title="（5）响应protobuf格式"></a>（5）响应protobuf格式</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">indexHandler</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><br><span class="hljs-comment">//c.XML(http.StatusOK, gin.H&#123;&quot;message&quot;:&quot;消息&quot;&#125;)</span><br><span class="hljs-comment">//c.YAML(http.StatusOK, gin.H&#123;&quot;message&quot;:&quot;消息&quot;&#125;)</span><br>reps := []<span class="hljs-type">int64</span>&#123;<span class="hljs-type">int64</span>(<span class="hljs-number">9</span>),<span class="hljs-type">int64</span>(<span class="hljs-number">55</span>)&#125;<br><br><span class="hljs-comment">// 自定义数据</span><br>label := <span class="hljs-string">&quot;你好啊,今天天气挺好的&quot;</span><br><br><span class="hljs-comment">// 传protobuf格式数据</span><br>data := &amp;protoexample.Test&#123;<br>Label: &amp;label,<br>Reps: reps,<br>&#125;<br>fmt.Println(data)<br>c.ProtoBuf(<span class="hljs-number">200</span>,data)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-2、静态文件"><a href="#3-2-2、静态文件" class="headerlink" title="3.2.2、静态文件"></a>3.2.2、静态文件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 静态文件配置</span><br>r.Static(<span class="hljs-string">&quot;/static&quot;</span>, <span class="hljs-string">&quot;./static&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-2-3、重定向"><a href="#3-2-3、重定向" class="headerlink" title="3.2.3、重定向"></a>3.2.3、重定向</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">c.Redirect(http.StatusMovedPermanently, <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)<br>c.Redirect(http.StatusMovedPermanently, <span class="hljs-string">&quot;/xml&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-2-4、异步响应"><a href="#3-2-4、异步响应" class="headerlink" title="3.2.4、异步响应"></a>3.2.4、异步响应</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 1.创建路由</span><br><span class="hljs-comment">// 默认使用了2个中间件Logger(), Recovery()</span><br>r := gin.Default()<br><span class="hljs-comment">// 1.异步</span><br>r.GET(<span class="hljs-string">&quot;/async&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 需要搞一个副本</span><br>copyContext := c.Copy()<br><span class="hljs-comment">// 异步处理</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>time.Sleep(<span class="hljs-number">3</span> * time.Second)<br>log.Println(<span class="hljs-string">&quot;异步执行：&quot;</span> + copyContext.Request.URL.Path)<br>&#125;()<br><br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;异步执行中&quot;</span>&#125;)<br><br>&#125;)<br><span class="hljs-comment">// 2.同步</span><br>r.GET(<span class="hljs-string">&quot;/sync&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>time.Sleep(<span class="hljs-number">3</span> * time.Second)<br>log.Println(<span class="hljs-string">&quot;同步执行：&quot;</span> + c.Request.URL.Path)<br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;同步执行结束&quot;</span>&#125;)<br>&#125;)<br><br>r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="四、Gin模板"><a href="#四、Gin模板" class="headerlink" title="四、Gin模板"></a>四、Gin模板</h1><p>模板在web开发中⼴泛使⽤，它能够有效的将业务逻辑和页⾯逻辑分开，使代码可读性增强、并且更加容易理解和维护。 模板简单来说就是⼀个其中包涵占位变量表⽰动态的部分的⽂件，模板⽂件在经过动态赋值后，返回给⽤户。</p><h2 id="4-1-、变量渲染"><a href="#4-1-、变量渲染" class="headerlink" title="4.1 、变量渲染"></a>4.1 、变量渲染</h2><p>视图部分：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-type">string</span><br>Age  <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 基于获取引擎对象，可以理解为路由对象</span><br>r := gin.Default()<br><span class="hljs-comment">// 加载模板文件</span><br>r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/*&quot;</span>)<br><br>r.GET(<span class="hljs-string">&quot;/index&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br><br>context.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;index.html&quot;</span>, gin.H&#123;<br><span class="hljs-string">&quot;user&quot;</span>:       <span class="hljs-string">&quot;yuan&quot;</span>,<br><span class="hljs-string">&quot;state&quot;</span>:      <span class="hljs-string">&quot;在线&quot;</span>,<br><span class="hljs-string">&quot;booksSlice&quot;</span>: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;金瓶梅&quot;</span>, <span class="hljs-string">&quot;聊斋&quot;</span>, <span class="hljs-string">&quot;剪灯新话&quot;</span>, <span class="hljs-string">&quot;国色天香&quot;</span>&#125;,<br><span class="hljs-string">&quot;stuMap&quot;</span>: <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<br><span class="hljs-string">&quot;name&quot;</span>:  <span class="hljs-string">&quot;rain&quot;</span>,<br><span class="hljs-string">&quot;age&quot;</span>:   <span class="hljs-number">22</span>,<br><span class="hljs-string">&quot;hobby&quot;</span>: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;足球&quot;</span>, <span class="hljs-string">&quot;篮球&quot;</span>, <span class="hljs-string">&quot;双色球&quot;</span>&#125;,<br>&#125;,<br><span class="hljs-string">&quot;stuStruct&quot;</span>: Student&#123;Name: <span class="hljs-string">&quot;yuan&quot;</span>, Age: <span class="hljs-number">22</span>&#125;,<br>&#125;)<br>&#125;)<br><br><span class="hljs-comment">// 启动:默认本机的8080端口</span><br>r.Run()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>模板html文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>变量渲染<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>&#123;&#123; . &#125;&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;.booksSlice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;index .booksSlice 0 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;index .booksSlice 1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;index .booksSlice 2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;.stuMap&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;.stuMap.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;.stuStruct&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;.stuStruct.Name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>切片的深度查询依靠内置函数index，map对象和结构体对象的深度查询通过句点符实现！</p></blockquote><h2 id="4-2-、控制结构"><a href="#4-2-、控制结构" class="headerlink" title="4.2 、控制结构"></a>4.2 、控制结构</h2><h4 id="（1）分支结构"><a href="#（1）分支结构" class="headerlink" title="（1）分支结构"></a>（1）分支结构</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;<span class="hljs-keyword">if</span>  pipeline&#125;&#125; T1 &#123;&#123;end&#125;&#125;<br>&#123;&#123;<span class="hljs-keyword">if</span>  pipeline&#125;&#125; T1 &#123;&#123;<span class="hljs-keyword">else</span>&#125;&#125; T0 &#123;&#123;end&#125;&#125;<br>&#123;&#123;<span class="hljs-keyword">if</span>  pipeline&#125;&#125; T1 &#123;&#123;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> pipeline&#125;&#125; T0 &#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><blockquote><ol><li>if类似与Go的if语句，它也具有单分⽀，多分⽀等多种结构，不同的是需要使⽤end关键字结束。</li><li>表达式为false的情况是各种数据对象的0值：数值0，指针或接口是nil，数组、slice、map或string则是len为0。</li></ol></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs golang">&lt;h3&gt;分支结构&lt;/h3&gt;<br>&#123;&#123;<span class="hljs-keyword">if</span> gt .stuStruct.Age <span class="hljs-number">18</span> &#125;&#125;<br>&lt;p&gt;&#123;&#123;index .booksSlice <span class="hljs-number">0</span> &#125;&#125;&lt;/p&gt;<br>&lt;p&gt;&#123;&#123;index .booksSlice <span class="hljs-number">1</span>&#125;&#125;&lt;/p&gt;<br>&lt;p&gt;&#123;&#123;index .booksSlice <span class="hljs-number">2</span>&#125;&#125;&lt;/p&gt;<br>&lt;p&gt;&#123;&#123;index .booksSlice <span class="hljs-number">3</span>&#125;&#125;&lt;/p&gt;<br>&#123;&#123;<span class="hljs-keyword">else</span>&#125;&#125;<br>&lt;p&gt;未成年区&lt;/p&gt;<br>&#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）循环结构"><a href="#（2）循环结构" class="headerlink" title="（2）循环结构"></a>（2）循环结构</h4><blockquote><p>表达式为false的情况是各种数据对象的0值：数值0，指针或接口是nil，数组、slice、map或string则是len为0。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;<span class="hljs-keyword">range</span> $value := .&#125;&#125; &#123;&#123;end&#125;&#125;<br>&#123;&#123;<span class="hljs-keyword">range</span> $key,$value := .&#125;&#125; &#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><blockquote><ol><li>如果range中只赋值给一个变量，则这个变量是当前正在迭代元素的值。如果赋值给两个变量，则第一个变量是索引值，第二个变量是当前正在迭代元素的值。</li><li>变量名以<code>$</code>开头</li></ol></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">&lt;h3&gt;循环结构&lt;/h3&gt;<br>&lt;p&gt;四大名著&lt;/p&gt;<br>&#123;&#123;<span class="hljs-keyword">range</span> $index,$value := .booksSlice&#125;&#125;<br>&lt;p&gt;&#123;&#123;$index&#125;&#125; : &#123;&#123;$value&#125;&#125; &lt;/p&gt;<br>&#123;&#123;end&#125;&#125;<br><br>&lt;p&gt;stuMap学生的所有爱好&lt;/p&gt;<br>&#123;&#123;<span class="hljs-keyword">range</span> $index,$value := .stuMap.hobby&#125;&#125;<br>&lt;p&gt;&#123;&#123;$index&#125;&#125; : &#123;&#123;$value&#125;&#125; &lt;/p&gt;<br>&#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）变量赋值"><a href="#（3）变量赋值" class="headerlink" title="（3）变量赋值"></a>（3）变量赋值</h4><p>可以在template中定义变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 未定义过的变量</span><br>&#123;&#123;$<span class="hljs-keyword">var</span> := pipeline&#125;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>. 是有作用域的</p></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// 展示年龄大于rain的所有学生</span><br><span class="hljs-comment">// &quot;students&quot;: []Student&#123;&#123;Name: &quot;yuan&quot;, Age: 22&#125;, &#123;Name: &quot;alvin&quot;, Age: 16&#125;, &#123;Name: &quot;eric&quot;, Age: 23&#125;&#125;,</span><br><br><span class="hljs-comment">// 错误写法</span><br>&#123;&#123;<span class="hljs-keyword">range</span> $index,$student := .students&#125;&#125;<br><br>&#123;&#123;<span class="hljs-keyword">if</span> gt $student.Age .stuMap.age &#125;&#125;   <span class="hljs-comment">// 此时的.已经不是全局的对象，而是当前遍历的$student对象</span><br>&lt;p&gt;&#123;&#123;$student.Name&#125;&#125;,&#123;&#123;$student.Age&#125;&#125;&lt;/p&gt;<br>&#123;&#123;end&#125;&#125;<br><br>&#123;&#123;end&#125;&#125;<br><br><span class="hljs-comment">// 正确写法</span><br>&#123;&#123;$rainAge := .stuMap.age&#125;&#125;<br>&#123;&#123;<span class="hljs-keyword">range</span> $index,$student := .students&#125;&#125;<br>&#123;&#123;<span class="hljs-keyword">if</span> gt $student.Age $rainAge &#125;&#125;<br>&lt;p&gt;&#123;&#123;$student.Name&#125;&#125;,&#123;&#123;$student.Age&#125;&#125;&lt;/p&gt;<br>&#123;&#123;end&#125;&#125;<br>&#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="（4）注释"><a href="#（4）注释" class="headerlink" title="（4）注释"></a>（4）注释</h4><p>注释，执行时会忽略。可以多行。注释不能嵌套，并且必须紧贴分界符始止。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;<span class="hljs-comment">/* a comment */</span>&#125;&#125;   <br></code></pre></td></tr></table></figure><blockquote><p>{&#x2F; 一定要紧贴</p></blockquote><h2 id="4-3、Gin的模板函数"><a href="#4-3、Gin的模板函数" class="headerlink" title="4.3、Gin的模板函数"></a>4.3、Gin的模板函数</h2><h4 id="（1）默认模板函数"><a href="#（1）默认模板函数" class="headerlink" title="（1）默认模板函数"></a>（1）默认模板函数</h4><p>语法格式：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">functionName</span><span class="hljs-meta"> [Argument...]</span><br></code></pre></td></tr></table></figure><p>Argument参数是可选的，如果有多个参数，参数直接用空格分隔。</p><table><thead><tr><th align="left">函数名</th><th align="left">函数调用格式</th><th align="left">对应关系运算</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">eq</td><td align="left">eq arg1 arg2</td><td align="left">arg1 &#x3D;&#x3D; arg2</td><td align="left">arg1等于arg2则返回true</td></tr><tr><td align="left">ne</td><td align="left">ne arg1 arg2</td><td align="left">arg1 !&#x3D; arg2</td><td align="left">arg1不等于arg2则返回true</td></tr><tr><td align="left">lt</td><td align="left">lt arg1 arg2</td><td align="left">arg1 &lt; arg2</td><td align="left">arg1小于arg2则返回true</td></tr><tr><td align="left">le</td><td align="left">le arg1 arg2</td><td align="left">arg1 &lt;&#x3D; arg2</td><td align="left">arg1小于等于arg2则返回true</td></tr><tr><td align="left">gt</td><td align="left">gt arg1 arg2</td><td align="left">arg1 &gt; arg2</td><td align="left">arg1大于arg2则返回true</td></tr><tr><td align="left">ge</td><td align="left">ge arg1 arg2</td><td align="left">arg1 &gt;&#x3D; arg2</td><td align="left">arg1大于等于arg2则返回true</td></tr><tr><td align="left">and</td><td align="left">and 表达式1 表达式2</td><td align="left">表达式1 &amp;&amp; 表达式2</td><td align="left">表达式1和表达式2都为真的时候返回true</td></tr><tr><td align="left">or</td><td align="left">or 表达式1 表达式2</td><td align="left">表达式1 || 表达式2</td><td align="left">表达式1和表达式2其中一个为真的时候返回true</td></tr><tr><td align="left">not</td><td align="left">not 表达式</td><td align="left">!表达式</td><td align="left">表达式为false则返回true, 反之返回false</td></tr><tr><td align="left">index</td><td align="left">index  arg 索引&#x2F;键</td><td align="left">index x 2 即x[2]</td><td align="left">每个被索引的主体必须是数组、切片或者字典</td></tr><tr><td align="left">len</td><td align="left">len arg</td><td align="left">len x 即x的元素个数</td><td align="left">用于计算数组大小</td></tr><tr><td align="left">urlquery</td><td align="left">urlquery arg</td><td align="left">urlquery url</td><td align="left">用于url编码</td></tr></tbody></table><h4 id="（2）自定义模板函数"><a href="#（2）自定义模板函数" class="headerlink" title="（2）自定义模板函数"></a>（2）自定义模板函数</h4><p>视图部分：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>router := gin.Default()<br>router.SetFuncMap(template.FuncMap&#123;<br><span class="hljs-string">&quot;add&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> x + y<br>&#125;,<br>&#125;)<br><span class="hljs-comment">// 返回一个html页面</span><br>router.LoadHTMLGlob(<span class="hljs-string">&quot;templates/*&quot;</span>)<br>router.GET(<span class="hljs-string">&quot;/index&quot;</span>, index)<br>router.Run() <span class="hljs-comment">// 监听并在 0.0.0.0:8080 上启动服务</span><br>&#125;<br></code></pre></td></tr></table></figure><p>模板部分：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;add <span class="hljs-number">2</span> <span class="hljs-number">3</span>&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="4-4、嵌套与继承"><a href="#4-4、嵌套与继承" class="headerlink" title="4.4、嵌套与继承"></a>4.4、嵌套与继承</h2><p>Gin框架默认都是使用单模板，如果需要使用<code>block template</code>功能，可以通过<code>&quot;https://github.com/gin-contrib/multitemplate&quot;</code>库实现</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-contrib/multitemplate&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br></code></pre></td></tr></table></figure><h4 id="（1）-嵌套：define和template"><a href="#（1）-嵌套：define和template" class="headerlink" title="（1） 嵌套：define和template"></a>（1） 嵌套：define和template</h4><p>在实际项目中，我们不可能只有一个模板，一般来说都有很多个模板，而且这些模板也会共享一些公共的模板，这些公共的模板我们都可以定义成子模板，在需要的时候调用子模板，就可以将子模板的内容嵌入当前模板中。</p><blockquote><p>提示：在项目中使用子模板，可以让项目模板具有模块化的能力，提高模块复用能力和可维护性。</p></blockquote><p>define可以直接在待解析内容中定义一个模板,定义了模板之后，可以使用template这个action来执行模板。template有两种格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;template <span class="hljs-string">&quot;name&quot;</span>&#125;&#125;<br>&#123;&#123;template <span class="hljs-string">&quot;name&quot;</span> pipeline&#125;&#125;<br></code></pre></td></tr></table></figure><p>第一种是直接执行名为name的template，点设置为nil。第二种是点”.”设置为pipeline的值，并执行名为name的template。可以将template看作是函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">template(<span class="hljs-string">&quot;name)</span><br><span class="hljs-string">template(&quot;</span>name<span class="hljs-string">&quot;,pipeline)</span><br></code></pre></td></tr></table></figure><p>示例：在t1页面中和t2页面中嵌入一个广告页面。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-contrib/multitemplate&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">createMyRender</span><span class="hljs-params">()</span></span> multitemplate.Renderer &#123;<br>r := multitemplate.NewRenderer()<br>r.AddFromFiles(<span class="hljs-string">&quot;t1.html&quot;</span>, <span class="hljs-string">&quot;templates/t1.html&quot;</span>, <span class="hljs-string">&quot;templates/adv.html&quot;</span>)<br>r.AddFromFiles(<span class="hljs-string">&quot;t2.html&quot;</span>, <span class="hljs-string">&quot;templates/t2.html&quot;</span>, <span class="hljs-string">&quot;templates/adv.html&quot;</span>)<br><span class="hljs-keyword">return</span> r<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 基于获取引擎对象，可以理解为路由对象</span><br>r := gin.Default()<br><span class="hljs-comment">// 加载模板文件</span><br><span class="hljs-comment">//r.LoadHTMLGlob(&quot;templates/*&quot;)</span><br>r.HTMLRender = createMyRender()<br><br>r.GET(<span class="hljs-string">&quot;/test01&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>context.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;t1.html&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;)<br>r.GET(<span class="hljs-string">&quot;/test02&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>context.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;t2.html&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;)<br><br><span class="hljs-comment">// 启动:默认本机的8080端口</span><br>r.Run()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>t1.html,t2.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=9&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Go Web Programming<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>This is t1.html<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;&#123; template &quot;adv.html&quot; &#125;&#125;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=9&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Go Web Programming<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>This is t2.html<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;&#123; template &quot;adv.html&quot; &#125;&#125;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>adv.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: rebeccapurple;line-height: 200px;color: white;text-align: center&quot;</span>&gt;</span><br>    这是一条广告信息<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="（2）继承：block块"><a href="#（2）继承：block块" class="headerlink" title="（2）继承：block块"></a>（2）继承：block块</h4><p>根据官方文档的解释：block等价于define定义一个模板，并在”有需要”的地方执行这个模板，执行时将”.”设置为pipeline的值。</p><p>但应该注意，block的第一个动作是执行名为name的模板，如果不存在，则在此处自动定义这个模板，并执行这个临时定义的模板。换句话说，block可以认为是设置一个默认模板。</p><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">&#123;&#123;block <span class="hljs-string">&quot;T1&quot;</span> .&#125;&#125; one &#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><p>它首先表示<code>&#123;&#123;template "T1" .&#125;&#125;</code>，也就是说先找到T1模板，如果T1存在，则执行找到的T1，如果没找到T1，则临时定义一个<code>&#123;&#123;define "T1"&#125;&#125; one &#123;&#123;end&#125;&#125;</code>，并执行它。</p><p>在此文件中指定了要执行一个名为”content”的模板，但此文件中没有使用define定义该模板，所以需要在其它文件中定义名为content的模板。现在分别在两个文件中定义两个content模板：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">define</span> <span class="hljs-string">&quot;content&quot;</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">end</span> &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>如果使用block，那么可以设置默认的content模板。例如将原本定义在blue.html中的content设置为默认模板。</p><p><a href="https://www.cnblogs.com/f-ck-need-u/p/10035768.html">模板解析原理</a></p><h4 id="（3）继承案例"><a href="#（3）继承案例" class="headerlink" title="（3）继承案例"></a>（3）继承案例</h4><p><img src="/pages_images/Gin/%E6%88%AA%E5%B1%8F2022-11-19%2021.31.18-8864689.png" alt="截屏2022-11-19 21.31.18"></p><p><strong>base.html</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">...<br><br>&#123;&#123;block &quot;title&quot; .&#125;&#125;<br>&lt;title&gt;Theme Template for Bootstrap&lt;/title&gt;<br>&#123;&#123;end&#125;&#125;  <br><br>...<br><br>&lt;div class=&quot;content&quot;&gt;<br>  &#123;&#123;block &quot;content&quot; .&#125;&#125;<br>  &#123;&#123;end&#125;&#125;<br>&lt;/div&gt;<br><br></code></pre></td></tr></table></figure><p><strong>student.html</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;&#123;template &quot;base.html&quot; .&#125;&#125;<br><br>&#123;&#123;define &quot;title&quot;&#125;&#125;<br>&lt;title&gt;学生管理&lt;/title&gt;<br>&#123;&#123;end&#125;&#125;<br><br>&#123;&#123;define &quot;content&quot;&#125;&#125;<br>&lt;h3&gt;学生管理&lt;/h3&gt;<br>&#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><p><strong>course.html</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;&#123;template &quot;base.html&quot; .&#125;&#125;<br><br>&#123;&#123;define &quot;title&quot;&#125;&#125;<br>&lt;title&gt;课程管理&lt;/title&gt;<br>&#123;&#123;end&#125;&#125;<br><br>&#123;&#123;define &quot;content&quot;&#125;&#125;<br>&lt;h3&gt;课程管理&lt;/h3&gt;<br>&#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><p><strong>class.html</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;&#123;template &quot;base.html&quot; .&#125;&#125;<br><br>&#123;&#123;define &quot;content&quot;&#125;&#125;<br>&lt;h3&gt;班级管理&lt;/h3&gt;<br>&#123;&#123;end&#125;&#125;<br><br>&#123;&#123;define &quot;title&quot;&#125;&#125;<br>&lt;title&gt;班级管理&lt;/title&gt;<br>&#123;&#123;end&#125;&#125;<br></code></pre></td></tr></table></figure><p><strong>main.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-contrib/multitemplate&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">index</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.HTML(http.StatusOK, <span class="hljs-string">&quot;index&quot;</span>, gin.H&#123;&#125;)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">student</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.HTML(http.StatusOK, <span class="hljs-string">&quot;student&quot;</span>, gin.H&#123;&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">course</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.HTML(http.StatusOK, <span class="hljs-string">&quot;course&quot;</span>, gin.H&#123;&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">class</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.HTML(http.StatusOK, <span class="hljs-string">&quot;class&quot;</span>, gin.H&#123;&#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">createMyRender</span><span class="hljs-params">()</span></span> multitemplate.Renderer &#123;<br>r := multitemplate.NewRenderer()<br>r.AddFromFiles(<span class="hljs-string">&quot;index&quot;</span>, <span class="hljs-string">&quot;templates/base.html&quot;</span>, <span class="hljs-string">&quot;templates/index.html&quot;</span>)<br>r.AddFromFiles(<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;templates/base.html&quot;</span>, <span class="hljs-string">&quot;templates/student.html&quot;</span>)<br>r.AddFromFiles(<span class="hljs-string">&quot;course&quot;</span>, <span class="hljs-string">&quot;templates/base.html&quot;</span>, <span class="hljs-string">&quot;templates/course.html&quot;</span>)<br>r.AddFromFiles(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;templates/base.html&quot;</span>, <span class="hljs-string">&quot;templates/class.html&quot;</span>)<br><br><span class="hljs-keyword">return</span> r<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>router := gin.Default()<br><span class="hljs-comment">// 返回一个html页面</span><br><span class="hljs-comment">// router.LoadHTMLGlob(&quot;templates/*&quot;)  // 继承会发生block覆盖</span><br>router.HTMLRender = createMyRender()<br>router.GET(<span class="hljs-string">&quot;/&quot;</span>, index)<br>router.GET(<span class="hljs-string">&quot;/student&quot;</span>, student)<br>router.GET(<span class="hljs-string">&quot;/course&quot;</span>, course)<br>router.GET(<span class="hljs-string">&quot;/class&quot;</span>, class)<br>router.Run() <span class="hljs-comment">// 监听并在 0.0.0.0:8080 上启动服务</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="五、Gorm"><a href="#五、Gorm" class="headerlink" title="五、Gorm"></a>五、Gorm</h1><h2 id="5-1、gorm介绍"><a href="#5-1、gorm介绍" class="headerlink" title="5.1、gorm介绍"></a>5.1、gorm介绍</h2><p><img src="/pages_images/Gin/image-20221103182526222-7471127.png" alt="image-20221103182526222"></p><p>是当今比较热门的 golang 的 orm 操作数据库的工具，使用上主要是把 struct 类和数据库表进行映射，操作数据库时无需手写 sql。本质就是提供一组函数来帮助我们快速拼接 sql 语句，尽量减少 sql 的编写。</p><p><a href="https://gorm.io/">gorm文档</a>和<a href="https://www.kancloud.cn/sliver_horn/gorm/1861152">gorm中文文档</a></p><p>安装包：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">go</span> get -u gorm.io/gorm<br><span class="hljs-keyword">go</span> get -u gorm.io/driver/mysql<br></code></pre></td></tr></table></figure><h2 id="5-2、连接数据库"><a href="#5-2、连接数据库" class="headerlink" title="5.2、连接数据库"></a>5.2、连接数据库</h2><h3 id="5-2-1、连接数据库"><a href="#5-2-1、连接数据库" class="headerlink" title="5.2.1、连接数据库"></a>5.2.1、连接数据库</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;gorm.io/driver/mysql&quot;</span><br><span class="hljs-string">&quot;gorm.io/gorm&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 参考 https://github.com/go-sql-driver/mysql#dsn-data-source-name 获取详情</span><br>dsn := <span class="hljs-string">&quot;user:pwd@tcp(127.0.0.1:3306)/database?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span><br>db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)<br>fmt.Println(db, err)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-2、配置日志连接"><a href="#5-2-2、配置日志连接" class="headerlink" title="5.2.2、配置日志连接"></a>5.2.2、配置日志连接</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;gorm.io/driver/mysql&quot;</span><br><span class="hljs-string">&quot;gorm.io/gorm&quot;</span><br><span class="hljs-string">&quot;gorm.io/gorm/logger&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 参考 https://github.com/go-sql-driver/mysql#dsn-data-source-name 获取详情</span><br>dsn := <span class="hljs-string">&quot;root:yuan0316@tcp(127.0.0.1:3306)/go10?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span><br><span class="hljs-comment">// 创建日志对象</span><br>newLogger := logger.New(<br>log.New(os.Stdout, <span class="hljs-string">&quot;\r\n&quot;</span>, log.LstdFlags), <span class="hljs-comment">// io writer</span><br>logger.Config&#123;<br><span class="hljs-comment">//SlowThreshold: time.Second,   // 慢 SQL 阈值</span><br>LogLevel: logger.Info, <span class="hljs-comment">// Log level</span><br>&#125;,<br>)<br><br>db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;<br>Logger: newLogger, <span class="hljs-comment">// 日志配置</span><br>&#125;)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;failed to connect database&quot;</span>)<br>&#125;<br>fmt.Println(db)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-3、数据库连接池"><a href="#5-2-3、数据库连接池" class="headerlink" title="5.2.3、数据库连接池"></a>5.2.3、数据库连接池</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 全局数据库 db</span><br><span class="hljs-keyword">var</span> db *gorm.DB<br><br><span class="hljs-comment">// 包初始化函数，可以用来初始化 gorm</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>  <span class="hljs-comment">// 配置 dsn</span><br><br>  <span class="hljs-comment">// err</span><br>  <span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br>  <span class="hljs-comment">// 连接 mysql 获取 db 实例</span><br>  db, err = gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)<br>  <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    <span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;连接数据库失败, error=&quot;</span> + err.Error())<br>  &#125;<br><br>  <span class="hljs-comment">// 设置数据库连接池参数</span><br>  sqlDB, _ := db.DB()<br>  <span class="hljs-comment">// 设置数据库连接池最大连接数</span><br>  sqlDB.SetMaxOpenConns(<span class="hljs-number">100</span>)<br>  <span class="hljs-comment">// 连接池最大允许的空闲连接数，如果没有sql任务需要执行的连接数大于20，超过的连接会被连接池关闭</span><br>  sqlDB.SetMaxIdleConns(<span class="hljs-number">20</span>)<br>&#125;<br><br><span class="hljs-comment">// 获取 gorm db，其他包调用此方法即可拿到 db</span><br><span class="hljs-comment">// 无需担心不同协程并发时使用这个 db 对象会公用一个连接，因为 db 在调用其方法时候会从数据库连接池获取新的连接</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetDB</span><span class="hljs-params">()</span></span> *gorm.DB &#123;<br>  <span class="hljs-keyword">return</span> db<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  <span class="hljs-comment">// 获取 db</span><br>  db := tools.GetDB()<br>  <span class="hljs-comment">// 执行数据库查询操作</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-3、数据库表操作"><a href="#5-3、数据库表操作" class="headerlink" title="5.3、数据库表操作"></a>5.3、数据库表操作</h2><h3 id="5-3-1、模型声明"><a href="#5-3-1、模型声明" class="headerlink" title="5.3.1、模型声明"></a>5.3.1、模型声明</h3><p>我们以选课系统为例子：</p><blockquote><p>学生表</p><p>老师表</p><p>班级表</p><p>课程表</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;gorm.io/driver/mysql&quot;</span><br><span class="hljs-string">&quot;gorm.io/gorm&quot;</span><br><span class="hljs-string">&quot;gorm.io/gorm/logger&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> BaseModel <span class="hljs-keyword">struct</span> &#123;<br>ID         <span class="hljs-type">int</span>       <span class="hljs-string">`gorm:&quot;primaryKey&quot;`</span><br>CreateTime *time.Time <span class="hljs-string">`gorm:&quot;autoCreateTime&quot;`</span><br>UpdateTime *time.Time <span class="hljs-string">`gorm:&quot;autoCreateTime&quot;`</span><br>Name       <span class="hljs-type">string</span>     <span class="hljs-string">`gorm:&quot;type:varchar(32);unique;not null&quot;`</span><br>&#125;<br><br><br><span class="hljs-keyword">type</span> Teacher <span class="hljs-keyword">struct</span> &#123;<br>BaseModel<br>Tno    <span class="hljs-type">int</span><br>Pwd    <span class="hljs-type">string</span> <span class="hljs-string">`gorm:&quot;type:varchar(100);not null&quot;`</span><br>Tel    <span class="hljs-type">string</span> <span class="hljs-string">`gorm:&quot;type:char(11);&quot;`</span><br>Birth  *time.Time<br>Remark <span class="hljs-type">string</span> <span class="hljs-string">`gorm:&quot;type:varchar(255);&quot;`</span><br>&#125;<br><br><br><span class="hljs-keyword">type</span> Class <span class="hljs-keyword">struct</span> &#123;<br>BaseModel<br>Num     <span class="hljs-type">int</span><br>TutorID <span class="hljs-type">int</span><br>Tutor   Teacher<br>&#125;<br><br><span class="hljs-keyword">type</span> Course <span class="hljs-keyword">struct</span> &#123;<br>BaseModel<br>Credit <span class="hljs-type">int</span><br>Period <span class="hljs-type">int</span><br><br><span class="hljs-comment">// 多对一</span><br>TeacherID <span class="hljs-type">int</span><br>Teacher   Teacher<br>&#125;<br><br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>BaseModel<br>Sno    <span class="hljs-type">int</span><br>Pwd    <span class="hljs-type">string</span> <span class="hljs-string">`gorm:&quot;type:varchar(100);not null&quot;`</span><br>Tel    <span class="hljs-type">string</span> <span class="hljs-string">`gorm:&quot;type:char(11);&quot;`</span><br>Gender <span class="hljs-type">byte</span>   <span class="hljs-string">`gorm:&quot;default:1&quot;`</span><br>Birth  *time.Time<br>Remark <span class="hljs-type">string</span> <span class="hljs-string">`gorm:&quot;type:varchar(255);&quot;`</span><br><br><span class="hljs-comment">// 多对一</span><br>ClassID <span class="hljs-type">int</span><br>Class   Class <span class="hljs-string">`gorm:&quot;foreignKey:ClassID&quot;`</span><br><span class="hljs-comment">// 多对多</span><br>Courses []Course <span class="hljs-string">`gorm:&quot;many2many:student2course;constraint:OnDelete:CASCADE;&quot;`</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>注意事项：</p><blockquote><ol><li><p>默认情况下，GORM 使用 <code>ID</code> 作为主键，使用结构体名的 <code>蛇形复数</code> 作为表名，字段名的 <code>蛇形</code> 作为列名，并使用 <code>CreatedAt</code>、<code>UpdatedAt</code> 字段追踪创建、更新时间。</p></li><li><p>单独设置表名：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(u User)</span></span> TableName() <span class="hljs-type">string</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>GORM 定义一个 <code>gorm.Model</code> 结构体，其包括字段 <code>ID</code>、<code>CreatedAt</code>、<code>UpdatedAt</code>、<code>DeletedAt</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// gorm.Model 的定义</span><br><span class="hljs-keyword">type</span> Model <span class="hljs-keyword">struct</span> &#123;<br>  ID        <span class="hljs-type">uint</span>           <span class="hljs-string">`gorm:&quot;primaryKey&quot;`</span><br>  CreatedAt time.Time<br>  UpdatedAt time.Time<br>  DeletedAt gorm.DeletedAt <span class="hljs-string">`gorm:&quot;index&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol></blockquote><h3 id="5-3-2、模型迁移"><a href="#5-3-2、模型迁移" class="headerlink" title="5.3.2、模型迁移"></a>5.3.2、模型迁移</h3> <figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>dsn := <span class="hljs-string">&quot;root:yuan0316@tcp(127.0.0.1:3306)/go10?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span><br><span class="hljs-comment">// 创建日志对象</span><br>newLogger := logger.New(<br>log.New(os.Stdout, <span class="hljs-string">&quot;\r\n&quot;</span>, log.LstdFlags), <span class="hljs-comment">// io writer</span><br>logger.Config&#123;<br><span class="hljs-comment">// SlowThreshold: time.Second,   // 慢 SQL 阈值</span><br>LogLevel: logger.Info, <span class="hljs-comment">// Log level</span><br>&#125;,<br>)<br><br>db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;<br>Logger: newLogger, <span class="hljs-comment">// 日志配置</span><br>&#125;)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;failed to connect database&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// 自动迁移</span><br>db.AutoMigrate(&amp;Teacher&#123;&#125;)<br>db.AutoMigrate(&amp;Course&#123;&#125;)<br>db.AutoMigrate(&amp;Class&#123;&#125;)<br>db.AutoMigrate(&amp;Student&#123;&#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>AutoMigrate 支持建表，如果表存在则不会再创建</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-comment">-- 建表</span><br><span class="hljs-title">db</span>.<span class="hljs-type">AutoMigrate</span>(&amp;<span class="hljs-type">Teacher</span>&#123;&#125;)<br><span class="hljs-comment">-- 建表</span><br><span class="hljs-title">db</span>.<span class="hljs-type">Migrator</span>().<span class="hljs-type">CreateTable</span>(&amp;<span class="hljs-type">Teacher</span>&#123;&#125;)<br><span class="hljs-comment">-- 建 3 表</span><br><span class="hljs-title">db</span>.<span class="hljs-type">AutoMigrate</span>(&amp;<span class="hljs-type">Teacher</span>&#123;&#125;, &amp;<span class="hljs-type">Class</span>&#123;&#125;, &amp;<span class="hljs-type">Course</span>&#123;&#125;)<br><span class="hljs-comment">-- 可以通过 Set 设置附加参数，下面设置表的存储引擎为 InnoDB</span><br><span class="hljs-title">db</span>.<span class="hljs-type">Set</span>(<span class="hljs-string">&quot;gorm:table_options&quot;</span>, <span class="hljs-string">&quot;ENGINE=InnoDB&quot;</span>).<span class="hljs-type">AutoMigrate</span>(&amp;<span class="hljs-type">Teacher</span>&#123;&#125;)<br></code></pre></td></tr></table></figure><p>检测表存在：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// 检测Teacher结构体对应的表是否存在</span><br>db.Migrator().HasTable(&amp;Teacher&#123;&#125;)<br><span class="hljs-comment">// 检测表名teachers是否存在</span><br>db.Migrator().HasTable(<span class="hljs-string">&quot;teachers&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="5-3-3、表字段操作"><a href="#5-3-3、表字段操作" class="headerlink" title="5.3.3、表字段操作"></a>5.3.3、表字段操作</h3><p>AutoMigrate不支持字段修改删除，为避免数据意外丢失.</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-comment">-- 删除 Teacher 结构体对应的表</span><br><span class="hljs-title">db</span>.<span class="hljs-type">Migrator</span>().<span class="hljs-type">DropTable</span>(&amp;<span class="hljs-type">Teacher</span>&#123;&#125;)<br><span class="hljs-comment">-- 依据表名删除表</span><br><span class="hljs-title">db</span>.<span class="hljs-type">Migrator</span>().<span class="hljs-type">DropTable</span>(<span class="hljs-string">&quot;teachers&quot;</span>)<br><span class="hljs-comment">-- 删除字段</span><br><span class="hljs-title">db</span>.<span class="hljs-type">Migrator</span>().<span class="hljs-type">DropColumn</span>(&amp;<span class="hljs-type">Teacher</span>&#123;&#125;, <span class="hljs-string">&quot;Name&quot;</span>)<br><span class="hljs-comment">-- 为字段添加索引</span><br><span class="hljs-title">db</span>.<span class="hljs-type">Migrator</span>().<span class="hljs-type">CreateIndex</span>(&amp;<span class="hljs-type">Teacher</span>&#123;&#125;, <span class="hljs-string">&quot;Name&quot;</span>)<br><span class="hljs-comment">-- 修改索引名</span><br><span class="hljs-title">db</span>.<span class="hljs-type">Migrator</span>().<span class="hljs-type">RenameIndex</span>(&amp;<span class="hljs-type">Teacher</span>&#123;&#125;, <span class="hljs-string">&quot;Name&quot;</span>, <span class="hljs-string">&quot;Name2&quot;</span>)<br><span class="hljs-comment">-- 为字段删除索引</span><br><span class="hljs-title">db</span>.<span class="hljs-type">Migrator</span>().<span class="hljs-type">DropIndex</span>(&amp;<span class="hljs-type">Teacher</span>&#123;&#125;, <span class="hljs-string">&quot;Name&quot;</span>)<br><span class="hljs-comment">-- 检查索引存在</span><br><span class="hljs-title">db</span>.<span class="hljs-type">Migrator</span>().<span class="hljs-type">HasIndex</span>(&amp;<span class="hljs-type">Teacher</span>&#123;&#125;, <span class="hljs-string">&quot;Name&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="5-4、数据库表记录操作"><a href="#5-4、数据库表记录操作" class="headerlink" title="5.4、数据库表记录操作"></a>5.4、数据库表记录操作</h2><h3 id="5-4-1、添加记录"><a href="#5-4-1、添加记录" class="headerlink" title="5.4.1、添加记录"></a>5.4.1、添加记录</h3><h4 id="（1）添加单表记录"><a href="#（1）添加单表记录" class="headerlink" title="（1）添加单表记录"></a>（1）添加单表记录</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">t1 := Teacher&#123;BaseModel: BaseModel&#123;Name: <span class="hljs-string">&quot;yuan&quot;</span>&#125;, Tno: <span class="hljs-number">1001</span>, Pwd: <span class="hljs-string">&quot;123&quot;</span>&#125;<br>db.Create(&amp;t1)<br>fmt.Println(t1.ID)<br>t2 := Teacher&#123;BaseModel: BaseModel&#123;Name: <span class="hljs-string">&quot;rain&quot;</span>&#125;, Tno: <span class="hljs-number">1002</span>, Pwd: <span class="hljs-string">&quot;234&quot;</span>&#125;<br>db.Create(&amp;t2)<br>t3 := Teacher&#123;BaseModel: BaseModel&#123;Name: <span class="hljs-string">&quot;eric&quot;</span>&#125;, Tno: <span class="hljs-number">1002</span>, Pwd: <span class="hljs-string">&quot;345&quot;</span>&#125;<br>db.Create(&amp;t3)<br></code></pre></td></tr></table></figure><p>GORM 将生成一条 SQL 语句来插入数据并<strong>回填主键值</strong></p><blockquote><p><code>db.Debug()</code> 会打印sql日志</p></blockquote><h4 id="（2）批量添加多对一关联表的记录"><a href="#（2）批量添加多对一关联表的记录" class="headerlink" title="（2）批量添加多对一关联表的记录"></a>（2）批量添加多对一关联表的记录</h4><p>要有效地插入大量记录，请将切片传递给该Create方法。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs golang">class01 := Class&#123;BaseModel: BaseModel&#123;Name: <span class="hljs-string">&quot;软件1班&quot;</span>&#125;, TutorID: <span class="hljs-number">1</span>&#125;<br>class02 := Class&#123;BaseModel: BaseModel&#123;Name: <span class="hljs-string">&quot;软件2班&quot;</span>&#125;, TutorID: <span class="hljs-number">1</span>&#125;<br>class03 := Class&#123;BaseModel: BaseModel&#123;Name: <span class="hljs-string">&quot;计算机科学与技术1班&quot;</span>&#125;, TutorID: <span class="hljs-number">2</span>&#125;<br>class04 := Class&#123;BaseModel: BaseModel&#123;Name: <span class="hljs-string">&quot;计算机科学与技术2班&quot;</span>&#125;, TutorID: <span class="hljs-number">2</span>&#125;<br>classes := []Class&#123;class01, class02, class03, class04&#125;<br>db.Create(&amp;classes)<br><br><span class="hljs-keyword">for</span> _, class := <span class="hljs-keyword">range</span> classes &#123;<br>fmt.Println(class.ID) <span class="hljs-comment">// 1,2,3</span><br>&#125;<br><br>course01 := Course&#123;BaseModel: BaseModel&#123;Name: <span class="hljs-string">&quot;计算机网络&quot;</span>&#125;, Credit: <span class="hljs-number">3</span>, Period: <span class="hljs-number">16</span>, TeacherID: <span class="hljs-number">1</span>&#125;<br>course02 := Course&#123;BaseModel: BaseModel&#123;Name: <span class="hljs-string">&quot;数据结构&quot;</span>&#125;, Credit: <span class="hljs-number">2</span>, Period: <span class="hljs-number">24</span>, TeacherID: <span class="hljs-number">1</span>&#125;<br>course03 := Course&#123;BaseModel: BaseModel&#123;Name: <span class="hljs-string">&quot;数据库&quot;</span>&#125;, Credit: <span class="hljs-number">2</span>, Period: <span class="hljs-number">16</span>, TeacherID: <span class="hljs-number">2</span>&#125;<br>course04 := Course&#123;BaseModel: BaseModel&#123;Name: <span class="hljs-string">&quot;数字电路&quot;</span>&#125;, Credit: <span class="hljs-number">3</span>, Period: <span class="hljs-number">12</span>, TeacherID: <span class="hljs-number">2</span>&#125;<br>course05 := Course&#123;BaseModel: BaseModel&#123;Name: <span class="hljs-string">&quot;模拟电路&quot;</span>&#125;, Credit: <span class="hljs-number">1</span>, Period: <span class="hljs-number">8</span>, TeacherID: <span class="hljs-number">2</span>&#125;<br>courses := []Course&#123;course01, course02, course03, course04, course05&#125;<br>db.Create(&amp;courses)<br></code></pre></td></tr></table></figure><blockquote><p>指定批量大小：db.CreateInBatches(users, 100 )</p></blockquote><h4 id="（3）添加多对多关联表的记录"><a href="#（3）添加多对多关联表的记录" class="headerlink" title="（3）添加多对多关联表的记录"></a>（3）添加多对多关联表的记录</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// 绑定课程对象切片</span><br><span class="hljs-keyword">var</span> courses []Course<br>db.Where(<span class="hljs-string">&quot;name in ?&quot;</span>, []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;数据结构&quot;</span>, <span class="hljs-string">&quot;数据库&quot;</span>&#125;).Find(&amp;courses)<br>fmt.Println(<span class="hljs-string">&quot;courses:&quot;</span>, courses)<br><br><span class="hljs-comment">// 添加学生1</span><br>s1 := Student&#123;BaseModel: BaseModel&#123;Name: <span class="hljs-string">&quot;张三&quot;</span>&#125;, Sno: <span class="hljs-number">2001</span>, Pwd: <span class="hljs-string">&quot;123&quot;</span>, ClassID: <span class="hljs-number">1</span>&#125;<br>db.Create(&amp;s1)<br><br><span class="hljs-comment">// 多对多添加方式1</span><br>s2 := Student&#123;BaseModel: BaseModel&#123;Name: <span class="hljs-string">&quot;李四&quot;</span>&#125;,<br>              Sno:     <span class="hljs-number">2002</span>,<br>              Pwd:     <span class="hljs-string">&quot;234&quot;</span>,<br>              ClassID: <span class="hljs-number">1</span>,<br>              Courses: courses,<br>             &#125;<br>db.Create(&amp;s2)<br><br><span class="hljs-comment">// 多对多添加方式2</span><br>s3 := Student&#123;BaseModel: BaseModel&#123;Name: <span class="hljs-string">&quot;王五&quot;</span>&#125;, Sno: <span class="hljs-number">2003</span>, Pwd: <span class="hljs-string">&quot;234&quot;</span>, ClassID: <span class="hljs-number">1</span>&#125;<br>db.Create(&amp;s3)<br>fmt.Println(<span class="hljs-string">&quot;s3 id:&quot;</span>, s3.ID)<br>db.Model(&amp;s3).Association(<span class="hljs-string">&quot;Courses&quot;</span>).Append(courses) <span class="hljs-comment">// 注意：Courses是多对多关联字段，不是关联表</span><br><br><span class="hljs-comment">// 先查询再操作</span><br><span class="hljs-keyword">var</span> student = Student&#123;&#125;<br>db.Where(<span class="hljs-string">&quot;name = ?&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>).First(&amp;student)<br>fmt.Println(student)<br>db.Model(&amp;student).Association(<span class="hljs-string">&quot;Courses&quot;</span>).Clear()<br><span class="hljs-keyword">var</span> courses []Course<br>db.Where(<span class="hljs-string">&quot;name in ?&quot;</span>, []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;数字电路&quot;</span>, <span class="hljs-string">&quot;模拟电路&quot;</span>&#125;).Find(&amp;courses)<br>db.Model(&amp;student).Association(<span class="hljs-string">&quot;Courses&quot;</span>).Append(courses)<br><br></code></pre></td></tr></table></figure><h3 id="5-4-2、单表查询"><a href="#5-4-2、单表查询" class="headerlink" title="5.4.2、单表查询"></a>5.4.2、单表查询</h3><p>gorm 使用链式函数来查询的。</p><h4 id="（1）-查询全部记录"><a href="#（1）-查询全部记录" class="headerlink" title="（1） 查询全部记录"></a>（1） 查询全部记录</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Find 查询多条记录，返回数组</span><br><span class="hljs-comment">// select * from students;</span><br>students := []Student&#123;&#125;  <span class="hljs-comment">// 使用Find要声明数组，如果声明一个对象（var s Student），就会将第一个对象</span><br>result := db.Find(&amp;students)<br>fmt.Println(result.RowsAffected)<br>fmt.Println(students)<br><br><span class="hljs-keyword">for</span> _, student := <span class="hljs-keyword">range</span> students &#123;<br>  fmt.Println(student.ID, student.Name, student.Sno)<br>&#125;<br><br><span class="hljs-comment">/*   </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    students := []Student&#123;&#125; </span><br><span class="hljs-comment">     </span><br><span class="hljs-comment">    (1) select * from students;</span><br><span class="hljs-comment">    5,2022-11-29 16:53:23.823,2022-11-29 16:53:23.823,张三,2001,123,&quot;&quot;,1,2022-11-15 00:00:00,&quot;&quot;,1,1</span><br><span class="hljs-comment">    6,2022-11-29 16:53:50.756,2022-11-29 16:53:50.756,李四,2002,123,&quot;&quot;,1,2022-11-10 00:00:00,&quot;&quot;,3,2</span><br><span class="hljs-comment">    7,2022-11-29 16:54:11.471,2022-11-29 16:54:11.471,王五,2003,123,&quot;&quot;,1,2022-11-18 00:00:00,&quot;&quot;,2,3</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    (2) </span><br><span class="hljs-comment">    [</span><br><span class="hljs-comment">Student&#123;</span><br><span class="hljs-comment">BaseModel：&#123;1 2022-11-03 17:59:02.188 +0800 CST 2022-11-03 17:59:02.188 +0800 CST 张三&#125;</span><br><span class="hljs-comment">Sno:   2001</span><br><span class="hljs-comment">Pwd:   123</span><br><span class="hljs-comment">Gender:   1</span><br><span class="hljs-comment">Birth: &lt;nil&gt;</span><br><span class="hljs-comment">ClassID: 1</span><br><span class="hljs-comment">Class对象:&#123;</span><br><span class="hljs-comment">                        BaseModel: &#123;0 &lt;nil&gt; &lt;nil&gt; &#125;</span><br><span class="hljs-comment">                        Num: 0</span><br><span class="hljs-comment">                        TutorID: 0</span><br><span class="hljs-comment">                        Tutor对象: &#123;&#123;0 &lt;nil&gt; &lt;nil&gt; &#125; 0 &lt;nil&gt;&#125;</span><br><span class="hljs-comment">                        students: []</span><br><span class="hljs-comment">   &#125;</span><br><span class="hljs-comment">Courses:[]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> &#125;,</span><br><span class="hljs-comment"> ...</span><br><span class="hljs-comment"> ]</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="（2）查询单条记录"><a href="#（2）查询单条记录" class="headerlink" title="（2）查询单条记录"></a>（2）查询单条记录</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs golang">student := Student&#123;&#125;<br><span class="hljs-comment">// Take 查询一条记录</span><br><span class="hljs-comment">// SELECT * FROM `user` LIMIT 1</span><br>db.Take(&amp;student)<br><br><span class="hljs-comment">// First 根据主键 id 排序后的第一条</span><br><span class="hljs-comment">// SELECT * FROM `user` ORDER BY `id` LIMIT 1</span><br>db.First(&amp;student)<br><br><span class="hljs-comment">// Last 根据主键 id 排序后最后一条</span><br><span class="hljs-comment">// SELECT * FROM `user` ORDER BY `id` DESC LIMIT 1</span><br>db.Last(&amp;student)<br><br><span class="hljs-comment">// Where 表示条件，其中写 sql 部分</span><br><span class="hljs-comment">// SELECT * FROM `user` WHERE (id = &#x27;10&#x27;) LIMIT 1</span><br>db.Where(<span class="hljs-string">&quot;id = ?&quot;</span>, <span class="hljs-number">10</span>).Take(&amp;user)<br></code></pre></td></tr></table></figure><h4 id="（3）-Where查询"><a href="#（3）-Where查询" class="headerlink" title="（3） Where查询"></a>（3） Where查询</h4><p><strong>基于string的where语句</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> student Student<br>db.Where(<span class="hljs-string">&quot;name = ?&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>).First(&amp;student)<br>fmt.Println(student)<br><br><span class="hljs-keyword">var</span> students []Student<br>db.Where(<span class="hljs-string">&quot;Sno between ? and ?&quot;</span>, <span class="hljs-number">2001</span>, <span class="hljs-number">2003</span>).Find(&amp;students)<br>fmt.Println(students)<br><br><span class="hljs-keyword">var</span> students []Student<br>db.Where(<span class="hljs-string">&quot;Sno in ?&quot;</span>, []<span class="hljs-type">int64</span>&#123;<span class="hljs-number">2001</span>, <span class="hljs-number">2003</span>&#125;).Find(&amp;students)<br>fmt.Println(students)<br><br><span class="hljs-keyword">var</span> students []Student<br>db.Where(<span class="hljs-string">&quot;name like  ?&quot;</span>, <span class="hljs-string">&quot;李%&quot;</span>).Find(&amp;students)<br>fmt.Println(students)<br><br><span class="hljs-keyword">var</span> students []Student<br>db.Where(<span class="hljs-string">&quot;create_time &gt;  ?&quot;</span>, <span class="hljs-string">&quot;2021-01-01 00:00:00&quot;</span>).Find(&amp;students)<br>fmt.Println(students)<br><br><span class="hljs-keyword">var</span> students []Student<br>db.Where(<span class="hljs-string">&quot;create_time &gt; ? AND create_time &lt; ?&quot;</span>, <span class="hljs-string">&quot;2022-01-01 00:00:00&quot;</span>, <span class="hljs-string">&quot;2022-12-31 00:00:00&quot;</span>).Find(&amp;students)<br>fmt.Println(students)<br></code></pre></td></tr></table></figure><p><strong>基于Struct &amp; Map 条件的where语句</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// Struct条件</span><br><span class="hljs-keyword">var</span> students []Student<br>db.Where(&amp;Student&#123;BaseModel: BaseModel&#123;Name: <span class="hljs-string">&quot;张三&quot;</span>&#125;, Gender: <span class="hljs-number">1</span>&#125;).Find(&amp;students)<br>fmt.Println(students)<br><br><span class="hljs-comment">// 注意: 使用结构作为条件查询时，GORM 只会查询非零值字段。例如：</span><br>db.Where(&amp;Student&#123;BaseModel: BaseModel&#123;Name: <span class="hljs-string">&quot;张三&quot;</span>&#125;, Gender: <span class="hljs-number">0</span>&#125;).Find(&amp;students)<br>fmt.Println(students)<br><span class="hljs-comment">// SELECT * FROM `students` WHERE `students`.`name` = &#x27;张三&#x27;</span><br><br><span class="hljs-comment">// Map条件</span><br>db.Where(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;Gender&quot;</span>: <span class="hljs-number">0</span>&#125;).Find(&amp;students)<br>fmt.Println(students)<br></code></pre></td></tr></table></figure><h4 id="（4）其他查询语句"><a href="#（4）其他查询语句" class="headerlink" title="（4）其他查询语句"></a>（4）其他查询语句</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-comment">-- Select语句 表示选择，其中写 sql 部分</span><br><span class="hljs-comment">-- SELECT name,sno FROM `students` WHERE id = 10 LIMIT 1</span><br><span class="hljs-title">var</span> student <span class="hljs-type">Student</span><br><span class="hljs-title">db</span>.<span class="hljs-type">Select</span>(<span class="hljs-string">&quot;name,sno&quot;</span>).<span class="hljs-type">Where</span>(<span class="hljs-string">&quot;id = ?&quot;</span>, <span class="hljs-number">10</span>).<span class="hljs-type">Take</span>(&amp;student)<br><span class="hljs-title">log</span>.<span class="hljs-type">Println</span>(student)<br><span class="hljs-title">db</span>.<span class="hljs-type">Omit</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;sno&quot;</span>).<span class="hljs-type">Find</span>(&amp;students)<br><span class="hljs-title">fmt</span>.<span class="hljs-type">Println</span>(students)<br><br><span class="hljs-comment">-- Not语句  </span><br><span class="hljs-title">var</span> students []<span class="hljs-type">Student</span><br><span class="hljs-title">db</span>.<span class="hljs-type">Not</span>(<span class="hljs-string">&quot;sno between ? and ?&quot;</span>, <span class="hljs-number">2001</span>, <span class="hljs-number">2002</span>).<span class="hljs-type">Find</span>(&amp;students) <span class="hljs-comment">--  Not语句:用法类似于Where</span><br><span class="hljs-title">fmt</span>.<span class="hljs-type">Println</span>(students)<br><br><span class="hljs-comment">-- Or语句  </span><br><span class="hljs-title">var</span> students []<span class="hljs-type">Student</span><br><span class="hljs-title">db</span>.<span class="hljs-type">Where</span>(<span class="hljs-string">&quot;sno = ?&quot;</span>, <span class="hljs-number">2001</span>).<span class="hljs-type">Or</span>(<span class="hljs-string">&quot;name like  ?&quot;</span>, <span class="hljs-string">&quot;王%&quot;</span>).<span class="hljs-type">Find</span>(&amp;students)<br><span class="hljs-title">fmt</span>.<span class="hljs-type">Println</span>(students)<br><br><span class="hljs-comment">-- Order 表示排序方式，其中写 sql 部分</span><br><span class="hljs-comment">-- SELECT * FROM `students` WHERE create_time &gt;= &#x27;2018-11-06 00:00:00&#x27; ORDER BY create_time desc,id</span><br><span class="hljs-title">var</span> students []<span class="hljs-type">Student</span><br><span class="hljs-title">db</span>.<span class="hljs-type">Where</span>(<span class="hljs-string">&quot;create_time &gt;= ?&quot;</span>, <span class="hljs-string">&quot;2018-11-06 00:00:00&quot;</span>).<span class="hljs-type">Order</span>(<span class="hljs-string">&quot;create_time desc,id&quot;</span>).<span class="hljs-type">Find</span>(&amp;students)<br><span class="hljs-title">log</span>.<span class="hljs-type">Println</span>(students)<br><br><span class="hljs-comment">-- Limit Offset 分页常用</span><br><span class="hljs-comment">--SELECT * FROM `students` ORDER BY create_time desc LIMIT 10 OFFSET 1</span><br><span class="hljs-title">var</span> students []<span class="hljs-type">Student</span><br><span class="hljs-title">db</span>.<span class="hljs-type">Order</span>(<span class="hljs-string">&quot;create_time desc&quot;</span>).<span class="hljs-type">Limit</span>(<span class="hljs-number">10</span>).<span class="hljs-type">Offset</span>(<span class="hljs-number">1</span>).<span class="hljs-type">Find</span>(&amp;students)<br><span class="hljs-title">log</span>.<span class="hljs-type">Println</span>(students)<br><br><span class="hljs-comment">-- Count 计算行数</span><br><span class="hljs-comment">-- SELECT count(*) FROM `students`</span><br><span class="hljs-title">var</span> total int64<br><span class="hljs-title">db</span>.<span class="hljs-type">Model</span>(<span class="hljs-type">Student</span>&#123;&#125;).<span class="hljs-type">Count</span>(&amp;total)<br><span class="hljs-title">fmt</span>.<span class="hljs-type">Println</span>(total)<br><br><span class="hljs-comment">-- Group Having 分组查询，其中写 sql 部分,Group 必须和 Select 一起连用</span><br><span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-type">Result</span> struct &#123;</span><br><span class="hljs-class"><span class="hljs-type">ClassID</span> <span class="hljs-title">int</span></span><br><span class="hljs-class"><span class="hljs-type">Total</span>   <span class="hljs-title">int</span></span><br><span class="hljs-class">&#125;</span><br><span class="hljs-title">var</span> results []<span class="hljs-type">Result</span><br><span class="hljs-comment">--  SELECT class_id, Count(*) as total FROM `students` GROUP BY `class_id` HAVING total&gt;1</span><br><span class="hljs-title">db</span>.<span class="hljs-type">Model</span>(<span class="hljs-type">Student</span>&#123;&#125;).<span class="hljs-type">Select</span>(<span class="hljs-string">&quot;class_id,Count(*) astotal&quot;</span>).<span class="hljs-type">Group</span>(<span class="hljs-string">&quot;class_id&quot;</span>).<span class="hljs-type">Having</span>(<span class="hljs-string">&quot;total&gt;0&quot;</span>).<span class="hljs-type">Scan</span>(&amp;results)<br><span class="hljs-title">log</span>.<span class="hljs-type">Println</span>(results)<br><br></code></pre></td></tr></table></figure><h3 id="5-4-3、删除记录"><a href="#5-4-3、删除记录" class="headerlink" title="5.4.3、删除记录"></a>5.4.3、删除记录</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 删除一条记录</span><br>student := Student&#123;BaseModel: BaseModel&#123;ID: <span class="hljs-number">3</span>&#125;&#125;<br>db.Delete(&amp;student)<br><span class="hljs-comment">// 按条件删除</span><br>db.Where(<span class="hljs-string">&quot;sno between ? and ?&quot;</span>, <span class="hljs-number">2001</span>, <span class="hljs-number">2002</span>).Delete(Student&#123;&#125;)<br><span class="hljs-comment">// 删除所有记录</span><br>db.Where(<span class="hljs-string">&quot;1 = 1&quot;</span>).Delete(&amp;Student&#123;&#125;)<br></code></pre></td></tr></table></figure><h3 id="5-4-4、更新记录"><a href="#5-4-4、更新记录" class="headerlink" title="5.4.4、更新记录"></a>5.4.4、更新记录</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Save 更新某条记录的所有字段</span><br>stu01 := Student&#123;&#125;<br>db.First(&amp;stu01)<br>stu01.Name = <span class="hljs-string">&quot;张三三&quot;</span><br>db.Save(&amp;stu01)<br><br><span class="hljs-comment">// Update 基于主键更新某条记录的单个字段</span><br>stu02 := Student&#123;BaseModel: BaseModel&#123;ID: <span class="hljs-number">1</span>&#125;&#125;<br>db.Model(&amp;stu02).Update(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>)<br><br><span class="hljs-comment">// Update 跟新所有记录的单个字段</span><br>db.Model(&amp;Student&#123;&#125;).Update(<span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-number">25</span>)<br><br><span class="hljs-comment">// Update 自定义条件而非主键记录更新某字段</span><br>db.Model(&amp;Student&#123;&#125;).Where(<span class="hljs-string">&quot;create_time &gt; ?&quot;</span>, <span class="hljs-string">&quot;2018-11-06 20:00:00&quot;</span>).Update(<span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-number">25</span>)<br><br><span class="hljs-comment">// Update 更新多个字段</span><br><span class="hljs-comment">// 通过 `struct` 更新多个字段，不会更新零值字段</span><br>db.Model(&amp;Student&#123;&#125;).Where(<span class="hljs-string">&quot;id = ?&quot;</span>, <span class="hljs-number">2</span>).Updates(Student&#123;Sno: <span class="hljs-number">2002</span>, Gender: <span class="hljs-number">0</span>&#125;)<br><span class="hljs-comment">// 通过 `map` 更新多个字段，零值字段也会更新</span><br>db.Model(&amp;Student&#123;&#125;).Where(<span class="hljs-string">&quot;id = ?&quot;</span>, <span class="hljs-number">2</span>).Updates(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<span class="hljs-string">&quot;gender&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;sno&quot;</span>: <span class="hljs-number">2002</span>&#125;)<br><br><span class="hljs-comment">// 更新表达式</span><br>Update(<span class="hljs-string">&quot;stock&quot;</span>, gorm.Expr(<span class="hljs-string">&quot;stock + 1&quot;</span>))<br>db.Model(&amp;Class&#123;&#125;).Update(<span class="hljs-string">&quot;Num&quot;</span>, gorm.Expr(<span class="hljs-string">&quot;Num+1&quot;</span>))<br>db.Model(&amp;Student&#123;&#125;).Update(<span class="hljs-string">&quot;Pwd&quot;</span>, gorm.Expr(<span class="hljs-string">&quot;Sno&quot;</span>))<br></code></pre></td></tr></table></figure><h3 id="5-4-5、关联表查询"><a href="#5-4-5、关联表查询" class="headerlink" title="5.4.5、关联表查询"></a>5.4.5、关联表查询</h3><h4 id="（1）Preload（子查询-）"><a href="#（1）Preload（子查询-）" class="headerlink" title="（1）Preload（子查询 ）"></a>（1）Preload（子查询 ）</h4><p>GORM 允许在 <code>Preload</code> 的其它 SQL 中直接加载关系</p><p><strong>案例1：查询李四的班级的名称</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 手动查询</span><br>s := Student&#123;&#125;<br>db.Where(<span class="hljs-string">&quot;name = ?&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>).Find(&amp;s)<br>fmt.Println(s)<br>class := Class&#123;&#125;<br>db.Where(<span class="hljs-string">&quot;id = ?&quot;</span>, s.ClassID).Find(&amp;class)<br>fmt.Println(class.Name)<br><br><span class="hljs-comment">// Preload 预加载</span><br>s := Student&#123;&#125;<br>db.Where(<span class="hljs-string">&quot;name = ?&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>).Preload(<span class="hljs-string">&quot;Class&quot;</span>).Find(&amp;s)<br><span class="hljs-comment">// SELECT * FROM `students` WHERE name = &#x27;李四&#x27;</span><br><span class="hljs-comment">// SELECT * FROM `classes` WHERE `classes`.`id` = 1</span><br>fmt.Println(s)<br>fmt.Println(s.Sno)<br>fmt.Println(s.Class.Name)<br>fmt.Println(s.Courses)<br></code></pre></td></tr></table></figure><p><strong>案例2：查询张三的班级和所选课程</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">s := Student&#123;&#125;<br>db.Where(<span class="hljs-string">&quot;name = ?&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>).Preload(<span class="hljs-string">&quot;Class&quot;</span>).Preload(<span class="hljs-string">&quot;Courses&quot;</span>).Find(&amp;s)<br><span class="hljs-comment">// &quot;gorm.io/gorm/clause&quot;</span><br><span class="hljs-comment">// db.Where(&quot;name = ?&quot;, &quot;lisi&quot;).Preload(clause.Associations).Find(&amp;s)</span><br><br><span class="hljs-comment">// SELECT * FROM `students` WHERE name = &#x27;李四&#x27;</span><br><span class="hljs-comment">// SELECT * FROM `classes` WHERE `classes`.`id` = 2</span><br><span class="hljs-comment">// SELECT * FROM `student2course` WHERE `student2course`.`student_id` = 11</span><br><span class="hljs-comment">// SELECT * FROM `courses` WHERE `courses`.`id` IN (2,3)</span><br>fmt.Println(s)<br>fmt.Println(s.Sno)<br>fmt.Println(s.Class.Name)<br>fmt.Println(s.Courses)<br>fmt.Println(s.Courses[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p><strong>案例3：查询软件一班所有学生【反向查询】</strong></p><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// class表添加成员变量：Students</span><br><span class="hljs-keyword">type</span> Class <span class="hljs-keyword">struct</span> &#123;<br>   BaseModel<br>   Num     <span class="hljs-type">int</span><br>   TutorID <span class="hljs-type">int</span><br>   Tutor   Teacher<br>   <span class="hljs-comment">// 一对多</span><br>   Students []Student    <span class="hljs-comment">// 反向查询字段</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs golang">class := Class&#123;&#125;<br>db.Where(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;软件1班&quot;</span>).Preload(<span class="hljs-string">&quot;Students&quot;</span>).Find(&amp;class)<br><span class="hljs-comment">// SELECT * FROM `classes` WHERE `name` = &#x27;软件1班&#x27;</span><br><span class="hljs-comment">// SELECT * FROM `students` WHERE `students`.`class_id` = 1</span><br>fmt.Println(class)<br>fmt.Println(class.Students)<br><span class="hljs-keyword">for</span> _, stu := <span class="hljs-keyword">range</span> class.Students &#123;<br>    fmt.Println(stu.ID,stu.Name)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例4：查询软件一班所有学生以及所学课程【嵌套预加载】</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">class := Class&#123;&#125;<br>db.Where(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;软件1班&quot;</span>).Preload(<span class="hljs-string">&quot;Students.Courses&quot;</span>).Find(&amp;class)<br>fmt.Println(class)<br>fmt.Println(class.Students)<br><span class="hljs-keyword">for</span> _, stu := <span class="hljs-keyword">range</span> class.Students &#123;<br>  fmt.Println(stu.ID, stu.Name, stu.Courses)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例5：哪些学生报了数据结构课程</strong></p><blockquote><p>&#x2F;&#x2F; Course表添加成员变量：Students</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">type</span> Course <span class="hljs-keyword">struct</span> &#123;<br>BaseModel<br>Credit <span class="hljs-type">int8</span><br>Period <span class="hljs-type">int8</span><br><br><span class="hljs-comment">// 多对一</span><br>TeacherID <span class="hljs-type">int</span><br>Teacher   Teacher<br><br><span class="hljs-comment">// 多对多</span><br>    Students []Student <span class="hljs-string">`gorm:&quot;many2many:student2course;&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs golang">course := Course&#123;&#125;<br>db.Where(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;数据结构&quot;</span>).Preload(<span class="hljs-string">&quot;Students&quot;</span>).Find(&amp;course)<br><span class="hljs-comment">// db.Where(&quot;name&quot;, &quot;数据结构&quot;).Preload(&quot;Students.Courses&quot;).Find(&amp;course)</span><br>fmt.Println(course)<br>fmt.Println(course.Students)<br><span class="hljs-keyword">for</span> _, stu := <span class="hljs-keyword">range</span> course.Students &#123;<br>  fmt.Println(stu.ID, stu.Name, stu.Courses)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）Joins-查询"><a href="#（2）Joins-查询" class="headerlink" title="（2）Joins 查询"></a>（2）Joins 查询</h4><p><code>Preload</code> 在一个单独查询中加载关联数据。而 <code>Join Preload</code> 会使用 inner join 加载关联数据</p><p><strong>案例1：查询李四的班级名称【一对多】</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> stu = Student&#123;&#125;<br>db.Where(<span class="hljs-string">&quot;students.name = ?&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>).Joins(<span class="hljs-string">&quot;Class&quot;</span>).Find(&amp;stu)<br>fmt.Println(stu)<br>fmt.Println(stu.Class.Name)<br></code></pre></td></tr></table></figure><p><strong>案例2：查询李四的所选课程【多对多】</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go">stu := Student&#123;BaseModel: BaseModel&#123;ID: <span class="hljs-number">2</span>&#125;&#125;<br><span class="hljs-keyword">var</span> courses []Course<br>db.Model(&amp;stu).Association(<span class="hljs-string">&quot;Courses&quot;</span>).Find(&amp;courses)<br>fmt.Println(courses)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   SELECT `courses`.`id`,`courses`.`create_time`,`courses`.`update_time`,`courses`.`name`,`courses`.`credit`,`courses`.`period`,`courses`.`teacher_id`</span><br><span class="hljs-comment">   FROM `courses` JOIN `student2course`</span><br><span class="hljs-comment">   ON `student2course`.`course_id` = `courses`.`id`</span><br><span class="hljs-comment">   AND `student2course`.`student_id` = 2</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//db.Model() 中必须是ID筛选</span><br></code></pre></td></tr></table></figure><h2 id="5-5、章节作业"><a href="#5-5、章节作业" class="headerlink" title="5.5、章节作业"></a>5.5、章节作业</h2><p>学生选课系统</p><p><img src="/pages_images/Gin/%E6%88%AA%E5%B1%8F2022-11-19%2018.44.41-8854690.png" alt="截屏2022-11-19 18.44.41"></p><p><img src="/pages_images/Gin/%E6%88%AA%E5%B1%8F2022-11-19%2018.43.49.png" alt="截屏2022-11-19 18.43.49"></p><h1 id="七、进阶课程"><a href="#七、进阶课程" class="headerlink" title="七、进阶课程"></a>七、进阶课程</h1><h2 id="7-1、会话技术"><a href="#7-1、会话技术" class="headerlink" title="7.1、会话技术"></a>7.1、会话技术</h2><p>大家在学习 HTTP 超文本传输协议的时候，就已经知道 HTTP 是一种无状态的传输协议，对于事务处理没有记忆能力。对于客户端浏览器发出的请求，Web 服务器无法区分是不是源自于同一个浏览器。所以，这时就需要额外的数据用于维持会话。</p><h3 id="7-1-1、Cookie"><a href="#7-1-1、Cookie" class="headerlink" title="7.1.1、Cookie"></a>7.1.1、Cookie</h3><h4 id="1-Cookie是什么"><a href="#1-Cookie是什么" class="headerlink" title="1. Cookie是什么"></a><strong>1.</strong> Cookie是什么</h4><blockquote><ol><li><p>HTTP是无状态协议，服务器不能记录浏览器的访问状态，也就是说服务器不能区分两次请求是否由同一个客户端发出</p></li><li><p>Cookie就是解决HTTP协议无状态的方案之一，中文是小甜饼的意思</p></li><li><p>Cookie实际上就是服务器保存在浏览器上的一段信息。浏览器有了Cookie之后，每次向服务器发送请求时都会同时将该信息发送给服务器，服务器收到请求后，就可以根据该信息处理请求</p></li><li><p>Cookie由服务器创建，并发送给浏览器，最终由浏览器保存</p></li></ol></blockquote><h4 id="2-读写Cookie"><a href="#2-读写Cookie" class="headerlink" title="2. 读写Cookie"></a><strong>2.</strong> 读写Cookie</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 设置Cookie</span><br>c.SetCookie(<span class="hljs-string">&quot;xxx&quot;</span>,<span class="hljs-string">&quot;yyy&quot;</span>)<br><span class="hljs-comment">// 获取Cookie</span><br>c.Cookie(<span class="hljs-string">&quot;xxx&quot;</span>)   <span class="hljs-comment">// &quot;yyy&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/pages_images/Gin/image-20210829101115420.png" alt="image-20210829101115420"></p><h4 id="（1）登录案例"><a href="#（1）登录案例" class="headerlink" title="（1）登录案例"></a>（1）登录案例</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">index</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><br>isLogin, _ := c.Cookie(<span class="hljs-string">&quot;isLogin&quot;</span>)<br><br><span class="hljs-keyword">if</span> isLogin == <span class="hljs-string">&quot;true&quot;</span> &#123;<br>user, _ := c.Cookie(<span class="hljs-string">&quot;username&quot;</span>)<br>c.HTML(http.StatusOK, <span class="hljs-string">&quot;index.html&quot;</span>, gin.H&#123;<br><span class="hljs-string">&quot;username&quot;</span>:user,<br>&#125;)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>c.Redirect(<span class="hljs-number">302</span>, <span class="hljs-string">&quot;/login&quot;</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">login</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><span class="hljs-keyword">if</span> c.Request.Method == <span class="hljs-string">&quot;GET&quot;</span> &#123;<br>c.HTML(http.StatusOK, <span class="hljs-string">&quot;login.html&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>user := c.PostForm(<span class="hljs-string">&quot;user&quot;</span>)<br>pwd := c.PostForm(<span class="hljs-string">&quot;pwd&quot;</span>)<br><span class="hljs-keyword">if</span> user == <span class="hljs-string">&quot;yuan&quot;</span> &amp;&amp; pwd == <span class="hljs-string">&quot;123&quot;</span> &#123;<br><span class="hljs-comment">// 给客户端设置cookie</span><br><span class="hljs-comment">// maxAge int, 单位 s</span><br><span class="hljs-comment">// path cookie  所在目录</span><br><span class="hljs-comment">// domain string  域名</span><br><span class="hljs-comment">// secure  是否只能通过https访问</span><br><span class="hljs-comment">// httponly bool  是否允许别人通过js获取自己的cookie</span><br>c.SetCookie(<span class="hljs-string">&quot;isLogin&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>, <span class="hljs-number">2000000</span>, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)<br>c.SetCookie(<span class="hljs-string">&quot;username&quot;</span>, user, <span class="hljs-number">20000000</span>, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)<br><span class="hljs-comment">//c.Redirect(302, &quot;/index&quot;)</span><br>c.Redirect(<span class="hljs-number">302</span>, <span class="hljs-string">&quot;/index&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>c.Redirect(<span class="hljs-number">302</span>, <span class="hljs-string">&quot;/login&quot;</span>)<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><span class="hljs-comment">// 返回一个html页面</span><br>r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/*&quot;</span>)<br>r.Any(<span class="hljs-string">&quot;/login&quot;</span>, login)<br>r.GET(<span class="hljs-string">&quot;/index&quot;</span>, index)<br>r.Run() <span class="hljs-comment">// 监听并在 0.0.0.0:8080 上启动服务</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="（2）最后访问时间案例"><a href="#（2）最后访问时间案例" class="headerlink" title="（2）最后访问时间案例"></a>（2）最后访问时间案例</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">index</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><br><span class="hljs-comment">// 获取cookie</span><br>lastVist, _ := c.Cookie(<span class="hljs-string">&quot;lastVist&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;lastVist&quot;</span>,lastVist)<br><br><span class="hljs-comment">// 设置cookie</span><br>now := time.Now().String()[:<span class="hljs-number">19</span>]<br>c.SetCookie(<span class="hljs-string">&quot;lastVist&quot;</span>, now, <span class="hljs-number">100</span>, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)<br><br>c.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;index.html&quot;</span>, gin.H&#123;<br><span class="hljs-string">&quot;lastVist&quot;</span>: lastVist,<br>&#125;)<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><span class="hljs-comment">// 返回一个html页面</span><br>r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/*&quot;</span>)<br>r.GET(<span class="hljs-string">&quot;/index&quot;</span>, index)<br>r.Run() <span class="hljs-comment">// 监听并在 0.0.0.0:8080 上启动服务</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="7-1-2、session"><a href="#7-1-2、session" class="headerlink" title="7.1.2、session"></a>7.1.2、session</h3><p>gin框架在处理session时有专门的中间件，我们可以直接使用。</p><p>中间件： <code>github.com/gin-contrib/sessions</code> ， 我们直接安装依赖： <code>go get github.com/gin-contrib/sessions</code> 即可引入使用</p><p>我们参考官网案例：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>        <span class="hljs-comment">// 导入session包</span><br><span class="hljs-string">&quot;github.com/gin-contrib/sessions&quot;</span><br>       <span class="hljs-comment">// 导入session存储引擎</span><br><span class="hljs-string">&quot;github.com/gin-contrib/sessions/cookie&quot;</span><br>        <span class="hljs-comment">// 导入gin框架包</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br><br>        <span class="hljs-comment">// 创建基于cookie的存储引擎，yuan 参数是用于加密的密钥，可以随便填写</span><br>store := cookie.NewStore([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;yuan&quot;</span>))<br><br>        <span class="hljs-comment">// 设置session中间件，参数mysession，指的是session的名字，也是cookie的名字</span><br>       <span class="hljs-comment">// store是前面创建的存储引擎</span><br>r.Use(sessions.Sessions(<span class="hljs-string">&quot;mysession&quot;</span>, store))<br><br>r.GET(<span class="hljs-string">&quot;/test&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>                <span class="hljs-comment">// 初始化session对象</span><br>session := sessions.Default(c)<br>                <br>                <span class="hljs-comment">// 通过session.Get读取session值</span><br>                <span class="hljs-comment">// session是键值对格式数据，因此需要通过key查询数据</span><br><br><span class="hljs-keyword">if</span> session.Get(<span class="hljs-string">&quot;hello&quot;</span>) != <span class="hljs-string">&quot;world&quot;</span> &#123;<br>                        <span class="hljs-comment">// 设置session数据,()</span><br>                  session.Set(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>)<br>                        <span class="hljs-comment">// 删除session数据</span><br>                        session.Delete(<span class="hljs-string">&quot;tizi365&quot;</span>)<br>                        <span class="hljs-comment">// 删除整个session</span><br>                        session.Clear()<br>                        <span class="hljs-comment">// 保存session数据</span><br>                   session.Save()<br>&#125;<br>                <br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<span class="hljs-string">&quot;hello&quot;</span>: session.Get(<span class="hljs-string">&quot;hello&quot;</span>)&#125;)<br>&#125;)<br>r.Run(<span class="hljs-string">&quot;:8000&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>使用sessions 中间件注意要点：</strong></p><blockquote><ol><li>session 仓库其实就是一个 map[interface]interface 对象，所有 session可以存储任意数据</li><li>session 使用的编解码器是自带的gob，所以存储类似： struct、map 这些对象时需要先注册对象，不然会报错 <code>gob: type not registered for...</code></li><li>session 存储引擎支持： cookie、内存、mongodb、redis、postgres、memstore、memcached 以及 gorm 支持的各类数据库（mysql、sqlite）</li><li>session 在创建时有一个配置项，可以配置session过期时间、cookie、domain、secure、path等参数</li><li><strong>调用 session 方法： Set()、 Delete()、 Clear()、方法后，必须调用一次 Save() 方法。否则session数据不会更新</strong></li></ol></blockquote><p><strong>gob注册案例</strong></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-type">User</span> struct&#123;</span><br><span class="hljs-class">  <span class="hljs-type">Name</span> <span class="hljs-title">string</span></span><br><span class="hljs-class">&#125;</span><br><br><span class="hljs-title">gob</span>.<span class="hljs-type">Register</span>(<span class="hljs-type">User</span>&#123;&#125;)<br></code></pre></td></tr></table></figure><p><strong>session配置项案例</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//</span> <span class="hljs-string">store</span> <span class="hljs-string">就是前面创建的存储引擎</span><br><span class="hljs-string">store.Options(sessions.Options&#123;</span><br><span class="hljs-attr">Secure:</span>   <span class="hljs-literal">true</span><span class="hljs-string">,</span><br><span class="hljs-attr">SameSite:</span> <span class="hljs-number">4</span><span class="hljs-string">,</span><br><span class="hljs-attr">Path:</span>     <span class="hljs-string">&quot;/&quot;</span><span class="hljs-string">,</span><br><span class="hljs-attr">MaxAge:</span>   <span class="hljs-string">m.MaxAge,</span><br><span class="hljs-string">&#125;)</span><br></code></pre></td></tr></table></figure><p>Cookie和Session的区别</p><blockquote><ul><li>Session存储数据在服务器端，Cookie在客户端</li><li>Session没有数据大小限制，Cookie有</li><li>Session数据更安全</li></ul></blockquote><h3 id="7-1-3、基于session的登录验证"><a href="#7-1-3、基于session的登录验证" class="headerlink" title="7.1.3、基于session的登录验证"></a>7.1.3、基于session的登录验证</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LoginHtml</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>context.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;login.html&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Login</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 获取登陆信息</span><br><span class="hljs-comment">//roleId := context.PostForm(&quot;role_id&quot;)</span><br>account := context.PostForm(<span class="hljs-string">&quot;user&quot;</span>)<br>pwd := context.PostForm(<span class="hljs-string">&quot;pwd&quot;</span>)<br><span class="hljs-comment">// 数据库查询</span><br><span class="hljs-keyword">var</span> user User<br>DB.Where(<span class="hljs-string">&quot;account = ? and pwd = ?&quot;</span>, account, pwd).Find(&amp;user)<br><br><span class="hljs-keyword">if</span> user.ID != <span class="hljs-number">0</span> &#123;<br>userId := strconv.Itoa(user.ID)<br><span class="hljs-comment">//  登录成功</span><br><span class="hljs-comment">// 初始化session对象</span><br>session := sessions.Default(context)<br><span class="hljs-comment">// 设置session数据,()</span><br>session.Set(<span class="hljs-string">&quot;user_id&quot;</span>, userId)<br>session.Save()<br><br>context.Redirect(http.StatusMovedPermanently, <span class="hljs-string">&quot;/&quot;</span>)<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 登录失败</span><br>context.HTML(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;login.html&quot;</span>, gin.H&#123;<br><span class="hljs-string">&quot;err&quot;</span>: <span class="hljs-string">&quot;用户名或者密码错误&quot;</span>,<br>&#125;)<br><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Logout</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br><br><span class="hljs-comment">// 初始化session对象</span><br>session := sessions.Default(context)<br><span class="hljs-comment">// 设置session数据,()</span><br>session.Delete(<span class="hljs-string">&quot;user_id&quot;</span>)<br><br>context.Redirect(http.StatusMovedPermanently, <span class="hljs-string">&quot;/login&quot;</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="7-2、中间件"><a href="#7-2、中间件" class="headerlink" title="7.2、中间件"></a>7.2、中间件</h2><h3 id="7-2-1、中间件语法"><a href="#7-2-1、中间件语法" class="headerlink" title="7.2.1、中间件语法"></a>7.2.1、中间件语法</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>  <span class="hljs-comment">// 默认使用了2个中间件Logger(), Recovery()</span><br>app := gin.Default()<br><span class="hljs-comment">// 全局注册中间件</span><br>app.Use(M1())<br>app.Use(M2())<br>app.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Hello yuan&quot;</span>)<br>context.Writer.WriteString(<span class="hljs-string">&quot;Hello World&quot;</span>)<br>&#125;)<br>app.Run()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">M1</span><span class="hljs-params">()</span></span> gin.HandlerFunc &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 路由处理前执行</span><br>fmt.Printf(<span class="hljs-string">&quot;M1视图函数前执行\n&quot;</span>)<br><span class="hljs-comment">// context.Abort()</span><br>context.Next()<br><span class="hljs-comment">// 路由处理后执行</span><br>fmt.Printf(<span class="hljs-string">&quot;M1视图函数后执行\n&quot;</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">M2</span><span class="hljs-params">()</span></span> gin.HandlerFunc &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br><span class="hljs-comment">// 路由处理前执行</span><br>fmt.Printf(<span class="hljs-string">&quot;M2视图函数前执行\n&quot;</span>)<br>context.Next()<br><span class="hljs-comment">// 路由处理后执行</span><br>fmt.Printf(<span class="hljs-string">&quot;M2视图函数后执行\n&quot;</span>)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="7-2-2、中间件应用一：CORS"><a href="#7-2-2、中间件应用一：CORS" class="headerlink" title="7.2.2、中间件应用一：CORS"></a>7.2.2、中间件应用一：CORS</h3><p><code>gin.Default()</code>默认使用了<code>Logger</code>和<code>Recovery</code>中间件，其中：</p><ul><li><code>Logger</code>中间件将日志写入<code>gin.DefaultWriter</code>，即使配置了<code>GIN_MODE=release</code>。</li><li><code>Recovery</code>中间件会recover任何<code>panic</code>。如果有panic的话，会写入500响应码。</li></ul><p>如果不想使用上面两个默认的中间件，可以使用<code>gin.New()</code>新建一个没有任何默认中间件的路由。</p><p>注意：当在中间件或<code>handler</code>中启动新的<code>goroutine</code>时，<strong>不能使用</strong>原始的上下文（c *gin.Context），必须使用其只读副本（<code>c.Copy()</code>）。</p><p><strong>跨域配置中间件</strong></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// 定义全局的CORS中间件</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Cors</span><span class="hljs-params">()</span></span> gin.HandlerFunc &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        c.Writer.Header().Add(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>)<br>        c.Next()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>跨域配置中间件（高级请求配置）</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>method := c.Request.Method<br>origin := c.GetHeader(<span class="hljs-string">&quot;Origin&quot;</span>)<br>c.Header(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, origin) <span class="hljs-comment">// 注意这一行，不能配置为通配符“*”号</span><br>c.Header(<span class="hljs-string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>) <span class="hljs-comment">// 注意这一行，必须设定为 true</span><br>c.Header(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="hljs-string">&quot;Access-Control-Allow-Headers,Cookie, Origin, X-Requested-With, Content-Type, Accept, Authorization, Token, Timestamp, UserId&quot;</span>) <span class="hljs-comment">// 我们自定义的header字段都需要在这里声明</span><br>c.Header(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;POST, GET, OPTIONS,DELETE,PUT&quot;</span>)<br>c.Header(<span class="hljs-string">&quot;Access-Control-Expose-Headers&quot;</span>, <span class="hljs-string">&quot;Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type,cache-control&quot;</span>)<br><br><span class="hljs-comment">// 放行所有OPTIONS方法</span><br><span class="hljs-keyword">if</span> method == <span class="hljs-string">&quot;OPTIONS&quot;</span> &#123;<br><span class="hljs-comment">//c.AbortWithStatus(http.StatusNoContent)</span><br>c.AbortWithStatus(http.StatusOK)<br>&#125;<br><span class="hljs-comment">// 处理请求</span><br>c.Next()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-2-3、中间件应用二：权限访问控制"><a href="#7-2-3、中间件应用二：权限访问控制" class="headerlink" title="7.2.3、中间件应用二：权限访问控制"></a>7.2.3、中间件应用二：权限访问控制</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> model<br><br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>ID      <span class="hljs-type">int</span>    <span class="hljs-string">`gorm:&quot;primaryKey&quot;`</span><br>Account <span class="hljs-type">string</span> <span class="hljs-comment">// 账号</span><br>Pwd     <span class="hljs-type">string</span> <span class="hljs-string">`gorm:&quot;type:varchar(100);not null&quot;`</span><br><br><span class="hljs-comment">// 多对一</span><br>RoleID <span class="hljs-type">int</span><br>Role   Role<br>&#125;<br><br><span class="hljs-keyword">type</span> Role <span class="hljs-keyword">struct</span> &#123;<br>BaseModel<br>Permissions []Permission <span class="hljs-string">`gorm:&quot;many2many:role2permission;constraint:OnDelete:CASCADE;&quot;`</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Permission <span class="hljs-keyword">struct</span> &#123;<br>BaseModel<br>Url <span class="hljs-type">string</span> <span class="hljs-string">`gorm:&quot;not null;&quot;`</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>权限访问控制中间件：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> middlewares<br><br><span class="hljs-keyword">import</span> (<br>. <span class="hljs-string">&quot;css/database&quot;</span><br>. <span class="hljs-string">&quot;css/model&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/gin-contrib/sessions&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;gorm.io/gorm/clause&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;regexp&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PermissionMD</span><span class="hljs-params">()</span></span> gin.HandlerFunc &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br><br><span class="hljs-comment">// 1. 获取请求路径</span><br>path := context.Request.URL.Path<br>fmt.Println(<span class="hljs-string">&quot;path:::&quot;</span>, path)<br><span class="hljs-comment">// 2. 校验路径是否在白名单</span><br>validUrlSlice := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;/login&quot;</span>, <span class="hljs-string">&quot;/reg&quot;</span>, <span class="hljs-string">&quot;^/static/.*&quot;</span>, <span class="hljs-string">&quot;/logout&quot;</span>&#125;<br><span class="hljs-keyword">for</span> _, validUrl := <span class="hljs-keyword">range</span> validUrlSlice &#123;<br><span class="hljs-comment">// 自由路径</span><br>re := regexp.MustCompile(validUrl)<br>ret := re.FindAllStringSubmatch(path, <span class="hljs-number">-1</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ret) != <span class="hljs-number">0</span> &#123;<br>context.Next()<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><span class="hljs-comment">// 3. 校验是否登录成功</span><br><span class="hljs-comment">// 初始化session对象</span><br>session := sessions.Default(context)<br>userID := session.Get(<span class="hljs-string">&quot;user_id&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;userID::::::&quot;</span>, userID)<br><span class="hljs-keyword">if</span> userID == <span class="hljs-literal">nil</span> &#123;<br>context.Redirect(http.StatusMovedPermanently, <span class="hljs-string">&quot;/login&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 4. 判断登录用户是否拥有该路径权限</span><br><br><span class="hljs-keyword">var</span> user User<br>DB.Where(<span class="hljs-string">&quot;ID = ?&quot;</span>, userID).Preload(<span class="hljs-string">&quot;Role.Permissions&quot;</span>).Find(&amp;user)<br>fmt.Println(<span class="hljs-string">&quot;user permissions:&quot;</span>, user.Role.Permissions)<br><br><span class="hljs-keyword">if</span> user.RoleID == <span class="hljs-number">1</span> || user.RoleID == <span class="hljs-number">2</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;in student role......&quot;</span>)<br><span class="hljs-comment">// 登录人是学生</span><br><span class="hljs-comment">// 当前登陆学生的学号</span><br><span class="hljs-keyword">var</span> student Student<br>DB.Where(<span class="hljs-string">&quot;user_id = ?&quot;</span>, user.ID).Preload(clause.Associations).Find(&amp;student)<br>snoStr := strconv.Itoa(student.Sno)<br><span class="hljs-comment">// 权限匹配</span><br><span class="hljs-keyword">for</span> _, permission := <span class="hljs-keyword">range</span> user.Role.Permissions &#123;<br>permissionUrlReg := strings.Replace(permission.Url, <span class="hljs-string">&quot;\\d+&quot;</span>, snoStr, <span class="hljs-number">-1</span>)<br>fmt.Println(<span class="hljs-string">&quot;permissionUrlReg&quot;</span>, permissionUrlReg, path)<br><br>re := regexp.MustCompile(<span class="hljs-string">&quot;^&quot;</span> + permissionUrlReg + <span class="hljs-string">&quot;$&quot;</span>)<br>results := re.FindAllStringSubmatch(path, <span class="hljs-number">-1</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(results) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// 拥有该路径权限并放行</span><br>context.Keys[<span class="hljs-string">&quot;loginUser&quot;</span>] = student<br>context.Next()<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;in admin role......&quot;</span>)<br><span class="hljs-comment">// 登录人为管理员admin</span><br><span class="hljs-keyword">var</span> admin Admin<br>DB.Where(<span class="hljs-string">&quot;user_id = ?&quot;</span>, user.ID).Preload(clause.Associations).Find(&amp;admin)<br><span class="hljs-comment">// 正则匹配成功即可</span><br><span class="hljs-keyword">for</span> _, permission := <span class="hljs-keyword">range</span> user.Role.Permissions &#123;<br>re := regexp.MustCompile(<span class="hljs-string">&quot;^&quot;</span> + permission.Url + <span class="hljs-string">&quot;$&quot;</span>)<br>results := re.FindAllStringSubmatch(path, <span class="hljs-number">-1</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(results) != <span class="hljs-number">0</span> &#123;<br>context.Keys[<span class="hljs-string">&quot;loginUser&quot;</span>] = admin<br>context.Next()<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><br>&#125;<br><br>context.String(http.StatusForbidden, <span class="hljs-string">&quot;Forbidden!!!&quot;</span>)<br>context.Abort()<br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="八、前后端分离"><a href="#八、前后端分离" class="headerlink" title="八、前后端分离"></a>八、前后端分离</h1><h2 id="8-1、web应用模式"><a href="#8-1、web应用模式" class="headerlink" title="8.1、web应用模式"></a>8.1、web应用模式</h2><p>在开发Web应用中，有两种应用模式：</p><ol><li>前后端不分离[客户端看到的内容和所有界面效果都是由服务端提供出来的。]</li></ol><p><img src="/pages_images/Gin/depended_frontend_backend.png" alt="前后端不分离"></p><ol start="2"><li>前后端分离【把前端的界面效果(html，css，js分离到另一个服务端，python服务端只需要返回数据即可)】</li></ol><p>前端形成一个独立的网站，服务端构成一个独立的网站</p><p><img src="/pages_images/Gin/indepent_frontend_backend-16318493319127.png" alt="前后端分离"></p><p>应用程序编程接口（Application Programming Interface，API接口），就是应用程序对外提供了一个操作数据的入口，这个入口可以是一个函数或类方法，也可以是一个url地址或者一个网络地址。当客户端调用这个入口，应用程序则会执行对应代码操作，给客户端完成相对应的功能。</p><h2 id="8-2、restful-api规范"><a href="#8-2、restful-api规范" class="headerlink" title="8.2、restful api规范"></a>8.2、restful api规范</h2><p>当然，api接口在工作中是比较常见的开发内容，有时候，我们会调用其他人编写的api接口，有时候，我们也需要提供api接口给其他人操作。由此就会带来一个问题，api接口往往都是一个函数、类方法、或者url或其他网络地址，不断是哪一种，当api接口编写过程中，我们都要考虑一个问题就是这个接口应该怎么编写？接口怎么写的更加容易维护和清晰，这就需要大家在调用或者编写api接口的时候要有一个明确的编写规范！！！</p><p>为了在团队内部形成共识、防止个人习惯差异引起的混乱，我们都需要找到一种大家都觉得很好的接口实现规范，而且这种规范能够让后端写的接口，用途一目了然，减少客户端和服务端双方之间的合作成本。</p><p>目前市面上大部分公司开发人员使用的接口实现规范主要有：restful、RPC。</p><p>REST全称是Representational State Transfer，中文意思是表述（编者注：通常译为表征）性状态转移。 它首次出现在2000年Roy Fielding的博士论文中。</p><p>RESTful是一种专门为Web 开发而定义API接口的设计风格，尤其适用于前后端分离的应用模式中。</p><p>关键：<strong>面向资源开发</strong></p><p>这种风格的理念认为后端开发任务就是提供数据的，对外提供的是数据资源的访问接口，所以在定义接口时，客户端访问的URL路径就表示这种要操作的数据资源。</p><p>而对于数据资源分别使用POST、DELETE、GET、UPDATE等请求动作来表达对数据的增删查改。</p><table><thead><tr><th align="left">请求方法</th><th align="left">请求地址</th><th align="left">后端操作</th></tr></thead><tbody><tr><td align="left">POST</td><td align="left">&#x2F;student&#x2F;</td><td align="left">增加学生</td></tr><tr><td align="left">GET</td><td align="left">&#x2F;student&#x2F;</td><td align="left">获取所有学生</td></tr><tr><td align="left">GET</td><td align="left">&#x2F;student&#x2F;1</td><td align="left">获取id为1的学生</td></tr><tr><td align="left">PUT</td><td align="left">&#x2F;student&#x2F;1</td><td align="left">修改id为1的学生</td></tr><tr><td align="left">DELETE</td><td align="left">&#x2F;student&#x2F;1</td><td align="left">删除id为1的学生</td></tr></tbody></table><p>restful规范是一种通用的规范，不限制语言和开发框架的使用。事实上，我们可以使用任何一门语言，任何一个框架都可以实现符合restful规范的API接口。</p><h2 id="8-3、Ajax方法"><a href="#8-3、Ajax方法" class="headerlink" title="8.3、Ajax方法"></a>8.3、Ajax方法</h2><p>客户端（浏览器）向服务端发起请求的形式：</p><blockquote><ol><li>地址栏：GET</li><li>超链接标签：GET</li><li>form表单：GET或POST</li><li>Ajax（重要）：GET或POST或PUT或DELETE</li></ol></blockquote><p>AJAX（Asynchronous Javascript And XML）翻译成中文就是“异步Javascript和XML”。即使用Javascript语言与服务器进行异步交互，传输的数据为XML（当然，传输的数据不只是XML,现在更多使用json数据）。</p><p>AJAX的特点和优点：</p><ul><li>异步</li><li>局部刷新</li></ul><p>应用：</p><p><img src="http://www.yuan316.com/post/Django3.2%E6%A1%86%E6%9E%B6//pages_images/Gin/image-20210812104733820.png" alt="image-20210812104733820"></p><h2 id="8-4、选课系统【前后端分离版本】"><a href="#8-4、选课系统【前后端分离版本】" class="headerlink" title="8.4、选课系统【前后端分离版本】"></a>8.4、选课系统【前后端分离版本】</h2>]]></content>
    
    
    <categories>
      
      <category>Go开发之路</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/01/01/hello-world/"/>
    <url>/2024/01/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>走进Docker的世界</title>
    <link href="/2024/01/01/Docker/"/>
    <url>/2024/01/01/Docker/</url>
    
    <content type="html"><![CDATA[<h3 id="走进Docker的世界"><a href="#走进Docker的世界" class="headerlink" title="走进Docker的世界"></a>走进Docker的世界</h3><p>介绍docker的前世今生，了解docker的实现原理，以Django项目为例，带大家如何编写最佳的Dockerfile构建镜像。通过本章的学习，大家会知道docker的概念及基本操作，并学会构建自己的业务镜像，并通过抓包的方式掌握Docker最常用的bridge网络模式的通信。</p><h4 id="认识docker"><a href="#认识docker" class="headerlink" title="认识docker"></a>认识docker</h4><h6 id="怎么出现的"><a href="#怎么出现的" class="headerlink" title="怎么出现的"></a>怎么出现的</h6><ul><li><p>提供轻量、高效的虚拟化能力</p><p>Docker 公司位于旧金山,原名dotCloud，底层利用了Linux容器技术（LXC）（在操作系统中实现资源隔离与限制）。为了方便创建和管理这些容器，dotCloud 开发了一套内部工具，之后被命名为“Docker”。Docker就是这样诞生的。</p><p>（思考为啥要用Linux容器技术？）</p><p><img src="/pages_images/Docker/docker-differents.svg"></p></li></ul><p>Hypervisor： 一种运行在基础物理服务器和操作系统之间的中间软件层，可允许多个操作系统和应用共享硬件 。常见的VMware的 Workstation 、ESXi、微软的Hyper-V或者思杰的XenServer。</p><p>Container Runtime：通过Linux内核虚拟化能力管理多个容器，多个容器共享一套操作系统内核。因此摘掉了内核占用的空间及运行所需要的耗时，使得容器极其轻量与快速。</p><ul><li><p>软件交付过程中的环境依赖</p><p><img src="/pages_images/Docker/why1.png"></p></li></ul><h6 id="几个知识点"><a href="#几个知识点" class="headerlink" title="几个知识点"></a>几个知识点</h6><ul><li><p>可以把应用程序代码及运行依赖环境打包成镜像，作为交付介质，在各环境部署</p></li><li><p>可以将镜像（image）启动成为容器(container)，并且提供多容器的生命周期进行管理（启、停、删）</p></li><li><p>container容器之间相互隔离，且每个容器可以设置资源限额</p></li><li><p>提供轻量级虚拟化功能，容器就是在宿主机中的一个个的虚拟的空间，彼此相互隔离，完全独立</p></li><li><p>CS架构的软件产品</p><p><img src="/pages_images/Docker/docker-engine.png"></p></li></ul><h6 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h6><ul><li>Docker 引擎主要有两个版本：企业版（EE）和社区版（CE）</li><li>每个季度(1-3,4-6,7-9,10-12)，企业版和社区版都会发布一个稳定版本(Stable)。社区版本会提供 4 个月的支持，而企业版本会提供 12 个月的支持</li><li>每个月社区版还会通过 Edge 方式发布月度版</li><li>从 2017 年第一季度开始，Docker 版本号遵循 YY.MM-xx 格式，类似于 Ubuntu 等项目。例如，2018 年 6 月第一次发布的社区版本为 18.06.0-ce</li></ul><p><img src="/pages_images/Docker/docker-version.png"></p><h6 id="发展史"><a href="#发展史" class="headerlink" title="发展史"></a>发展史</h6><p>13年成立，15年开始，迎来了飞速发展。</p><p><img src="/pages_images/Docker/deplpment.png"></p><p>Docker 1.8之前，使用<a href="https://linuxcontainers.org/fr/lxc/introduction/">LXC</a>，Docker在上层做了封装， 把LXC复杂的容器创建与使用方式简化为自己的一套命令体系。 </p><p>之后，为了实现跨平台等复杂的场景，Docker抽出了libcontainer项目，把对namespace、cgroup的操作封装在libcontainer项目里，支持不同的平台类型。</p><p>2015年6月，Docker牵头成立了 OCI（Open Container Initiative开放容器计划）组织，这个组织的目的是建立起一个围绕容器的通用标准 。 容器格式标准是一种不受上层结构绑定的协议，即不限于某种特定操作系统、硬件、CPU架构、公有云等 ， 允许任何人在遵循该标准的情况下开发应用容器技术，这使得容器技术有了一个更广阔的发展空间。</p><p>OCI成立后，libcontainer 交给OCI组织来维护，但是libcontainer中只包含了与kernel交互的库，因此基于libcontainer项目，后面又加入了一个CLI工具，并且项目改名为runC (<a href="https://github.com/opencontainers/runc">https://github.com/opencontainers/runc</a> )， 目前runC已经成为一个功能强大的runtime工具。</p><p>Docker也做了架构调整。将容器运行时相关的程序从docker daemon剥离出来，形成了<strong>containerd</strong>。containerd向上为Docker Daemon提供了<code>gRPC接口</code>，使得Docker Daemon屏蔽下面的结构变化，确保原有接口向下兼容。向下通过<code>containerd-shim</code>结合<code>runC</code>，使得引擎可以独立升级，避免之前Docker Daemon升级会导致所有容器不可用的问题。</p><p> <img src="/pages_images/Docker/containerd.png"></p><p>也就是说</p><ul><li>runC（libcontainer）是符合OCI标准的一个实现，与底层系统交互</li><li>containerd是实现了OCI之上的容器的高级功能，比如镜像管理、容器执行的调用等</li><li>Dockerd目前是最上层与CLI交互的进程，接收cli的请求并与containerd协作</li></ul><h6 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h6><ol><li>为了解决软件交付过程中的环境依赖，同时提供一种更加轻量的虚拟化技术，Docker出现了</li><li>Docker是一种CS架构的软件产品，可以把代码及依赖打包成镜像，作为交付介质，并且把镜像启动成为容器，提供容器生命周期的管理</li><li>docker-ce，每季度发布stable版本。18.06，18.09，19.03</li><li>发展至今，docker已经通过制定OCI标准对最初的项目做了拆分，其中runC和containerd是docker的核心项目，理解docker整个请求的流程，对我们深入理解docker有很大的帮助</li></ol><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h6 id="配置宿主机网卡转发"><a href="#配置宿主机网卡转发" class="headerlink" title="配置宿主机网卡转发"></a>配置宿主机网卡转发</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 若未配置，需要执行如下</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> &lt;&lt;EOF &gt;  /etc/sysctl.d/docker.conf<br>net.bridge.bridge<span class="hljs-literal">-nf-call-ip6tables</span> = <span class="hljs-number">1</span><br>net.bridge.bridge<span class="hljs-literal">-nf-call-iptables</span> = <span class="hljs-number">1</span><br>net.ipv4.ip_forward=<span class="hljs-number">1</span><br>EOF<br><span class="hljs-variable">$</span> sysctl <span class="hljs-literal">-p</span> /etc/sysctl.d/docker.conf<br></code></pre></td></tr></table></figure><h6 id="Yum安装配置docker"><a href="#Yum安装配置docker" class="headerlink" title="Yum安装配置docker"></a>Yum安装配置docker</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 下载阿里源repo文件</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">curl</span> <span class="hljs-literal">-o</span> /etc/yum.repos.d/Centos<span class="hljs-literal">-7</span>.repo http://mirrors.aliyun.com/repo/Centos<span class="hljs-literal">-7</span>.repo<br><span class="hljs-variable">$</span> <span class="hljs-built_in">curl</span> <span class="hljs-literal">-o</span> /etc/yum.repos.d/docker<span class="hljs-literal">-ce</span>.repo http://mirrors.aliyun.com/docker<span class="hljs-literal">-ce</span>/linux/centos/docker<span class="hljs-literal">-ce</span>.repo<br><br><span class="hljs-variable">$</span> yum clean all &amp;&amp; yum makecache<br><span class="hljs-comment">## yum安装</span><br><span class="hljs-variable">$</span> yum install docker<span class="hljs-literal">-ce</span> <span class="hljs-literal">-y</span><br><span class="hljs-comment">## 查看源中可用版本</span><br><span class="hljs-variable">$</span> yum list docker<span class="hljs-literal">-ce</span> <span class="hljs-literal">--showduplicates</span> | <span class="hljs-built_in">sort</span> <span class="hljs-literal">-r</span><br><span class="hljs-comment">## 安装指定版本</span><br><span class="hljs-comment">##yum install -y docker-ce-18.09.9</span><br><br><span class="hljs-comment">## 配置源加速</span><br><span class="hljs-comment">## https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</span><br>mkdir <span class="hljs-literal">-p</span> /etc/docker<br>vi /etc/docker/daemon.json<br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span> : [<br>    <span class="hljs-string">&quot;https://8xpk5wnt.mirror.aliyuncs.com&quot;</span><br>  ]<br>&#125;<br><br><span class="hljs-comment">## 设置开机自启</span><br>systemctl enable docker  <br>systemctl daemon<span class="hljs-literal">-reload</span><br><br><span class="hljs-comment">## 启动docker</span><br>systemctl <span class="hljs-built_in">start</span> docker <br><br><span class="hljs-comment">## 查看docker信息</span><br>docker info<br><br><span class="hljs-comment">## docker-client</span><br>which docker<br><span class="hljs-comment">## docker daemon</span><br><span class="hljs-built_in">ps</span> aux |grep docker<br><span class="hljs-comment">## containerd</span><br><span class="hljs-built_in">ps</span> aux|grep containerd<br>systemctl status containerd<br></code></pre></td></tr></table></figure><h4 id="核心要素及常用操作详解"><a href="#核心要素及常用操作详解" class="headerlink" title="核心要素及常用操作详解"></a>核心要素及常用操作详解</h4><p><img src="/pages_images/Docker/docker%E6%9E%B6%E6%9E%84.png"></p><p>三大核心要素：镜像(Image)、容器(Container)、仓库(Registry)</p><h6 id="镜像（Image）"><a href="#镜像（Image）" class="headerlink" title="镜像（Image）"></a>镜像（Image）</h6><p>打包了业务代码及运行环境的包，是静态的文件，不能直接对外提供服务。</p><h6 id="容器（Container）"><a href="#容器（Container）" class="headerlink" title="容器（Container）"></a>容器（Container）</h6><p>镜像的运行时，可以对外提供服务。</p><h6 id="仓库（Registry）"><a href="#仓库（Registry）" class="headerlink" title="仓库（Registry）"></a>仓库（Registry）</h6><p>存放镜像的地方</p><ul><li>公有仓库，Docker Hub，阿里，网易…</li><li>私有仓库，企业内部搭建<ul><li>Docker Registry，Docker官方提供的镜像仓库存储服务</li><li>Harbor, 是Docker Registry的更高级封装，它除了提供友好的Web UI界面，角色和用户权限管理，用户操作审计等功能</li></ul></li><li>镜像访问地址形式 registry.devops.com&#x2F;demo&#x2F;hello:latest,若没有前面的url地址，则默认寻找Docker Hub中的镜像，若没有tag标签，则使用latest作为标签。 比如，docker pull nginx，会被解析成docker.io&#x2F;library&#x2F;nginx:latest</li><li>公有的仓库中，一般存在这么几类镜像<ul><li>操作系统基础镜像（centos，ubuntu，suse，alpine）</li><li>中间件（nginx，redis，mysql，tomcat）</li><li>语言编译环境（python，java，golang）</li><li>业务镜像（django-demo…）</li></ul></li></ul><p>容器和仓库不会直接交互，都是以镜像为载体来操作。</p><ol><li><p>查看镜像列表</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker images<br></code></pre></td></tr></table></figure></li><li><p>如何获取镜像</p><ul><li><p>从远程仓库拉取</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker pull nginx:alpine<br><span class="hljs-variable">$</span> docker images<br></code></pre></td></tr></table></figure></li><li><p>本地构建</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker build . <span class="hljs-literal">-t</span> my<span class="hljs-literal">-nginx</span>:ubuntu <span class="hljs-operator">-f</span> Dockerfile<br></code></pre></td></tr></table></figure></li></ul></li><li><p>如何通过镜像启动容器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker run <span class="hljs-literal">--name</span> my<span class="hljs-literal">-nginx-alpine</span> <span class="hljs-literal">-d</span> nginx:alpine<br></code></pre></td></tr></table></figure></li><li><p>如何知道容器内部运行了什么程序？</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 进入容器内部,分配一个tty终端</span><br><span class="hljs-variable">$</span> docker exec <span class="hljs-literal">-ti</span> my<span class="hljs-literal">-nginx-alpine</span> /bin/sh<br><span class="hljs-comment"># ps aux</span><br></code></pre></td></tr></table></figure></li><li><p>docker怎么知道容器启动后该执行什么命令？</p><p>通过docker build来模拟构建一个nginx的镜像，</p><ul><li><p>创建Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 告诉docker使用哪个基础镜像作为模板，后续命令都以这个镜像为基础 </span><br><span class="hljs-keyword">FROM</span> ubuntu<br><br><span class="hljs-comment"># RUN命令会在上面指定的镜像里执行命令 </span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt install -y nginx</span><br><br><span class="hljs-comment">#告诉docker，启动容器时执行如下命令</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/usr/sbin/nginx&quot;</span>, <span class="hljs-string">&quot;-g&quot;</span>,<span class="hljs-string">&quot;daemon off;&quot;</span>]</span><br></code></pre></td></tr></table></figure></li><li><p>构建本地镜像</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker build . <span class="hljs-literal">-t</span> my<span class="hljs-literal">-nginx</span>:ubuntu <span class="hljs-operator">-f</span> Dockerfile<br><br></code></pre></td></tr></table></figure></li><li><p>使用新镜像启动容器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker run <span class="hljs-literal">--name</span> my<span class="hljs-literal">-nginx-ubuntu</span> <span class="hljs-literal">-d</span> my<span class="hljs-literal">-nginx</span>:ubuntu<br><br></code></pre></td></tr></table></figure></li><li><p>进入容器查看进程</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker exec <span class="hljs-literal">-ti</span> my<span class="hljs-literal">-nginx-ubuntu</span> /bin/sh<br><span class="hljs-comment"># ps aux</span><br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>如何访问容器内服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 进入容器内部</span><br><span class="hljs-variable">$</span> docker exec <span class="hljs-literal">-ti</span> my<span class="hljs-literal">-nginx-alpine</span> /bin/sh<br><span class="hljs-comment"># ps aux|grep nginx</span><br><span class="hljs-comment"># curl localhost:80</span><br><br></code></pre></td></tr></table></figure></li><li><p>宿主机中如何访问容器服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 删掉旧服务,重新启动</span><br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> my<span class="hljs-literal">-nginx-alpine</span><br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">--name</span> my<span class="hljs-literal">-nginx-alpine</span> <span class="hljs-literal">-d</span> <span class="hljs-literal">-p</span> <span class="hljs-number">8080</span>:<span class="hljs-number">80</span> nginx:alpine<br><span class="hljs-variable">$</span> <span class="hljs-built_in">curl</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">136.10</span>:<span class="hljs-number">8080</span><br></code></pre></td></tr></table></figure></li></ol><h6 id="操作演示"><a href="#操作演示" class="headerlink" title="操作演示"></a>操作演示</h6><p><img src="/pages_images/Docker/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.jpg"></p><ol start="2"><li>查看所有镜像：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker images<br></code></pre></td></tr></table></figure><ol start="2"><li>拉取镜像:</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker pull nginx:alpine<br></code></pre></td></tr></table></figure><ol start="3"><li>如何唯一确定镜像:</li></ol><ul><li>image_id</li><li>repository:tag</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker images<br>REPOSITORY    TAG                 IMAGE ID            CREATED             SIZE<br>nginx         alpine              <span class="hljs-number">377</span>c0837328f        <span class="hljs-number">2</span> weeks ago         <span class="hljs-number">19.7</span>MB<br></code></pre></td></tr></table></figure><ol start="4"><li><p>导出镜像到文件中</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker save <span class="hljs-literal">-o</span> nginx<span class="hljs-literal">-alpine</span>.tar nginx:alpine<br><br></code></pre></td></tr></table></figure></li><li><p>从文件中加载镜像</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker load <span class="hljs-literal">-i</span> nginx<span class="hljs-literal">-alpine</span>.tar<br><br></code></pre></td></tr></table></figure></li><li><p>部署镜像仓库</p><p><a href="https://docs.docker.com/registry/">https://docs.docker.com/registry/</a> </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 使用docker镜像启动镜像仓库服务</span><br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">-p</span> <span class="hljs-number">5000</span>:<span class="hljs-number">5000</span> <span class="hljs-literal">--restart</span> always <span class="hljs-literal">--name</span> registry registry:<span class="hljs-number">2</span><br><br><span class="hljs-comment">## 默认仓库不带认证，若需要认证，参考https://docs.docker.com/registry/deploying/#restricting-access</span><br><br></code></pre></td></tr></table></figure></li><li><p>推送本地镜像到镜像仓库中</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker tag nginx:alpine localhost:<span class="hljs-number">5000</span>/nginx:alpine<br><span class="hljs-variable">$</span> docker push localhost:<span class="hljs-number">5000</span>/nginx:alpine<br><br><span class="hljs-comment">## docker sp.168.136.10:5000/nginx:alpine</span><br><span class="hljs-variable">$</span> docker tag nginx:alpine <span class="hljs-number">192.168</span>.<span class="hljs-number">136.10</span>:<span class="hljs-number">5000</span>/nginx:alpine<br><span class="hljs-variable">$</span> docker push <span class="hljs-number">192.168</span>.<span class="hljs-number">136.10</span>:<span class="hljs-number">5000</span>/nginx:alpine<br>The push refers to repository [<span class="hljs-number">192.168</span><span class="hljs-type">.136.10</span>:<span class="hljs-number">5000</span>/<span class="hljs-type">nginx</span>]<br>Get https://<span class="hljs-number">192.168</span>.<span class="hljs-number">136.10</span>:<span class="hljs-number">5000</span>/v2/: http: server gave HTTP response to HTTPS client<br><span class="hljs-comment">## docker默认不允许向http的仓库地址推送，如何做成https的，参考：https://docs.docker.com/registry/deploying/#run-an-externally-accessible-registry</span><br><span class="hljs-comment">## 我们没有可信证书机构颁发的证书和域名，自签名证书需要在每个节点中拷贝证书文件，比较麻烦，因此我们通过配置daemon的方式，来跳过证书的验证：</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> /etc/docker/daemon.json<br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>    <span class="hljs-string">&quot;https://8xpk5wnt.mirror.aliyuncs.com&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;insecure-registries&quot;</span>: [<br>     <span class="hljs-string">&quot;192.168.136.10:5000&quot;</span><br>  ]<br>&#125;<br><span class="hljs-variable">$</span> systemctl restart docker<br><span class="hljs-variable">$</span> docker push <span class="hljs-number">192.168</span>.<span class="hljs-number">136.10</span>:<span class="hljs-number">5000</span>/nginx:alpine<br><span class="hljs-variable">$</span> docker images<span class="hljs-comment"># IMAGE ID相同，等于起别名或者加快捷方式</span><br>REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE<br><span class="hljs-number">192.168</span>.<span class="hljs-number">136.10</span>:<span class="hljs-number">5000</span>/nginx   alpine              <span class="hljs-number">377</span>c0837328f        <span class="hljs-number">4</span> weeks ago         <br>nginx                    alpine              <span class="hljs-number">377</span>c0837328f        <span class="hljs-number">4</span> weeks ago         <br>localhost:<span class="hljs-number">5000</span>/nginx     alpine              <span class="hljs-number">377</span>c0837328f        <span class="hljs-number">4</span> weeks ago         <br>registry                 <span class="hljs-number">2</span>                   <span class="hljs-number">708</span>bc6af7e5e        <span class="hljs-number">2</span> months ago       <br><br></code></pre></td></tr></table></figure></li><li><p>删除镜像</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">docker rmi nginx:alpine<br><br></code></pre></td></tr></table></figure></li><li><p>查看容器列表</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 查看运行状态的容器列表</span><br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">ps</span><br><br><span class="hljs-comment">## 查看全部状态的容器列表</span><br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-a</span><br><br></code></pre></td></tr></table></figure></li><li><p>启动容器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 后台启动</span><br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">--name</span> nginx <span class="hljs-literal">-d</span> nginx:alpine<br><br><span class="hljs-comment">## 映射端口,把容器的端口映射到宿主机中,-p &lt;host_port&gt;:&lt;container_port&gt;</span><br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">--name</span> nginx <span class="hljs-literal">-d</span> <span class="hljs-literal">-p</span> <span class="hljs-number">8080</span>:<span class="hljs-number">80</span> nginx:alpine<br><br><span class="hljs-comment">## 资源限制,最大可用内存500M</span><br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">--memory</span>=<span class="hljs-number">500</span>m nginx:alpine<br><br></code></pre></td></tr></table></figure></li><li><p>容器数据持久化</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 挂载主机目录</span><br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">--name</span> nginx <span class="hljs-literal">-d</span>  <span class="hljs-literal">-v</span> /opt:/opt <span class="hljs-literal">-v</span> /var/log:/var/log nginx:alpine<br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">--name</span> mysql <span class="hljs-literal">-e</span> MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span> <span class="hljs-literal">-d</span> <span class="hljs-literal">-v</span> /opt/mysql/:/var/lib/mysql mysql:<span class="hljs-number">5.7</span><br><br><span class="hljs-comment">## 使用volumes卷</span><br><span class="hljs-variable">$</span> docker volume <span class="hljs-built_in">ls</span><br><span class="hljs-variable">$</span> docker volume create my<span class="hljs-literal">-vol</span><br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">--name</span> nginx <span class="hljs-literal">-d</span> <span class="hljs-literal">-v</span> my<span class="hljs-literal">-vol</span>:/opt/my<span class="hljs-literal">-vol</span> nginx:alpine<br><span class="hljs-variable">$</span> docker exec <span class="hljs-literal">-ti</span> nginx touch /opt/my<span class="hljs-literal">-vol</span>/a.txt<br><br><span class="hljs-comment">## 验证数据共享</span><br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">--name</span> nginx2 <span class="hljs-literal">-d</span> <span class="hljs-literal">-v</span> my<span class="hljs-literal">-vol</span>:/opt/hh nginx:alpine<br><span class="hljs-variable">$</span> docker exec <span class="hljs-literal">-ti</span> nginx2 <span class="hljs-built_in">ls</span> /opt/hh/<br>a.txt<br>    <br></code></pre></td></tr></table></figure></li><li><p>进入容器或者执行容器内的命令</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker exec <span class="hljs-literal">-ti</span> &lt;container_id_or_name&gt; /bin/sh<br><span class="hljs-variable">$</span> docker exec &lt;container_id_or_name&gt; hostname<br>    <br></code></pre></td></tr></table></figure></li><li><p>主机与容器之间拷贝数据</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 主机拷贝到容器</span><br><span class="hljs-variable">$</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;123&#x27;</span>&gt;/tmp/test.txt<br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">cp</span> /tmp/test.txt nginx:/tmp<br><span class="hljs-variable">$</span> docker exec <span class="hljs-literal">-ti</span> nginx <span class="hljs-built_in">cat</span> /tmp/test.txt<br><span class="hljs-number">123</span><br><br><span class="hljs-comment">## 容器拷贝到主机</span><br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">cp</span> nginx:/tmp/test.txt ./<br>    <br></code></pre></td></tr></table></figure></li><li><p>挂载已有的数据，重新创建镜像仓库容器</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 解压离线镜像文件</span><br><span class="hljs-variable">$</span> tar zxf registry.tar.gz <span class="hljs-literal">-C</span> /opt<br><br><span class="hljs-comment">## 删除当前镜像仓库容器</span><br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> registry<br><span class="hljs-comment">## 使用docker镜像启动镜像仓库服务</span><br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">-p</span> <span class="hljs-number">5000</span>:<span class="hljs-number">5000</span> <span class="hljs-literal">--restart</span> always <span class="hljs-literal">-v</span> /opt/registry:/var/lib/registry <span class="hljs-literal">--name</span> registry registry:<span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure><p> 假设启动镜像仓库服务的主机地址为192.168.136.10，该目录中已存在的镜像列表：</p><table><thead><tr><th>现镜像仓库地址</th><th>原镜像仓库地址</th></tr></thead><tbody><tr><td>192.168.136.10:5000&#x2F;coreos&#x2F;flannel:v0.11.0-amd64</td><td>quay.io&#x2F;coreos&#x2F;flannel:v0.11.0-amd64</td></tr><tr><td>192.168.136.10:5000&#x2F;mysql:5.7</td><td>mysql:5.7</td></tr><tr><td>192.168.136.10:5000&#x2F;nginx:alpine</td><td>nginx:alpine</td></tr><tr><td>192.168.136.10:5000&#x2F;centos:centos7.5.1804</td><td>centos:centos7.5.1804</td></tr><tr><td>192.168.136.10:5000&#x2F;elasticsearch&#x2F;elasticsearch:7.4.2</td><td>docker.elastic.co&#x2F;elasticsearch&#x2F;elasticsearch:7.4.2</td></tr><tr><td>192.168.136.10:5000&#x2F;fluentd-es-root:v1.6.2-1.0</td><td>quay.io&#x2F;fluentd_elasticsearch&#x2F;fluentd:v2.5.2</td></tr><tr><td>192.168.136.10:5000&#x2F;kibana&#x2F;kibana:7.4.2</td><td>docker.elastic.co&#x2F;kibana&#x2F;kibana:7.4.2</td></tr><tr><td>192.168.136.10:5000&#x2F;kubernetesui&#x2F;dashboard:v2.0.0-beta5</td><td>kubernetesui&#x2F;dashboard:v2.0.0-beta5</td></tr><tr><td>192.168.136.10:5000&#x2F;kubernetesui&#x2F;metrics-scraper:v1.0.1</td><td>kubernetesui&#x2F;metrics-scraper:v1.0.1</td></tr><tr><td>192.168.136.10:5000&#x2F;kubernetes-ingress-controller&#x2F;nginx-ingress-controller:0.30.0</td><td>quay.io&#x2F;kubernetes-ingress-controller&#x2F;nginx-ingress-controller:0.30.0</td></tr><tr><td>192.168.136.10:5000&#x2F;jenkinsci&#x2F;blueocean:latest</td><td>jenkinsci&#x2F;blueocean:latest</td></tr><tr><td>192.168.136.10:5000&#x2F;sonarqube:7.9-community</td><td>sonarqube:7.9-community</td></tr><tr><td>192.168.136.10:5000&#x2F;postgres:11.4</td><td>postgres:11.4</td></tr></tbody></table></li><li><p>查看容器日志</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 查看全部日志</span><br><span class="hljs-variable">$</span> docker logs nginx<br><br><span class="hljs-comment">## 实时查看最新日志</span><br><span class="hljs-variable">$</span> docker logs <span class="hljs-operator">-f</span> nginx<br><br><span class="hljs-comment">## 从最新的100条开始查看</span><br><span class="hljs-variable">$</span> docker logs <span class="hljs-literal">--tail</span>=<span class="hljs-number">100</span> <span class="hljs-operator">-f</span> nginx<br>    <br></code></pre></td></tr></table></figure></li><li><p>停止或者删除容器</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 停止运行中的容器</span><br><span class="hljs-variable">$</span> docker stop nginx<br><br><span class="hljs-comment">## 启动退出容器</span><br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">start</span> nginx<br><br><span class="hljs-comment">## 删除非运行中状态的容器</span><br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">rm</span> nginx<br><br><span class="hljs-comment">## 删除运行中的容器</span><br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> nginx<br>    <br></code></pre></td></tr></table></figure></li><li><p>查看容器或者镜像的明细</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 查看容器详细信息，包括容器IP地址等</span><br><span class="hljs-variable">$</span> docker inspect nginx<br><br><span class="hljs-comment">## 查看镜像的明细信息</span><br><span class="hljs-variable">$</span> docker inspect nginx:alpine<br>    <br></code></pre></td></tr></table></figure></li></ol><h6 id="通过1号进程理解容器的本质"><a href="#通过1号进程理解容器的本质" class="headerlink" title="通过1号进程理解容器的本质"></a>通过1号进程理解容器的本质</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker exec <span class="hljs-literal">-ti</span> my<span class="hljs-literal">-nginx-alpine</span> /bin/sh<br><span class="hljs-comment">#/ ps aux</span><br><br></code></pre></td></tr></table></figure><p>容器启动的时候可以通过命令去覆盖默认的CMD</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">--name</span> xxx nginx:alpine &lt;自定义命令&gt;<br><span class="hljs-comment"># &lt;自定义命令&gt;会覆盖镜像中指定的CMD指令，作为容器的1号进程启动。</span><br><br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">--name</span> <span class="hljs-built_in">test-3</span> nginx:alpine <span class="hljs-built_in">echo</span> <span class="hljs-number">123</span><br><br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">--name</span> <span class="hljs-built_in">test-4</span> nginx:alpine ping www.luffycity.com<br><br></code></pre></td></tr></table></figure><p>本质上讲容器是利用namespace和cgroup等技术在宿主机中创建的独立的虚拟空间，这个空间内的网络、进程、挂载等资源都是隔离的。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker exec <span class="hljs-literal">-ti</span> my<span class="hljs-literal">-nginx</span> /bin/sh<br><span class="hljs-comment">#/ ip addr</span><br><span class="hljs-comment">#/ ls -l /</span><br><span class="hljs-comment">#/ apt install xxx</span><br><span class="hljs-comment">#/ #安装的软件对宿主机和其他容器没有任何影响，和虚拟机不同的是，容器间共享一个内核，所以容器内没法升级内核</span><br></code></pre></td></tr></table></figure><h4 id="Django应用容器化实践"><a href="#Django应用容器化实践" class="headerlink" title="Django应用容器化实践"></a>Django应用容器化实践</h4><h6 id="django项目介绍"><a href="#django项目介绍" class="headerlink" title="django项目介绍"></a>django项目介绍</h6><ul><li><p>项目地址：<a href="https://gitee.com/agagin/python-demo.git">https://gitee.com/agagin/python-demo.git</a></p></li><li><p>python3 + django + uwsgi + nginx + mysql</p></li><li><p>内部服务端口8002</p></li></ul><h6 id="构建命令"><a href="#构建命令" class="headerlink" title="构建命令"></a>构建命令</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker build . <span class="hljs-literal">-t</span> ImageName:ImageTag <span class="hljs-operator">-f</span> Dockerfile<br></code></pre></td></tr></table></figure><p>如何理解构建镜像的过程？</p><p>Dockerfile是一堆指令，在docker build的时候，按照该指令进行操作，最终生成我们期望的镜像</p><ul><li><p>FROM 指定基础镜像，必须为第一个命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">格式：<br>FROM <span class="hljs-symbol">&lt;image&gt;</span><br>FROM <span class="hljs-symbol">&lt;image&gt;</span>:<span class="hljs-symbol">&lt;tag&gt;</span><br>示例：<br>FROM mysq<span class="hljs-variable">l:5</span>.<span class="hljs-number">7</span><br>注意：<br><span class="hljs-keyword">tag</span>是可选的，如果不使用<span class="hljs-keyword">tag</span>时，会使用latest版本的基础镜像<br></code></pre></td></tr></table></figure></li><li><p>MAINTAINER 镜像维护者的信息</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">格式：<br><span class="hljs-keyword">MAINTAINER</span> &lt;name&gt;<br>示例：<br><span class="hljs-keyword">MAINTAINER</span> Yongxin Li<br>    <span class="hljs-keyword">MAINTAINER</span> inspur_lyx@hotmail.com<br>    <span class="hljs-keyword">MAINTAINER</span> Yongxin Li &lt;inspur_lyx@hotmail.com&gt;<br></code></pre></td></tr></table></figure></li><li><p>COPY|ADD 添加本地文件到镜像中</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">格式：<br><span class="hljs-keyword">COPY</span><span class="language-bash"> &lt;src&gt;... &lt;dest&gt;</span><br>示例：<br>    <span class="hljs-keyword">ADD</span><span class="language-bash"> hom* /mydir/          <span class="hljs-comment"># 添加所有以&quot;hom&quot;开头的文件</span></span><br>    <span class="hljs-keyword">ADD</span><span class="language-bash"> <span class="hljs-built_in">test</span> relativeDir/     <span class="hljs-comment"># 添加 &quot;test&quot; 到 `WORKDIR`/relativeDir/</span></span><br>    <span class="hljs-keyword">ADD</span><span class="language-bash"> <span class="hljs-built_in">test</span> /absoluteDir/    <span class="hljs-comment"># 添加 &quot;test&quot; 到 /absoluteDir/</span></span><br></code></pre></td></tr></table></figure></li><li><p>WORKDIR 工作目录</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">格式：<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /path/to/workdir</span><br>示例：<br>    <span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /a  (这时工作目录为/a)</span><br>注意：<br>通过<span class="hljs-keyword">WORKDIR</span><span class="language-bash">设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行</span><br></code></pre></td></tr></table></figure></li><li><p>RUN 构建镜像过程中执行命令</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata">格式：<br><span class="hljs-keyword">RUN</span> &lt;command&gt;<br>示例：<br>    <span class="hljs-keyword">RUN</span> yum install nginx<br>    <span class="hljs-keyword">RUN</span> pip install django<br>    <span class="hljs-keyword">RUN</span> <span class="hljs-keyword">mkdir</span> <span class="hljs-keyword">test</span> &amp;&amp; <span class="hljs-keyword">rm</span> -rf /<span class="hljs-keyword">var</span>/lib/unusedfiles<br>注意：<br><span class="hljs-keyword">RUN</span>指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定--<span class="hljs-keyword">no</span>-cache参数，如：docker build --<span class="hljs-keyword">no</span>-cache<br></code></pre></td></tr></table></figure></li><li><p>CMD 构建容器后调用，也就是在容器启动时才进行调用</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">格式：<br>    <span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;executable&quot;</span>,<span class="hljs-string">&quot;param1&quot;</span>,<span class="hljs-string">&quot;param2&quot;</span>] (执行可执行文件，优先)</span><br>    <span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;param1&quot;</span>,<span class="hljs-string">&quot;param2&quot;</span>] (设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数)</span><br>    <span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">command</span> param1 param2 (执行shell内部命令)</span><br>示例：<br>    <span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/usr/bin/wc&quot;</span>,<span class="hljs-string">&quot;--help&quot;</span>]</span><br>    <span class="hljs-keyword">CMD</span><span class="language-bash"> ping www.baidu.com</span><br>注意：<br><span class="hljs-keyword">CMD</span><span class="language-bash">不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。</span><br></code></pre></td></tr></table></figure></li><li><p>ENTRYPOINT 设置容器初始化命令，使其可执行化</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">格式：<br>    <span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;executable&quot;</span>, <span class="hljs-string">&quot;param1&quot;</span>, <span class="hljs-string">&quot;param2&quot;</span>] (可执行文件, 优先)</span><br>    <span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> <span class="hljs-built_in">command</span> param1 param2 (shell内部命令)</span><br>示例：<br>    <span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;/usr/bin/wc&quot;</span>,<span class="hljs-string">&quot;--help&quot;</span>]</span><br>注意：<br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash">与CMD非常类似，不同的是通过docker run执行的命令不会覆盖ENTRYPOINT，而docker run命令中指定的任何参数，都会被当做参数再次传递给ENTRYPOINT。Dockerfile中只允许有一个ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令</span><br></code></pre></td></tr></table></figure></li><li><p>ENV</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">格式：<br>    ENV <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span><br>    ENV <span class="hljs-tag">&lt;<span class="hljs-name">key</span>&gt;</span>=<span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span><br>示例：<br>    ENV myName John<br>    ENV myCat=fluffy<br></code></pre></td></tr></table></figure></li><li><p>EXPOSE</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">格式：<br>    <span class="hljs-keyword">EXPOSE</span> &lt;port&gt; [&lt;port&gt;...]<br>示例：<br>    <span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span> <span class="hljs-number">443</span><br>    <span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br>    <span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">11211</span>/tcp <span class="hljs-number">11211</span>/udp<br>注意：<br>    <span class="hljs-keyword">EXPOSE</span>并不会让容器的端口访问到主机。要使其可访问，需要在docker <span class="hljs-keyword">run</span><span class="language-bash">运行容器时通过-p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口</span><br><br></code></pre></td></tr></table></figure><p><img src="/pages_images/Docker/Dockerfile%E8%A7%A3%E9%87%8A.png"></p></li></ul><h6 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h6><p><em>dockerfiles&#x2F;myblog&#x2F;Dockerfile</em></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># This my first django Dockerfile</span><br><span class="hljs-comment"># Version 1.0</span><br><br><span class="hljs-comment"># Base images 基础镜像</span><br><span class="hljs-keyword">FROM</span> centos:centos7.<span class="hljs-number">5.1804</span><br><br><span class="hljs-comment">#MAINTAINER 维护者信息</span><br><span class="hljs-keyword">LABEL</span><span class="language-bash"> maintainer=<span class="hljs-string">&quot;inspur_lyx@hotmail.com&quot;</span></span><br><br><span class="hljs-comment">#ENV 设置环境变量</span><br><span class="hljs-keyword">ENV</span> LANG en_US.UTF-<span class="hljs-number">8</span><br><span class="hljs-keyword">ENV</span> LC_ALL en_US.UTF-<span class="hljs-number">8</span><br><br><span class="hljs-comment">#RUN 执行以下命令</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> curl -so /etc/yum.repos.d/Centos-7.repo http://mirrors.aliyun.com/repo/Centos-7.repo &amp;&amp; rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> yum install -y  python36 python3-devel gcc pcre-devel zlib-devel make net-tools nginx</span><br><br><span class="hljs-comment">#工作目录</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /opt/myblog</span><br><br><span class="hljs-comment">#拷贝文件至工作目录</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><br><span class="hljs-comment"># 拷贝nginx配置文件</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> myblog.conf /etc/nginx</span><br><br><span class="hljs-comment">#安装依赖的插件</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip3 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com -r requirements.txt</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x run.sh &amp;&amp; <span class="hljs-built_in">rm</span> -rf ~/.cache/pip</span><br><br><span class="hljs-comment">#EXPOSE 映射端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8002</span><br><br><span class="hljs-comment">#容器启动时执行命令</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;./run.sh&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>执行构建：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker build . <span class="hljs-literal">-t</span> myblog:v1 <span class="hljs-operator">-f</span> Dockerfile<br><br></code></pre></td></tr></table></figure><h6 id="运行mysql"><a href="#运行mysql" class="headerlink" title="运行mysql"></a>运行mysql</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">-p</span> <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> <span class="hljs-literal">--name</span> mysql  <span class="hljs-literal">-v</span> /opt/mysql:/var/lib/mysql <span class="hljs-literal">-e</span> MYSQL_DATABASE=myblog <span class="hljs-literal">-e</span> MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span> mysql:<span class="hljs-number">5.7</span><br><br><span class="hljs-comment">## 查看数据库</span><br><span class="hljs-variable">$</span> docker exec <span class="hljs-literal">-ti</span> mysql bash<br><span class="hljs-comment">#/ mysql -uroot -p123456</span><br><span class="hljs-comment">#/ show databases;</span><br><br><span class="hljs-comment">## navicator连接</span><br><br></code></pre></td></tr></table></figure><h6 id="启动Django应用"><a href="#启动Django应用" class="headerlink" title="启动Django应用"></a>启动Django应用</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 启动容器</span><br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">-p</span> <span class="hljs-number">8002</span>:<span class="hljs-number">8002</span> <span class="hljs-literal">--name</span> myblog <span class="hljs-literal">-e</span> MYSQL_HOST=<span class="hljs-number">192.168</span>.<span class="hljs-number">136.10</span> <span class="hljs-literal">-e</span> MYSQL_USER=root <span class="hljs-literal">-e</span> MYSQL_PASSWD=<span class="hljs-number">123456</span>  myblog:v1<br><br><span class="hljs-comment">## migrate</span><br><span class="hljs-variable">$</span> docker exec <span class="hljs-literal">-ti</span> myblog bash<br><span class="hljs-comment">#/ python3 manage.py makemigrations</span><br><span class="hljs-comment">#/ python3 manage.py migrate</span><br><span class="hljs-comment">#/ python3 manage.py createsuperuser</span><br><br><span class="hljs-comment">## 创建超级用户</span><br><span class="hljs-variable">$</span> docker exec <span class="hljs-literal">-ti</span> myblog python3 manage.py createsuperuser<br><br><span class="hljs-comment">## 收集静态文件</span><br><span class="hljs-comment">## $ docker exec -ti myblog python3 manage.py collectstatic</span><br><br></code></pre></td></tr></table></figure><p>访问121.204.157.52:8002&#x2F;admin</p><p>构建镜像，替换默认编码：</p><p><code>dockerfiles/mysql/my.cnf</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> my.cnf<br>[<span class="hljs-type">mysqld</span>]<br>user=root<br>character<span class="hljs-literal">-set-server</span>=utf8<br>lower_case_table_names=<span class="hljs-number">1</span><br><br>[<span class="hljs-type">client</span>]<br>default<span class="hljs-literal">-character-set</span>=utf8<br>[<span class="hljs-type">mysql</span>]<br>default<span class="hljs-literal">-character-set</span>=utf8<br><br>!includedir /etc/mysql/conf.d/<br>!includedir /etc/mysql/mysql.conf.d/<br><br></code></pre></td></tr></table></figure><p><code>dockerfiles/mysql/Dockerfile</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> mysql:<span class="hljs-number">5.7</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> my.cnf /etc/mysql/my.cnf</span><br><span class="hljs-comment">## CMD或者ENTRYPOINT默认继承</span><br><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker build . <span class="hljs-literal">-t</span> mysql:<span class="hljs-number">5.7</span><span class="hljs-literal">-utf8</span><br><span class="hljs-variable">$</span> docker tag mysql:<span class="hljs-number">5.7</span><span class="hljs-literal">-utf8</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">136.10</span>:<span class="hljs-number">5000</span>/mysql:<span class="hljs-number">5.7</span><span class="hljs-literal">-utf8</span><br><span class="hljs-variable">$</span> docker push <span class="hljs-number">192.168</span>.<span class="hljs-number">136.10</span>:<span class="hljs-number">5000</span>/mysql:<span class="hljs-number">5.7</span><span class="hljs-literal">-utf8</span><br><br><span class="hljs-comment">## 删除旧的mysql容器，使用新镜像启动,不用再次初始化</span><br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> mysql<br><span class="hljs-variable">$</span> <span class="hljs-built_in">rm</span> <span class="hljs-literal">-rf</span> /opt/mysql/mysql<span class="hljs-literal">-data</span>/*<br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">-p</span> <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> <span class="hljs-literal">--name</span> mysql <span class="hljs-literal">-v</span> /opt/mysql/mysql<span class="hljs-literal">-data</span>/:/var/lib/mysql <span class="hljs-literal">-e</span> MYSQL_DATABASE=myblog <span class="hljs-literal">-e</span> MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">136.10</span>:<span class="hljs-number">5000</span>/mysql:<span class="hljs-number">5.7</span><span class="hljs-literal">-utf8</span><br><br><span class="hljs-comment">## 重新migrate</span><br><span class="hljs-variable">$</span> docker exec <span class="hljs-literal">-ti</span> myblog bash<br><span class="hljs-comment">#/ python3 manage.py makemigrations</span><br><span class="hljs-comment">#/ python3 manage.py migrate</span><br><span class="hljs-comment">#/ python3 manage.py createsuperuser</span><br><br></code></pre></td></tr></table></figure><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>虚拟化核心需要解决的问题：资源隔离与资源限制</p><ul><li>虚拟机硬件虚拟化技术， 通过一个 hypervisor 层实现对资源的彻底隔离。</li><li>容器则是操作系统级别的虚拟化，利用的是内核的 Cgroup 和 Namespace 特性，此功能完全通过软件实现。</li></ul><h6 id="Namespace-资源隔离"><a href="#Namespace-资源隔离" class="headerlink" title="Namespace 资源隔离"></a>Namespace 资源隔离</h6><p>命名空间是全局资源的一种抽象，将资源放到不同的命名空间中，各个命名空间中的资源是相互隔离的。</p><table><thead><tr><th><strong>分类</strong></th><th><strong>系统调用参数</strong></th><th><strong>相关内核版本</strong></th></tr></thead><tbody><tr><td>Mount namespaces</td><td>CLONE_NEWNS</td><td><a href="http://lwn.net/2001/0301/a/namespaces.php3">Linux 2.4.19</a></td></tr><tr><td>UTS namespaces</td><td>CLONE_NEWUTS</td><td><a href="http://lwn.net/Articles/179345/">Linux 2.6.19</a></td></tr><tr><td>IPC namespaces</td><td>CLONE_NEWIPC</td><td><a href="http://lwn.net/Articles/187274/">Linux 2.6.19</a></td></tr><tr><td>PID namespaces</td><td>CLONE_NEWPID</td><td><a href="http://lwn.net/Articles/259217/">Linux 2.6.24</a></td></tr><tr><td>Network namespaces</td><td>CLONE_NEWNET</td><td><a href="http://lwn.net/Articles/219794/">始于Linux 2.6.24 完成于 Linux 2.6.29</a></td></tr><tr><td>User namespaces</td><td>CLONE_NEWUSER</td><td><a href="http://lwn.net/Articles/528078/">始于 Linux 2.6.23 完成于 Linux 3.8</a></td></tr></tbody></table><p>我们知道，docker容器对于操作系统来讲其实是一个进程，我们可以通过原始的方式来模拟一下容器实现资源隔离的基本原理：</p><p>linux系统中，通常可以通过<code>clone()</code>实现进程创建的系统调用 ，原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">clone</span><span class="hljs-params">(<span class="hljs-type">int</span> (*child_func)(<span class="hljs-type">void</span> *), <span class="hljs-type">void</span> *child_stack, <span class="hljs-type">int</span> flags, <span class="hljs-type">void</span> *arg)</span>;<br><br></code></pre></td></tr></table></figure><ul><li><strong>child_func</strong> : 传入子进程运行的程序主函数。</li><li><strong>child_stack</strong> : 传入子进程使用的栈空间。</li><li><strong>flags</strong> : 表示使用哪些 <code>CLONE_*</code> 标志位。</li><li><strong>args</strong> : 用于传入用户参数。</li></ul><p>示例一：实现进程独立的UTS空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mount.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STACK_SIZE (1024 * 1024)</span><br><span class="hljs-type">static</span> <span class="hljs-type">char</span> container_stack[STACK_SIZE];<br><span class="hljs-type">char</span>* <span class="hljs-type">const</span> container_args[] = &#123;<br>  <span class="hljs-string">&quot;/bin/bash&quot;</span>,<br>  <span class="hljs-literal">NULL</span><br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">container_main</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span><br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Container - inside the container!\n&quot;</span>);<br>  sethostname(<span class="hljs-string">&quot;container&quot;</span>,<span class="hljs-number">10</span>); <span class="hljs-comment">/* 设置hostname */</span><br>  execv(container_args[<span class="hljs-number">0</span>], container_args);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Something&#x27;s wrong!\n&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Parent - start a container!\n&quot;</span>);<br>  <span class="hljs-type">int</span> container_pid = clone(container_main, container_stack+STACK_SIZE, CLONE_NEWUTS | SIGCHLD , <span class="hljs-literal">NULL</span>);<br>  waitpid(container_pid, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Parent - container stopped!\n&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>执行编译并测试：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> gcc <span class="hljs-literal">-o</span> ns_uts ns_uts.c<br><span class="hljs-variable">$</span> ./ns_uts<br><span class="hljs-variable">$</span> hostname<br><br></code></pre></td></tr></table></figure><p>示例二：实现容器独立的进程空间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mount.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STACK_SIZE (1024 * 1024)</span><br><span class="hljs-type">static</span> <span class="hljs-type">char</span> container_stack[STACK_SIZE];<br><span class="hljs-type">char</span>* <span class="hljs-type">const</span> container_args[] = &#123;<br>  <span class="hljs-string">&quot;/bin/bash&quot;</span>,<br>  <span class="hljs-literal">NULL</span><br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">container_main</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span><br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Container [%5d] - inside the container!\n&quot;</span>, getpid());<br>  sethostname(<span class="hljs-string">&quot;container&quot;</span>,<span class="hljs-number">10</span>); <span class="hljs-comment">/* 设置hostname */</span><br>  execv(container_args[<span class="hljs-number">0</span>], container_args);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Something&#x27;s wrong!\n&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Parent [%5d] - start a container!\n&quot;</span>, getpid());<br>  <span class="hljs-type">int</span> container_pid = clone(container_main, container_stack+STACK_SIZE, CLONE_NEWUTS | CLONE_NEWPID | SIGCHLD , <span class="hljs-literal">NULL</span>);<br>  waitpid(container_pid, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Parent - container stopped!\n&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>执行编译并测试：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> gcc <span class="hljs-literal">-o</span> ns_pid ns_pid.c<br><span class="hljs-variable">$</span> ./ns_pid<br><span class="hljs-variable">$</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$</span><span class="hljs-variable">$</span><br><br></code></pre></td></tr></table></figure><p>如何确定进程是否属于同一个namespace：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> ./ns_pid<br>Parent [ <span class="hljs-number">8061</span>] - <span class="hljs-built_in">start</span> a container!<br><span class="hljs-variable">$</span> pstree <span class="hljs-literal">-p</span> <span class="hljs-number">8061</span><br>pid1(<span class="hljs-number">8061</span>)───bash(<span class="hljs-number">8062</span>)───pstree(<span class="hljs-number">8816</span>)<br><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span> <span class="hljs-literal">-l</span> /proc/<span class="hljs-number">8061</span>/ns<br>lrwxrwxrwx <span class="hljs-number">1</span> root root <span class="hljs-number">0</span> Jun <span class="hljs-number">24</span> <span class="hljs-number">12</span>:<span class="hljs-number">51</span> ipc -&gt; ipc:[<span class="hljs-number">4026531839</span>]<br>lrwxrwxrwx <span class="hljs-number">1</span> root root <span class="hljs-number">0</span> Jun <span class="hljs-number">24</span> <span class="hljs-number">12</span>:<span class="hljs-number">51</span> mnt -&gt; mnt:[<span class="hljs-number">4026531840</span>]<br>lrwxrwxrwx <span class="hljs-number">1</span> root root <span class="hljs-number">0</span> Jun <span class="hljs-number">24</span> <span class="hljs-number">12</span>:<span class="hljs-number">51</span> net -&gt; net:[<span class="hljs-number">4026531968</span>]<br>lrwxrwxrwx <span class="hljs-number">1</span> root root <span class="hljs-number">0</span> Jun <span class="hljs-number">24</span> <span class="hljs-number">12</span>:<span class="hljs-number">51</span> pid -&gt; pid:[<span class="hljs-number">4026531836</span>]<br>lrwxrwxrwx <span class="hljs-number">1</span> root root <span class="hljs-number">0</span> Jun <span class="hljs-number">24</span> <span class="hljs-number">12</span>:<span class="hljs-number">51</span> user -&gt; user:[<span class="hljs-number">4026531837</span>]<br>lrwxrwxrwx <span class="hljs-number">1</span> root root <span class="hljs-number">0</span> Jun <span class="hljs-number">24</span> <span class="hljs-number">12</span>:<span class="hljs-number">51</span> uts -&gt; uts:[<span class="hljs-number">4026531838</span>]<br><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span> <span class="hljs-literal">-l</span> /proc/<span class="hljs-number">8062</span>/ns<br>lrwxrwxrwx <span class="hljs-number">1</span> root root <span class="hljs-number">0</span> Jun <span class="hljs-number">24</span> <span class="hljs-number">12</span>:<span class="hljs-number">51</span> ipc -&gt; ipc:[<span class="hljs-number">4026531839</span>]<br>lrwxrwxrwx <span class="hljs-number">1</span> root root <span class="hljs-number">0</span> Jun <span class="hljs-number">24</span> <span class="hljs-number">12</span>:<span class="hljs-number">51</span> mnt -&gt; mnt:[<span class="hljs-number">4026531840</span>]<br>lrwxrwxrwx <span class="hljs-number">1</span> root root <span class="hljs-number">0</span> Jun <span class="hljs-number">24</span> <span class="hljs-number">12</span>:<span class="hljs-number">51</span> net -&gt; net:[<span class="hljs-number">4026531968</span>]<br>lrwxrwxrwx <span class="hljs-number">1</span> root root <span class="hljs-number">0</span> Jun <span class="hljs-number">24</span> <span class="hljs-number">12</span>:<span class="hljs-number">51</span> pid -&gt; pid:[<span class="hljs-number">4026534845</span>]<br>lrwxrwxrwx <span class="hljs-number">1</span> root root <span class="hljs-number">0</span> Jun <span class="hljs-number">24</span> <span class="hljs-number">12</span>:<span class="hljs-number">51</span> user -&gt; user:[<span class="hljs-number">4026531837</span>]<br>lrwxrwxrwx <span class="hljs-number">1</span> root root <span class="hljs-number">0</span> Jun <span class="hljs-number">24</span> <span class="hljs-number">12</span>:<span class="hljs-number">51</span> uts -&gt; uts:[<span class="hljs-number">4026534844</span>]<br><br><span class="hljs-comment">## 发现pid和uts是和父进程使用了不同的ns，其他的则是继承了父进程的命名空间</span><br><br></code></pre></td></tr></table></figure><p>综上：通俗来讲，docker在启动一个容器的时候，会调用Linux Kernel Namespace的接口，来创建一块虚拟空间，创建的时候，可以支持设置下面这几种（可以随意选择）,docker默认都设置。</p><ul><li>pid：用于进程隔离（PID：进程ID）</li><li>net：管理网络接口（NET：网络）</li><li>ipc：管理对 IPC 资源的访问（IPC：进程间通信（信号量、消息队列和共享内存））</li><li>mnt：管理文件系统挂载点（MNT：挂载）</li><li>uts：隔离主机名和域名</li><li>user：隔离用户和用户组</li></ul><h6 id="CGroup-资源限制"><a href="#CGroup-资源限制" class="headerlink" title="CGroup 资源限制"></a>CGroup 资源限制</h6><p>通过namespace可以保证容器之间的隔离，但是无法控制每个容器可以占用多少资源， 如果其中的某一个容器正在执行 CPU 密集型的任务，那么就会影响其他容器中任务的性能与执行效率，导致多个容器相互影响并且抢占资源。如何对多个容器的资源使用进行限制就成了解决进程虚拟资源隔离之后的主要问题。</p><p><img src="/pages_images/Docker/cgroup.png"></p><p>Control Groups（简称 CGroups）就是能够隔离宿主机器上的物理资源，例如 CPU、内存、磁盘 I&#x2F;O 和网络带宽。每一个 CGroup 都是一组被相同的标准和参数限制的进程。而我们需要做的，其实就是把容器这个进程加入到指定的Cgroup中。深入理解CGroup，请<a href="!%5Bimage-20200323195718300%5D(C:%5CUsers%5Cliyongxin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200323195718300.png)">点此</a>。</p><h6 id="UnionFS-联合文件系统"><a href="#UnionFS-联合文件系统" class="headerlink" title="UnionFS 联合文件系统"></a>UnionFS 联合文件系统</h6><p>Linux namespace和cgroup分别解决了容器的资源隔离与资源限制，那么容器是很轻量的，通常每台机器中可以运行几十上百个容器， 这些个容器是共用一个image，还是各自将这个image复制了一份，然后各自独立运行呢？ 如果每个容器之间都是全量的文件系统拷贝，那么会导致至少如下问题：</p><ul><li>运行容器的速度会变慢</li><li>容器和镜像对宿主机的磁盘空间的压力</li></ul><p>怎么解决这个问题——Docker的存储驱动</p><ul><li>镜像分层存储</li><li>UnionFS</li></ul><p>Docker 镜像是由一系列的层组成的，每层代表 Dockerfile 中的一条指令，比如下面的 Dockerfile 文件：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">15.04</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . /app</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> make /app</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> python /app/app.py</span><br><br></code></pre></td></tr></table></figure><p>这里的 Dockerfile 包含4条命令，其中每一行就创建了一层，下面显示了上述Dockerfile构建出来的镜像运行的容器层的结构：</p><p><img src="/pages_images/Docker/container-layers.jpg"></p><p>镜像就是由这些层一层一层堆叠起来的，镜像中的这些层都是只读的，当我们运行容器的时候，就可以在这些基础层至上添加新的可写层，也就是我们通常说的<code>容器层</code>，对于运行中的容器所做的所有更改（比如写入新文件、修改现有文件、删除文件）都将写入这个容器层。</p><p>对容器层的操作，主要利用了写时复制（CoW）技术。CoW就是copy-on-write，表示只在需要写时才去复制，这个是针对已有文件的修改场景。 CoW技术可以让所有的容器共享image的文件系统，所有数据都从image中读取，只有当要对文件进行写操作时，才从image里把要写的文件复制到自己的文件系统进行修改。所以无论有多少个容器共享同一个image，所做的写操作都是对从image中复制到自己的文件系统中的复本上进行，并不会修改image的源文件，且多个容器操作同一个文件，会在每个容器的文件系统里生成一个复本，每个容器修改的都是自己的复本，相互隔离，相互不影响。使用CoW可以有效的提高磁盘的利用率。 </p><p><img src="/pages_images/Docker/sharing-layers.jpg"></p><p><strong>镜像中每一层的文件都是分散在不同的目录中的，如何把这些不同目录的文件整合到一起呢？</strong></p><p>UnionFS 其实是一种为 Linux 操作系统设计的用于把多个文件系统联合到同一个挂载点的文件系统服务。  它能够将不同文件夹中的层联合（Union）到了同一个文件夹中，整个联合的过程被称为联合挂载（Union Mount）。</p><p><img src="/pages_images/Docker/aufs.png"></p><p>上图是AUFS的实现，AUFS是作为Docker存储驱动的一种实现，Docker 还支持了不同的存储驱动，包括 aufs、devicemapper、overlay2、zfs 和  Btrfs 等等，在最新的 Docker 中，overlay2 取代了 aufs 成为了推荐的存储驱动，但是在没有 overlay2 驱动的机器上仍然会使用 aufs 作为 Docker 的默认驱动。 </p><h4 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h4><p>docker容器是一块具有隔离性的虚拟系统，容器内可以有自己独立的网络空间，</p><ul><li>多个容器之间是如何实现通信的呢？</li><li>容器和宿主机之间又是如何实现的通信呢？</li><li>使用-p参数是怎么实现的端口映射?</li></ul><p>带着我们就这些问题，我们来学习一下docker的网络模型，最后我会通过抓包的方式，给大家演示一下数据包在容器和宿主机之间的转换过程。</p><h5 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h5><p>我们在使用docker run创建Docker容器时，可以用–net选项指定容器的网络模式，Docker有以下4种网络模式：</p><ul><li><p>bridge模式，使用–net&#x3D;bridge指定，默认设置</p></li><li><p>host模式，使用–net&#x3D;host指定，容器内部网络空间共享宿主机的空间，效果类似直接在宿主机上启动一个进程，端口信息和宿主机共用</p></li><li><p>container模式，使用–net&#x3D;container:NAME_or_ID指定</p><p>指定容器与特定容器共享网络命名空间</p></li><li><p>none模式，使用–net&#x3D;none指定</p><p>网络模式为空，即仅保留网络命名空间，但是不做任何网络相关的配置(网卡、IP、路由等)</p></li></ul><h5 id="bridge模式"><a href="#bridge模式" class="headerlink" title="bridge模式"></a>bridge模式</h5><p>那我们之前在演示创建docker容器的时候其实是没有指定的网络模式的，如果不指定的话默认就会使用bridge模式，bridge本意是桥的意思，其实就是网桥模式。</p><p>那我们怎么理解网桥，如果需要做类比的话，我们可以把网桥看成一个二层的交换机设备，我们来看下这张图：</p><p>交换机通信简图</p><p><img src="/pages_images/Docker/%E4%BA%A4%E6%8D%A2%E6%9C%BA.png"></p><p>网桥模式示意图</p><p><img src="/pages_images/Docker/docker-bridge.jpeg"></p><p>Linux 中，能够起到<strong>虚拟交换机作用</strong>的网络设备，是网桥（Bridge）。它是一个工作在<strong>数据链路层</strong>（Data Link）的设备，主要功能是<strong>根据 MAC 地址将数据包转发到网桥的不同端口上</strong>。 网桥在哪，查看网桥</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> yum install <span class="hljs-literal">-y</span> bridge<span class="hljs-literal">-utils</span><br><span class="hljs-variable">$</span> brctl show<br>bridge name     bridge id               STP enabled     interfaces<br>docker0         <span class="hljs-number">8000.0242</span>b5fbe57b       no              veth3a496ed<br><br></code></pre></td></tr></table></figure><p>有了网桥之后，那我们看下docker在启动一个容器的时候做了哪些事情才能实现容器间的互联互通</p><p>Docker 创建一个容器的时候，会执行如下操作：</p><ul><li>创建一对虚拟接口&#x2F;网卡，也就是veth pair；</li><li>本地主机一端桥接 到默认的 docker0 或指定网桥上，并具有一个唯一的名字，如 veth9953b75；</li><li>容器一端放到新启动的容器内部，并修改名字作为 eth0，这个网卡&#x2F;接口只在容器的命名空间可见；</li><li>从网桥可用地址段中（也就是与该bridge对应的network）获取一个空闲地址分配给容器的 eth0</li><li>配置默认路由到网桥</li></ul><p>那整个过程其实是docker自动帮我们完成的，清理掉所有容器，来验证。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 清掉所有容器</span><br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> `docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-aq</span>`<br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">ps</span><br><span class="hljs-variable">$</span> brctl show <span class="hljs-comment"># 查看网桥中的接口，目前没有</span><br><br><span class="hljs-comment">## 创建测试容器test1</span><br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">--name</span> test1 nginx:alpine<br><span class="hljs-variable">$</span> brctl show <span class="hljs-comment"># 查看网桥中的接口，已经把test1的veth端接入到网桥中</span><br><span class="hljs-variable">$</span> ip a |grep veth <span class="hljs-comment"># 已在宿主机中可以查看到</span><br><span class="hljs-variable">$</span> docker exec <span class="hljs-literal">-ti</span> test1 sh <br>/ <span class="hljs-comment"># ifconfig  # 查看容器的eth0网卡及分配的容器ip</span><br><br><span class="hljs-comment"># 再来启动一个测试容器，测试容器间的通信</span><br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">--name</span> test2 nginx:alpine<br><span class="hljs-variable">$</span> docker exec <span class="hljs-literal">-ti</span> test2 sh<br>/ <span class="hljs-comment"># sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&#x27; /etc/apk/repositories</span><br>/ <span class="hljs-comment"># apk add curl</span><br>/ <span class="hljs-comment"># curl 172.17.0.8:80</span><br><br><span class="hljs-comment">## 为啥可以通信？</span><br>/ <span class="hljs-comment"># route -n  # </span><br>Kernel IP routing table<br>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br><span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>         <span class="hljs-number">172.17</span>.<span class="hljs-number">0.1</span>      <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>         UG    <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> eth0<br><span class="hljs-number">172.17</span>.<span class="hljs-number">0.0</span>      <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>         <span class="hljs-number">255.255</span>.<span class="hljs-number">0.0</span>     U     <span class="hljs-number">0</span>      <span class="hljs-number">0</span>        <span class="hljs-number">0</span> eth0<br><br><span class="hljs-comment"># eth0 网卡是这个容器里的默认路由设备；所有对 172.17.0.0/16 网段的请求，也会被交给 eth0 来处理（第二条 172.17.0.0 路由规则），这条路由规则的网关（Gateway）是 0.0.0.0，这就意味着这是一条直连规则，即：凡是匹配到这条规则的 IP 包，应该经过本机的 eth0 网卡，通过二层网络(数据链路层)直接发往目的主机。</span><br><br><span class="hljs-comment"># 而要通过二层网络到达 test1 容器，就需要有 172.17.0.8 这个 IP 地址对应的 MAC 地址。所以test2容器的网络协议栈，就需要通过 eth0 网卡发送一个 ARP 广播，来通过 IP 地址查找对应的 MAC 地址。</span><br><br><span class="hljs-comment">#这个 eth0 网卡，是一个 Veth Pair，它的一端在这个 test2 容器的 Network Namespace 里，而另一端则位于宿主机上（Host Namespace），并且被“插”在了宿主机的 docker0 网桥上。网桥设备的一个特点是插在桥上的网卡都会被当成桥上的一个端口来处理，而端口的唯一作用就是接收流入的数据包，然后把这些数据包的“生杀大权”（比如转发或者丢弃），全部交给对应的网桥设备处理。</span><br><br><span class="hljs-comment"># 因此ARP的广播请求也会由docker0来负责转发，这样网桥就维护了一份端口与mac的信息表，因此针对test2的eth0拿到mac地址后发出的各类请求，同样走到docker0网桥中由网桥负责转发到对应的容器中。</span><br><br><span class="hljs-comment"># 网桥会维护一份mac映射表，我们可以大概通过命令来看一下，</span><br><span class="hljs-variable">$</span> brctl showmacs docker0<br><span class="hljs-comment">## 这些mac地址是主机端的veth网卡对应的mac，可以查看一下</span><br><span class="hljs-variable">$</span> ip a <br><br><br></code></pre></td></tr></table></figure><p><img src="/pages_images/Docker/bridge-network.png"></p><p>我们如何知道网桥上的这些虚拟网卡与容器端是如何对应？</p><p>通过ifindex，网卡索引号</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 查看test1容器的网卡索引</span><br><span class="hljs-variable">$</span> docker exec <span class="hljs-literal">-ti</span> test1 <span class="hljs-built_in">cat</span> /sys/<span class="hljs-class"><span class="hljs-keyword">class</span>/<span class="hljs-title">net</span>/<span class="hljs-title">eth0</span>/<span class="hljs-title">ifindex</span></span><br><span class="hljs-class"></span><br><span class="hljs-class">## 主机中找到虚拟网卡后面这个@<span class="hljs-title">ifxx</span>的值，如果是同一个值，说明这个虚拟网卡和这个容器的<span class="hljs-title">eth0</span>网卡是配对的。</span><br><span class="hljs-class">$ <span class="hljs-title">ip</span> <span class="hljs-title">a</span> |<span class="hljs-title">grep</span> @<span class="hljs-title">if</span></span><br><span class="hljs-class"></span><br></code></pre></td></tr></table></figure><p>整理脚本，快速查看对应：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-keyword">for</span> container <span class="hljs-keyword">in</span> <span class="hljs-variable">$</span>(docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-q</span>); <span class="hljs-keyword">do</span><br>    iflink=`docker exec <span class="hljs-literal">-it</span> <span class="hljs-variable">$container</span> sh <span class="hljs-literal">-c</span> <span class="hljs-string">&#x27;cat /sys/class/net/eth0/iflink&#x27;</span>`<br>    iflink=`echo <span class="hljs-variable">$iflink</span>|tr <span class="hljs-literal">-d</span> <span class="hljs-string">&#x27;\r&#x27;</span>`<br>    veth=`grep <span class="hljs-literal">-l</span> <span class="hljs-variable">$iflink</span> /sys/<span class="hljs-class"><span class="hljs-keyword">class</span>/<span class="hljs-title">net</span>/<span class="hljs-title">veth</span>*/<span class="hljs-title">ifindex</span>`</span><br><span class="hljs-class">    <span class="hljs-title">veth</span>=`<span class="hljs-title">echo</span> $<span class="hljs-title">veth</span>|<span class="hljs-title">sed</span> -<span class="hljs-title">e</span> &#x27;<span class="hljs-title">s</span>;^.*<span class="hljs-title">net</span>/\(.*\)/<span class="hljs-title">ifindex</span>$;\1;&#x27;`</span><br><span class="hljs-class">    <span class="hljs-title">echo</span> $<span class="hljs-title">container</span>:$<span class="hljs-title">veth</span></span><br><span class="hljs-class"><span class="hljs-title">done</span></span><br><span class="hljs-class"></span><br></code></pre></td></tr></table></figure><p>上面我们讲解了容器之间的通信，那么容器与宿主机的通信是如何做的？</p><p>添加端口映射：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 启动容器的时候通过-p参数添加宿主机端口与容器内部服务端口的映射</span><br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">--name</span> test <span class="hljs-literal">-d</span> <span class="hljs-literal">-p</span> <span class="hljs-number">8088</span>:<span class="hljs-number">80</span> nginx:alpine<br><span class="hljs-variable">$</span> <span class="hljs-built_in">curl</span> localhost:<span class="hljs-number">8088</span><br><br></code></pre></td></tr></table></figure><p><img src="/pages_images/Docker/docker-bridge.jpeg"></p><p>端口映射如何实现的？先来回顾iptables链表图</p><p><img src="/pages_images/Docker/iptables.png"></p><p>访问本机的8088端口，数据包会从流入方向进入本机，因此涉及到PREROUTING和INPUT链，我们是通过做宿主机与容器之间加的端口映射，所以肯定会涉及到端口转换，那哪个表是负责存储端口转换信息的呢，就是nat表，负责维护网络地址转换信息的。因此我们来查看一下PREROUTING链的nat表：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> iptables <span class="hljs-literal">-t</span> nat <span class="hljs-literal">-nvL</span> PREROUTING<br>Chain PREROUTING (policy ACCEPT <span class="hljs-number">159</span> packets, <span class="hljs-number">20790</span> bytes)<br> pkts bytes target     prot opt <span class="hljs-keyword">in</span>     out     source               destination<br>    <span class="hljs-number">3</span>   <span class="hljs-number">156</span> DOCKER     all  <span class="hljs-literal">--</span>  *      *       <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span>            ADDRTYPE match dst<span class="hljs-literal">-type</span> LOCAL<br><br></code></pre></td></tr></table></figure><p>规则利用了iptables的addrtype拓展，匹配网络类型为本地的包，如何确定哪些是匹配本地，</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> ip route show table local <span class="hljs-built_in">type</span> local<br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">8</span> dev lo proto kernel scope host src <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> dev lo proto kernel scope host src <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-number">172.17</span>.<span class="hljs-number">0.1</span> dev docker0 proto kernel scope host src <span class="hljs-number">172.17</span>.<span class="hljs-number">0.1</span><br><span class="hljs-number">192.168</span>.<span class="hljs-number">136.10</span> dev eth0 proto kernel scope host src <span class="hljs-number">192.168</span>.<span class="hljs-number">136.10</span><br><br></code></pre></td></tr></table></figure><p>也就是说目标地址类型匹配到这些的，会转发到我们的TARGET中，TARGET是动作，意味着对符合要求的数据包执行什么样的操作，最常见的为ACCEPT或者DROP，此处的TARGET为DOCKER，很明显DOCKER不是标准的动作，那DOCKER是什么呢？我们通常会定义自定义的链，这样把某类对应的规则放在自定义链中，然后把自定义的链绑定到标准的链路中，因此此处DOCKER 是自定义的链。那我们现在就来看一下DOCKER这个自定义链上的规则。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> iptables <span class="hljs-literal">-t</span> nat <span class="hljs-literal">-nvL</span> DOCKER<br>Chain DOCKER (<span class="hljs-number">2</span> references)                                                                                                <br> pkts bytes target     prot opt <span class="hljs-keyword">in</span>     out     source               destination                                            <br>    <span class="hljs-number">0</span>     <span class="hljs-number">0</span> <span class="hljs-keyword">RETURN</span>     all  <span class="hljs-literal">--</span>  docker0 *       <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span>                                             <br>    <span class="hljs-number">0</span>     <span class="hljs-number">0</span> DNAT       tcp  <span class="hljs-literal">--</span>  !docker0 *       <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span>            tcp dpt:<span class="hljs-number">8088</span> to:<span class="hljs-number">172.17</span>.<span class="hljs-number">0.2</span>:<span class="hljs-number">80</span> <br><br><br></code></pre></td></tr></table></figure><p>此条规则就是对主机收到的目的端口为8088的tcp流量进行DNAT转换，将流量发往172.17.0.2:80，172.17.0.2地址是不是就是我们上面创建的Docker容器的ip地址，流量走到网桥上了，后面就走网桥的转发就ok了。<br>所以，外界只需访问192.168.136.133:8088就可以访问到容器中的服务了。</p><p> 数据包在出口方向走POSTROUTING链，我们查看一下规则：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> iptables <span class="hljs-literal">-t</span> nat <span class="hljs-literal">-nvL</span> POSTROUTING<br>Chain POSTROUTING (policy ACCEPT <span class="hljs-number">1099</span> packets, <span class="hljs-number">67268</span> bytes)<br> pkts bytes target     prot opt <span class="hljs-keyword">in</span>     out     source               destination<br>   <span class="hljs-number">86</span>  <span class="hljs-number">5438</span> MASQUERADE  all  <span class="hljs-literal">--</span>  *      !docker0  <span class="hljs-number">172.17</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">16</span>        <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span><br>    <span class="hljs-number">0</span>     <span class="hljs-number">0</span> MASQUERADE  tcp  <span class="hljs-literal">--</span>  *      *       <span class="hljs-number">172.17</span>.<span class="hljs-number">0.4</span>           <span class="hljs-number">172.17</span>.<span class="hljs-number">0.4</span>           tcp dpt:<span class="hljs-number">80</span><br><br></code></pre></td></tr></table></figure><p>大家注意MASQUERADE这个动作是什么意思，其实是一种更灵活的SNAT，把源地址转换成主机的出口ip地址，那解释一下这条规则的意思:</p><p>这条规则会将源地址为172.17.0.0&#x2F;16的包（也就是从Docker容器产生的包），并且不是从docker0网卡发出的，进行源地址转换，转换成主机网卡的地址。大概的过程就是ACK的包在容器里面发出来，会路由到网桥docker0，网桥根据宿主机的路由规则会转给宿主机网卡eth0，这时候包就从docker0网卡转到eth0网卡了，并从eth0网卡发出去，这时候这条规则就会生效了，把源地址换成了eth0的ip地址。</p><blockquote><p>注意一下，刚才这个过程涉及到了网卡间包的传递，那一定要打开主机的ip_forward转发服务，要不然包转不了，服务肯定访问不到。</p></blockquote><h6 id="抓包演示"><a href="#抓包演示" class="headerlink" title="抓包演示"></a>抓包演示</h6><p>我们先想一下，我们要抓哪个网卡的包</p><ul><li><p>首先访问宿主机的8088端口，我们抓一下宿主机的eth0</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> tcpdump <span class="hljs-literal">-i</span> eth0 port <span class="hljs-number">8088</span> <span class="hljs-literal">-w</span> host.cap<br><br></code></pre></td></tr></table></figure></li><li><p>然后最终包会流入容器内，那我们抓一下容器内的eth0网卡</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 容器内安装一下tcpdump</span><br><span class="hljs-variable">$</span> sed <span class="hljs-literal">-i</span> <span class="hljs-string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&#x27;</span> /etc/apk/repositories<br><span class="hljs-variable">$</span> apk add tcpdump<br><span class="hljs-variable">$</span> tcpdump <span class="hljs-literal">-i</span> eth0 port <span class="hljs-number">80</span> <span class="hljs-literal">-w</span> container.cap<br><br></code></pre></td></tr></table></figure></li></ul><p>到另一台机器访问一下，</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">curl</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">136.10</span>:<span class="hljs-number">8088</span>/<br><br></code></pre></td></tr></table></figure><p>停止抓包，拷贝容器内的包到宿主机</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker <span class="hljs-built_in">cp</span> test:/root/container.cap /root/<br><br></code></pre></td></tr></table></figure><p>把抓到的内容拷贝到本地，使用wireshark进行分析。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> scp root@<span class="hljs-number">192.168</span>.<span class="hljs-number">136.10</span>:/root/*.cap /d/packages<br><br></code></pre></td></tr></table></figure><p>（wireshark合并包进行分析）</p><p><img src="/pages_images/Docker/docker-dnat.jpeg"></p><p><img src="/pages_images/Docker/docker-snat.jpeg"></p><p>进到容器内的包做DNAT，出去的包做SNAT，这样对外面来讲，根本就不知道机器内部是谁提供服务，其实这就和一个内网多个机器公用一个外网IP地址上网的效果是一样的，那这也属于NAT功能的一个常见的应用场景。</p><h5 id="Host模式"><a href="#Host模式" class="headerlink" title="Host模式"></a>Host模式</h5><p>容器内部不会创建网络空间，共享宿主机的网络空间。比如直接通过host模式创建mysql容器：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker run <span class="hljs-literal">--net</span> host <span class="hljs-literal">-d</span> <span class="hljs-literal">--name</span> mysql <span class="hljs-literal">-e</span> MYSQL_ROOT_PASSWORD=<span class="hljs-number">123456</span> mysql:<span class="hljs-number">5.7</span><br><br></code></pre></td></tr></table></figure><p>容器启动后，会默认监听3306端口，由于网络模式是host，因为可以直接通过宿主机的3306端口进行访问服务，效果等同于在宿主机中直接启动mysqld的进程。</p><h5 id="Conatiner模式"><a href="#Conatiner模式" class="headerlink" title="Conatiner模式"></a>Conatiner模式</h5><p>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。 </p><p><img src="/pages_images/Docker/docker-network-container.jpeg"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 启动测试容器，共享mysql的网络空间</span><br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">-ti</span> <span class="hljs-literal">--rm</span> <span class="hljs-literal">--net</span>=container:mysql busybox sh<br>/ <span class="hljs-comment"># ip a</span><br>/ <span class="hljs-comment"># netstat -tlp|grep 3306</span><br>/ <span class="hljs-comment"># telnet localhost 3306</span><br><br></code></pre></td></tr></table></figure><p>在一些特殊的场景中非常有用，例如，kubernetes的pod，kubernetes为pod创建一个基础设施容器，同一pod下的其他容器都以container模式共享这个基础设施容器的网络命名空间，相互之间以localhost访问，构成一个统一的整体。</p><h4 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h4><ol><li><p>清理主机上所有退出的容器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker <span class="hljs-built_in">rm</span>  <span class="hljs-variable">$</span>(docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-aq</span>)<br></code></pre></td></tr></table></figure></li><li><p>调试或者排查容器启动错误</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 若有时遇到容器启动失败的情况，可以先使用相同的镜像启动一个临时容器，先进入容器</span><br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">--rm</span> <span class="hljs-literal">-ti</span> &lt;image_id&gt; sh<br><span class="hljs-comment">## 进入容器后，手动执行该容器对应的ENTRYPOINT或者CMD命令，这样即使出错，容器也不会退出，因为bash作为1号进程，我们只要不退出容器，该容器就不会自动退出</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h4><ol><li><p>为了解决软件交付过程中的环境依赖，同时提供一种更加轻量的虚拟化技术，Docker出现了。</p></li><li><p>2013年诞生，15年开始迅速发展，从17.03月开始，使用时间日期管理版本，稳定版以每季度为准。</p></li><li><p>Docker是一种CS架构的软件产品，可以把代码及依赖打包成镜像，作为交付介质，并且把镜像启动成为容器，提供容器生命周期的管理。</p></li><li><p>使用yum部署docker，启动后通过操作docker这个命令行，自动调用docker daemon完成容器相关操作。</p></li><li><p>常用操作，围绕<code>镜像|容器|仓库</code>三大核心要素</p><ul><li>systemctl  start|stop|restart docker</li><li>docker build | pull  -&gt; docker tag -&gt; docker push</li><li>docker run –name my-demo  -d  -p 8080:80 -v  &#x2F;opt&#x2F;data:&#x2F;data  demo:v20200327 ping xx.com</li><li>docker cp  &#x2F;path&#x2F;a.txt  mycontainer:&#x2F;opt</li><li>docker exec -ti  mycontainer  &#x2F;bin&#x2F;sh</li><li>docker logs -f –tail&#x3D;100 mycontainer</li></ul></li><li><p>通过dockerfile构建业务镜像，先使用基础镜像，然后通过一系列的指令把我们的业务应用所需要的运行环境和依赖都打包到镜像中，然后通过CMD或者ENTRYPOINT指令把镜像启动时的入口制定好，完成封装即可。有点类似于，先找来一个集装箱模板(基础镜像)，然后把项目依赖的服务都扔到集装箱中，然后设置好服务的启动入口，关闭箱门，即完成了业务镜像的制作。</p></li><li><p>容器的实现依赖于内核模块提供的namespace和control-group的功能，通过namespace创建一块虚拟空间，空间内实现了各类资源(进程、网络、文件系统)的隔离，提供control-group实现了对隔离的空间的资源使用的限制。</p></li><li><p>docker镜像使用分层的方式进行存储，根据主机的存储驱动的不同，实现方式会不同，kernel在3.10.0-514以上自动支持overlay2 存储驱动，也是目前Docker推荐的方式。</p></li><li><p>得益于分层存储的模式，多个容器可以通过copy-on-write的策略，在镜像的最上层加一个可写层，同时利用存储驱动的UnionFS的能力，实现一个镜像快速启动多个容器的场景。</p></li><li><p>docker的网络模式分为4种，最常用的为bridge和host模式。bridge模式通过docker0网桥，启动容器的时候通过创建一对虚拟网卡，将容器连接在桥上，同时维护了虚拟网卡与网桥端口的关系，实现容器间的通信。容器与宿主机之间的通信通过iptables端口映射的方式，docker利用iptables的PREROUTING和POSTROUTING的nat功能，实现了SNAT与DNAT，使得容器内部的服务被完美的保护起来。</p></li><li><p>本章重点内容是docker的核心要素及基础的操作，实现原理以及docker的网络模式为选修包，目的为了帮助有docker基础及经验的同学更好的进一步理解docker。</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Golang核心编程</title>
    <link href="/2021/05/30/Golang%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/"/>
    <url>/2021/05/30/Golang%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Go语言开篇介绍"><a href="#Go语言开篇介绍" class="headerlink" title="Go语言开篇介绍"></a>Go语言开篇介绍</h1><p>Go语言 是Google公司 在2007开发一种静态强类型、编译型语言，并在 2009 年正式对外发布。</p><p>Go语言以其近C的执行性能和近解析型语言的开发效率，以及近乎于完美的编译速度，已经风靡全球。很多人将Go语言称为21世纪的C语言，因为Go不仅拥有C的简洁和性能，而且针对多处理器系统应用程序的编程进行了优化，很好的提供了21世纪互联网环境下服务端开发的各种实用特性。</p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-23%2023.59.38-8591994.png" alt="截屏2022-07-23 23.59.38"></p><h2 id="Go语言的诞生"><a href="#Go语言的诞生" class="headerlink" title="Go语言的诞生"></a>Go语言的诞生</h2><p>事件起源于2007年9月，当时 C++委员会正在 Google 对 C++ 语言新增加的<strong>35个新的特性</strong>进行一场分享演讲。</p><p>Google 的技术大神们也在认真听讲座，其中就有Go语言的三个创作者，分别是： Robert Griesemer（罗伯特.格利茨默），Rob Pike（罗伯.派克），Ken Thompson（肯.汤普森）。</p><p><img src="/pages_images/Go/image-20210601130737782.png" alt="image-20210601130737782"></p><blockquote><ul><li><p>Rob Pike（罗伯.派克）</p><p>罗布·派克是Unix的先驱，是<a href="https://baike.baidu.com/item/%E8%B4%9D%E5%B0%94%E5%AE%9E%E9%AA%8C%E5%AE%A4/686816">贝尔实验室</a>最早和Ken Thompson以及 Dennis M. Ritche（C语言之父） 开发Unix的猛人，UTF-8的设计人。让人佩服不已的是，罗伯伯还是1980年奥运会射箭的银牌得主。</p></li><li><p>Ken Thompson（肯.汤普森）</p><p>Ken Thompson，C语言前身B语言的作者，与Dennis Ritchie是Unix的原创者。1983年图灵奖得主以及1998年美国国家技术奖（National Medal of Technology）得主。</p></li><li><p>Robert Griesemer（罗伯特.格利茨默）</p><p>参与制作了Java的HotSpot编译器以及Chrome浏览器的javascript的搜索引擎V8。</p></li></ul></blockquote><p>随着会议的中场休息，大家开始了对这些 <strong>C++ 语言新特性</strong>是否带来更多的价值进行吐槽。Rob Pike他们认为：<strong>简化语言的成就远大于添加功能</strong>。于是，一门新的语言，Go，在这个思路下应运而生。</p><p>2007 年 9 月 25 号，Rob Pike在回家的路上得到关于新语言名字的灵感，于是给另外两人发邮件：</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20190327/0a255439c0f441a7bcc63e3c78601351.jpeg" alt="img"></p><p>邮件正文大意为：</p><blockquote><p>在开车回家的路上我得到了些灵感。</p><p>1.给这门编程语言取名为“go”，它很简短，易书写。工具类可以命名为：goc、 gol、goa。</p><p>交互式的调试工具也可以直接命名为“go”。语言文件后缀名为 .go 等等</p></blockquote><p>这就是 Go 语言名字的来源，自此之后 Robert、Rob 和 Ken 三个人开始在 Google 内部进行了研发，一直到了 2009 年，Go 正式开源了，Go 项目团队将 2009 年 11 月 10 日，即该语言正式对外开源的日字作为其官方生日。源代码最初托管在 <a href="http://code.google.com/">http://code.google.com</a> 上，之后几年才逐步的迁移到 GitHub 上。</p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-24%2007.34.20-8620011.png" alt="截屏2022-07-24 07.34.20"></p><h2 id="Go语言的版本"><a href="#Go语言的版本" class="headerlink" title="Go语言的版本"></a>Go语言的版本</h2><blockquote><p>Go 1.0 — 2012 年 3 月：Go 的第一个版本，带着一份兼容性说明文档来保证与未来发布版本的兼容性，进而不会破坏已有的程序。</p><p>Go 1.1 — 2013 年 5 月：这个 Go 版本专注于优化语言（编译器，gc，map，go 调度器）和提升它的性能。</p><p>Go 1.3 — 2014 年 6 月：这个版本对栈管理做了重要的改进。栈可以申请[连续的内存片段，提高了分配的效率</p><p>Go 1.4 — 2014 年 12 月：此版本带来了官方对 Android 的支持，让我们可以只用 Go 代码就能写出简单的 Android 程序。</p><p>Go 1.7 — 2016 年 8 月: 这个版本发布了context 包，为用户提供了处理超时和任务取消的方法。</p><p>Go 1.11 — 2018 年 8 月: Go 1.11 带来了一个重要的新功能：Go modules。</p></blockquote><h2 id="Go语言的优势"><a href="#Go语言的优势" class="headerlink" title="Go语言的优势"></a>Go语言的优势</h2><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-24%2007.18.27-8618378.png" alt="截屏2022-07-24 07.18.27"></p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-24%2007.29.21-8618975.png" alt="截屏2022-07-24 07.29.21"></p><h2 id="Go语言的应用领域"><a href="#Go语言的应用领域" class="headerlink" title="Go语言的应用领域"></a>Go语言的应用领域</h2><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-24%2007.56.06-8620580.png" alt="截屏2022-07-24 07.56.06"></p><p>使用Go的大型互联网公司</p><p><img src="/pages_images/Go/%E4%BD%BF%E7%94%A8Go%E7%9A%84%E4%BA%92%E8%81%94%E7%BD%91%E5%85%AC%E5%8F%B8-1622538812909.png" alt="使用Go的互联网公司"></p><p>Go语言的强项在于它适合用来开发网络并发方面的服务，比如消息推送、监控、容器等，所以在高并发的项目上大多数公司会优先选择 Golang 作为开发语言。另外一个应用就是对一些python，php或者java项目进行重构。</p><p>介绍完Go语言，那么接下来我们就可以正式进入Golang的学习了。</p><h1 id="一、计算机基础"><a href="#一、计算机基础" class="headerlink" title="一、计算机基础"></a>一、计算机基础</h1><p>计算机（computer）俗称电脑，是现代一种用于高速计算的电子计算机器，可以进行数值计算，又可以进行逻辑计算，还具有存储记忆功能。是能够按照程序运行，自动、高速处理海量数据的现代化智能电子设备。</p><p>计算机是20世纪最先进的科学技术发明之一，对人类的生产活动和社会活动产生了极其重要的影响。它的应用领域从最初的军事科研应用扩展到社会的各个领域，已形成了规模巨大的计算机产业，带动了全球范围的技术进步，由此引发了深刻的社会变革。</p><p><img src="/pages_images/Go/u=3569666097,3164525901&fm=253&fmt=auto&app=120&f=JPEG.jpeg" alt="img"></p><h2 id="1-1、计算机硬件组成"><a href="#1-1、计算机硬件组成" class="headerlink" title="1.1、计算机硬件组成"></a>1.1、计算机硬件组成</h2><ul><li><strong>CPU</strong></li></ul><p>其中，CPU包括运算器和控制器，相当于计算机的大脑，是计算机的运算核心和控制核心。</p><p><img src="/pages_images/Go/cpu2.jpg"></p><p>(1) 运算器是用来进行数据运算加工的。</p><p>(2) 控制器是是计算机的指挥中心，负责决定执行程序的顺序，给出执行指令时机器各部件所需要的操作控制命令，用于协调和控制计算机的运行。</p><ul><li><strong>存储器</strong></li></ul><p>储存器可分为内储存器和外储存器两部分：内存属于内储存器，内存是CPU与硬盘之间的桥梁，只负责在CPU与硬盘之间做数据预存加速的功能。断电后即会被清除。输入设备的数据是从设备接口进去到端口缓冲器的，再经主板的输入输出总线（I&#x2F;O总线）直接到CPU的，不经过内存。</p><p><img src="/pages_images/Go/image-20210412133337911-1618215970205.png" alt="image-20210412133337911"> </p><p>外储存器是指除计算机内存及CPU缓存以外的储存器，此类储存器一般断电后仍然能保存数据。常见的外存储器有硬盘、软盘、光盘、U盘等。</p><p><img src="/pages_images/Go/image-20210412133939847-1618215970206.png" alt="image-20210412133939847"></p><ul><li><strong>输入输出设备</strong></li></ul><p>输入设备就是键盘、鼠标、麦克风、扫描仪等等，向电脑输入信息。输入设备则相反，电脑向外部输出信息，如显示器、打印、音像、写入外存等。</p><h2 id="1-2、冯-诺伊曼计算机"><a href="#1-2、冯-诺伊曼计算机" class="headerlink" title="1.2、冯-诺伊曼计算机"></a>1.2、冯-诺伊曼计算机</h2><p><img src="/pages_images/Go/image-20210406113742869-1618215970206.png" alt="image-20210406113742869"></p><p>提到计算机，就不得不提及在计算机的发展史上做出杰出贡献的著名应用数学家冯诺依曼(Von Neumann，是他带领专家提出了一个全新的存储程序的通用电子计算机方案。这个方案规定了新机器由5个部分组成:<strong>运算器、逻辑控制装置、存储器、输入和输出</strong>。并描述了这5个部分的职能和相互关系。</p><p>早期的ENIAC有一个致命的缺点就是程序与计算两分离。在埃历阿克ENIAC尚未投入运行前，冯·诺依曼就已开始着手起草一份新的设计报告，要对这台电子计算机进行脱胎换骨的改造。他把新机器的方案命名为“离散变量自动电子计算机”，英文缩写译音是“埃德瓦克”（EDVAC）。1945年6月，冯·诺依曼与戈德斯坦、勃克斯等人，为埃德瓦克方案联名发表了一篇长达101页纸洋洋万言的报告，即计算机史上著名的“101页报告”。这份报告奠定了现代电脑体系结构坚实的根基，直到今天，仍然被认为是现代电脑科学发展里程碑式的文献。报告明确规定出计算机的五大部件<strong>（输入系统、输出系统、存储器、运算器、控制器）</strong>，并用<strong>二进制替代十进制运算</strong>，大大方便了机器的电路设计。埃德瓦克方案的革命意义在于<strong>“存储程序”</strong>──程序也被当作数据存进了机器内部，以便电脑能自动依次执行指令，再也不必去接通什么线路。<br>　　人们后来把根据这一方案思想设计的机器统称为“诺依曼机”。自冯·诺依曼设计的埃德瓦克始，直到今天我们用“奔腾”芯片制作的多媒体计算机为止，电脑一代又一代的“传人”，大大小小千千万万台计算机，都没能够跳出诺依曼机的掌心。在这个意义上，冯·诺依曼是当之无愧的“计算机之父”。而</p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-23%2023.50.15-8591532.png" alt="截屏2022-07-23 23.50.15"></p><blockquote><p>总线（Bus）是计算机各种功能部件之间传送信息的公共通信干线，它是由<a href="https://baike.baidu.com/item/%E5%AF%BC%E7%BA%BF/1413914">导线</a>组成的传输线束， 按照计算机所传输的信息种类，计算机的总线可以划分为<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%80%BB%E7%BA%BF/272650">数据总线</a>、<a href="https://baike.baidu.com/item/%E5%9C%B0%E5%9D%80%E6%80%BB%E7%BA%BF/4307936">地址总线</a>和<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E6%80%BB%E7%BA%BF/272568">控制总线</a>，分别用来传输数据、数据地址和<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E4%BF%A1%E5%8F%B7/10329713">控制信号</a>。总线是一种内部结构，它是<code>cpu</code>、内存、输入、<a href="https://baike.baidu.com/item/%E8%BE%93%E5%87%BA%E8%AE%BE%E5%A4%87/10823333">输出设备</a>传递信息的公用通道，<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA/455151">主机</a>的各个部件通过总线相连接，<a href="https://baike.baidu.com/item/%E5%A4%96%E9%83%A8%E8%AE%BE%E5%A4%87">外部设备</a>通过相应的接口电路再与总线相连接，从而形成了<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E7%B3%BB%E7%BB%9F/8092895">计算机硬件系统</a>。</p></blockquote><h1 id="二、编程语言介绍"><a href="#二、编程语言介绍" class="headerlink" title="二、编程语言介绍"></a>二、编程语言介绍</h1><h2 id="2-1、什么是编程语言"><a href="#2-1、什么是编程语言" class="headerlink" title="2.1、什么是编程语言"></a>2.1、什么是编程语言</h2><p>编程语言是用来控制计算机的一系列指令（Instruction），它有固定的格式和词汇（不同编程语言的格式和词汇不一样）。就像我们中国人之间沟通需要汉语，英国人沟通需要英语一样，人与计算机之间进行沟通需要一门语言作为介质，即编程语言。</p><p>编程语言的发展经历了机器语言（指令系统）&#x3D;&gt;汇编语言&#x3D;&gt;高级语言（<code>C、java、Go</code>等）。</p><p>010010101001-》ADD</p><ul><li>计算机在设计中规定了一组指令（二级制代码），这组指令的集和就是所谓的机器指令系统，用机器指令形式编写的程序称为机器语言。</li><li>但由于机器语言的千上万条指令难以记忆，并且维护性和移植性都很差，所以在机器语言的基础上，人们提出了采用字符和十进制数代替二进制代码，于是产生了将机器语言符号化的汇编语言。</li><li>虽然汇编语言相较于机器语言简单了很多，但是汇编语言是机器指令的符号化，与机器指令存在着直接的对应关系，无论是学习还是开发，难度依然很大。所以更加接近人类语言，也更容易理解和修改的高级语言就应运而生了，高级语言的一条语法往往可以代替几条、几十条甚至几百条汇编语言的指令。因此，高级语言易学易用，通用性强，应用广泛。</li></ul><h2 id="2-2、编译型语言与解释性语言"><a href="#2-2、编译型语言与解释性语言" class="headerlink" title="2.2、编译型语言与解释性语言"></a>2.2、编译型语言与解释性语言</h2><p>计算机是不能理解高级语言的，更不能直接执行高级语言，它只能直接理解机器语言，所以使用任何高级语言编写的程序若想被计算机运行，都必须将其转换成计算机语言，也就是机器码。而这种转换的方式分为编译和解释两种。由此高级语言也分为编译型语言和解释型语言。</p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-23%2023.39.38-8590805.png" alt="截屏2022-07-23 23.39.38"></p><ul><li>编译型语言</li></ul><p>使用专门的编译器，针对特定的平台，将高级语言源代码一次性的编译成可被该平台硬件执行的机器码，并包装成该平台所能识别的可执行性程序的格式。</p><p>编译型语言写的程序执行之前，需要一个专门的编译过程，把源代码编译成机器语言的文件，如<code>exe</code>格式的文件，以后要再运行时，直接使用编译结果即可，如直接运行<code>exe</code>文件。因为只需编译一次，以后运行时不需要编译，所以编译型语言执行效率高。</p><blockquote><p>1、一次性的编译成平台相关的机器语言文件，运行时脱离开发环境，运行效率高；</p><p>2、与特定平台相关，一般无法移植到其他平台；</p></blockquote><ul><li>解释型语言</li></ul><p>使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行。是代码在执行时才被解释器一行行动态翻译和执行，而不是在执行之前就完成翻译。</p><blockquote><p>1.解释型语言每次运行都需要将源代码解释称机器码并执行，执行效率低；</p><p>2.只要平台提供相应的解释器，就可以运行源代码，所以可以方便源程序移植；</p></blockquote><h1 id="三、Go环境安装"><a href="#三、Go环境安装" class="headerlink" title="三、Go环境安装"></a>三、Go环境安装</h1><h2 id="3-1、Go编译器的下载"><a href="#3-1、Go编译器的下载" class="headerlink" title="3.1、Go编译器的下载"></a>3.1、Go编译器的下载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 官网：https://golang.google.cn/<br>-- go中文网：https://studygolang.com/dl<br></code></pre></td></tr></table></figure><p><img src="/pages_images/Go/image-20220719153946581-8216387.png" alt="image-20220719153946581"></p><p><img src="/pages_images/Go/image-20220719153914987-8216356.png" alt="image-20220719153914987"></p><h2 id="3-2、安装-for-Mac"><a href="#3-2、安装-for-Mac" class="headerlink" title="3.2、安装 for Mac"></a>3.2、安装 for Mac</h2><h3 id="3-2-1、-mac系统下安装SDK"><a href="#3-2-1、-mac系统下安装SDK" class="headerlink" title="3.2.1、 mac系统下安装SDK"></a>3.2.1、 mac系统下安装SDK</h3><p><img src="/pages_images/Go/image-20220719160916965.png" alt="image-20220719160916965"></p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-19%2015.44.41-8218367.png" alt="截屏2022-07-19 15.44.41"></p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-19%2015.45.31-8218367.png" alt="截屏2022-07-19 15.45.31"></p><p>安装完成以后可以使用终端软件(例如iTerm)中输入go version查看Go编译器的版本信息</p><p><img src="/pages_images/Go/image-20220720133017365-8295019.png" alt="image-20220720133017365"></p><blockquote><p>mac系统下会默认安装到<code>GOROOT=&quot;/usr/local/go&quot;</code>中，通过go env可以查看</p></blockquote><p><img src="/pages_images/Go/image-20220720133041195-8295042.png" alt="image-20220720133041195"></p><h3 id="3-2-2、-mac系统下配置GOPATH"><a href="#3-2-2、-mac系统下配置GOPATH" class="headerlink" title="3.2.2、 mac系统下配置GOPATH"></a>3.2.2、 mac系统下配置GOPATH</h3><p>开发包安装完成后，我们还需要配置一下GOPATH 环境变量，之后才可以使用Go语言进行开发。GOPATH是开发人员编写Go程序的工作空间路径，也就是存放Go代码的地方</p><p>在终端中运行 <code>vi ~/.bash_profile </code>添加下面这行代码</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> GOPATH=<span class="hljs-variable">$HOME</span>/goWork<br></code></pre></td></tr></table></figure><p>保存然后退出你的编辑器。然后在终端中运行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bash_profile<br></code></pre></td></tr></table></figure><blockquote><p>提示：$HOME 是每个电脑下的用户主目录，每个电脑可能不同，可以在终端运行 echo $HOME 获取</p></blockquote><p>然后保存并退出编辑器，运行 source ~&#x2F;.bash_profile 命令即可。</p><h2 id="3-3-安装-for-Window"><a href="#3-3-安装-for-Window" class="headerlink" title="3.3  安装 for Window"></a>3.3  安装 for Window</h2><h3 id="3-3-1、window系统下安装SDK"><a href="#3-3-1、window系统下安装SDK" class="headerlink" title="3.3.1、window系统下安装SDK"></a>3.3.1、window系统下安装SDK</h3><p>双击我们下载好的Go语言开发包即可启动安装程序，如下图所示，这是Go语言的用户许可协议，无需管它，直接勾选“I accept …”然后点击“Next”即可。</p><p><img src="/pages_images/Go/wps1-8295805-8298119.png" alt="img"> </p><p><img src="/pages_images/Go/wps2-8298130-8298133.png" alt="img"> </p><p>在 Windows 系统下Go语言开发包会默认安装到 C 盘的 Go 目录下，推荐在这个目录下安装，使用起来较为方便。当然，你也可以选择其他的安装目录，确认无误后点击“Next”，如下图所示：</p><p><img src="/pages_images/Go/wps3-8298145-8298146.png" alt="img"> </p><p>Go语言开发包的安装没有其他需要设置的选项，点击“Install”即可开始安装，如下图所示：</p><p><img src="/pages_images/Go/wps4-8298156-8298158.png" alt="img"> </p><p>等待程序完成安装，然后点击“Finish”退出安装程序。</p><p><img src="/pages_images/Go/wps5-8298167-8298168.png" alt="img"> </p><p>安装完成后，在我们所设置的安装目录下将生成一些目录和文件，如下图所示：</p><p><img src="/pages_images/Go/wps6-8296013-8298175-8298179.png" alt="img"></p><blockquote><p>在默认情况下，win系统下Go 将会被安装在目录 c:\go 下，但如果你在安装过程中修改安装目录，则需要手动修改所有的环境变量的值。</p><p>通过go env命令可以查看环境变量的所有情况。值得一提的是，GOROOT 表示 Go 开发包的安装目录。</p><p>国内Go语言库镜像：<a href="https://github.com/goproxy/goproxy.cn">https://github.com/goproxy/goproxy.cn</a> 在终端输入：<code>go env -w GOPROXY=https://goproxy.cn,direct</code>对代理进行修改。</p><p>GOPROXY <a href="https://proxy.golang.org,direct/">https://proxy.golang.org,direct</a></p><p>阿里云： export GOPROXY&#x3D;<a href="https://mirrors.aliyun.com/goproxy/">https://mirrors.aliyun.com/goproxy/</a></p><p>七牛云： export GOPROXY&#x3D; <a href="https://goproxy.cn/">https://goproxy.cn</a></p><p>go env -w “GO111MODULE&#x3D;off”   &#x2F;&#x2F; 关闭go mod</p></blockquote><h3 id="3-3-2、window系统下配置GOPATH"><a href="#3-3-2、window系统下配置GOPATH" class="headerlink" title="3.3.2、window系统下配置GOPATH"></a>3.3.2、window系统下配置GOPATH</h3><blockquote><p>GOPATH 是 Go语言中使用的一个环境变量，它使用绝对路径提供项目的工作目录（workspace）。</p><p>GOPATH下创建src文件夹，即存放Go项目代码的位置。</p></blockquote><p>开发包安装完成后，我们还需要配置一下GOPATH 环境变量，之后才可以使用Go语言进行开发。GOPATH是开发人员编写Go程序的工作空间路径，也就是存放Go代码的地方。<br>在桌面或者资源管理器右键“此电脑”（或者“我的电脑”）→“属性”→“高级系统设置”→“环境变量”，如下图所示。</p><p><img src="/pages_images/Go/wps7.jpg" alt="img"> </p><p>在弹出的菜单里找到 GOPATH 对应的选项点击编辑之后就可以修改了，没有的话可以选择新建，并将变量名填写为 GOPATH，变量值设置为任意目录均可（尽量选择空目录），例如 F:\GoWork。</p><p><img src="/pages_images/Go/wps8.jpg" alt="img"> </p><p>GOPATH对应创建的文件夹中里面，手动创建如下3个目录</p><p><img src="/pages_images/Go/image-20210315120607129-8298550.png" alt="image-20210315120607129"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">src    存储go的源代码（需要我们自己手动创建）<br>pkg  存储编译后生成的包文件 （自动生成）<br>bin   存储生成的可执行文件（自动生成）<br></code></pre></td></tr></table></figure><h2 id="3-4、第一个Go程序"><a href="#3-4、第一个Go程序" class="headerlink" title="3.4、第一个Go程序"></a>3.4、第一个Go程序</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs golang"><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Hello Yuan！&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/pages_images/Go/image-20220722120013307-8462415.png" alt="image-20220722120013307"></p><blockquote><ol><li>程序没有涉及到自定义包调用时可以放在电脑任何位置</li><li>为了以后方便管理，我们暂时统一放在gopath的src下</li><li>后面会学习go mod更好进行包管理</li></ol></blockquote><h3 id="3-4-1、程序语法解析"><a href="#3-4-1、程序语法解析" class="headerlink" title="3.4.1、程序语法解析"></a>3.4.1、程序语法解析</h3><h4 id="1-main包和main函数"><a href="#1-main包和main函数" class="headerlink" title="(1) main包和main函数"></a>(1) main包和main函数</h4><p>Go语言以“包”作为管理单位，每个 Go 源文件必须先声明它所属的包，所以我们会看到每个 Go 源文件的开头都是一个 package 声明。Go语言的包与文件夹是一一对应的。一个Go语言程序必须<strong>有且仅有一个</strong> main 包。main 包是Go语言程序的入口包，如果一个程序没有 main 包，那么编译时将会出错，无法生成可执行文件。</p><h4 id="2-import"><a href="#2-import" class="headerlink" title="(2) import"></a>(2) import</h4><p>在包声明之后，是 import 语句，用于导入程序中所依赖的包，导入的包名使用双引号<code>&quot;&quot;</code>包围，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;name&quot;</span><br></code></pre></td></tr></table></figure><p>其中 import 是导入包的关键字，name 为所导入包的名字。</p><blockquote><p>导入的包中不能含有代码中没有使用到的包，否则Go编译器会报编译错误</p></blockquote><p>也可以使用一个 import 关键字导入多个包，此时需要用括号<code>( )</code>将包的名字包围起来，并且每个包名占用一行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>(<br>    <span class="hljs-string">&quot;p1&quot;</span><br>    <span class="hljs-string">&quot;p2&quot;</span><br>)<br></code></pre></td></tr></table></figure><h3 id="3-4-2、程序编译执行"><a href="#3-4-2、程序编译执行" class="headerlink" title="3.4.2、程序编译执行"></a>3.4.2、程序编译执行</h3><p>我们上面给大家介绍过，Go语言是像C语言一样的编译型的静态语言，所以在运行Go语言程序之前，先要将其编译成二进制的可执行文件。</p><p>可以通过Go语言提供的<code>go build</code>或者<code>go run</code>命令对Go语言程序进行编译：</p><p>(1) <code>go build</code>命令可以将Go语言程序代码编译成二进制的可执行文件，但是需要我们手动运行该二进制文件；</p><blockquote><p>1、如果是普通包，当你执行go build之后，它不会产生任何文件。【非main包】</p><p>2、如果是main包，当你执行go build之后，它就会在当前目录下生成一个可执行文件，比如win系统的<code>exe</code>文件</p><p>3、你也可以指定编译输出的文件名。我们可以指定<code>go build -o  可执行文件.exe</code></p></blockquote><p>（2）除了使用<code>go build</code>命令外，Go语言还为我们提供了<code>go run</code>命令，<code>go run</code>命令将编译和执行指令合二为一，会在编译之后立即执行Go语言程序，但是不会生成可执行文件。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> run <span class="hljs-keyword">go</span>文件名称  <span class="hljs-comment">//  go文件名称不能为空</span><br></code></pre></td></tr></table></figure><h2 id="3-5、IDE的安装与使用"><a href="#3-5、IDE的安装与使用" class="headerlink" title="3.5、IDE的安装与使用"></a>3.5、IDE的安装与使用</h2><h3 id="3-5-1、安装Goland"><a href="#3-5-1、安装Goland" class="headerlink" title="3.5.1、安装Goland"></a>3.5.1、安装Goland</h3><p>GoLand是Jetbrains公司推出专为Go开发人员构建的跨平台IDE，可以运行在Windows,Linux,macOS系统之上,</p><p>下载地址：<a href="https://www.jetbrains.com/go/download/#section=windows">https://www.jetbrains.com/go/download/#section=windows</a></p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-20%2015.25.45-8301995.png" alt="截屏2022-07-20 15.25.45"></p><p>下载完成之后便可以进行安装了</p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-20%2018.39.14.png" alt="截屏2022-07-20 18.39.14"></p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-20%2018.39.26.png" alt="截屏2022-07-20 18.39.26"></p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-20%2018.39.46.png" alt="截屏2022-07-20 18.39.46"></p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-20%2018.39.59.png" alt="截屏2022-07-20 18.39.59"></p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-20%2018.43.07.png" alt="截屏2022-07-20 18.43.07"></p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-20%2018.44.16.png" alt="截屏2022-07-20 18.44.16"></p><p>因为GoLand是收费的IDE，同时也提供了30天免费试用的方式。如果经济能力允许的话，可以从指定渠道购买正版GoLand.<br>GoLand提供了Jetbrains Account,Activition Code和License Server三种激活方式，使用前必须激活或者选择免费试用<br>当激活或者选择免费试用之后便会启动GoLand。</p><blockquote><p>免费试用需要点击log in，进行账户注册（在PC端完成）,然后登陆，即可试用30天</p></blockquote><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-20%2015.45.56-8303165.png" alt="截屏2022-07-20 15.45.56"></p><p>此时可以选择New Project在指定的路径创建新的项目目录或者选择Open打开已经存在的项目目录，进行编辑。</p><h3 id="3-5-2、GoLand下编写Go程序"><a href="#3-5-2、GoLand下编写Go程序" class="headerlink" title="3.5.2、GoLand下编写Go程序"></a>3.5.2、GoLand下编写Go程序</h3><p>当GoLand启动后，便可以使用它来编写Go程序了。首先选择New Project创建一个项目。然后设置项目路径和GOROOT</p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-20%2015.49.47-8303415.png" alt="截屏2022-07-20 15.49.47"></p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-20%2015.55.22-8303758.png" alt="截屏2022-07-20 15.55.22"></p><p>然后点击create创建。</p><p><img src="/pages_images/Go/image-20220720155651723-8303813.png" alt="image-20220720155651723"></p><p>创建文件和文件夹：</p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-20%2016.01.55-8304149.png" alt="截屏2022-07-20 16.01.55"></p><p>goland安装好后没有编译器的单独配置go编译器路径：</p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-20%2016.04.55-8304361.png" alt="截屏2022-07-20 16.04.55"></p><h3 id="3-5-3、IDE的快捷键"><a href="#3-5-3、IDE的快捷键" class="headerlink" title="3.5.3、IDE的快捷键"></a>3.5.3、IDE的快捷键</h3><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>Ctrl + &#x2F;</td><td>单行注释</td></tr><tr><td>Ctrl + Shift + &#x2F;</td><td>多行注释</td></tr><tr><td>Ctrl + D</td><td>复制当前光标所在行</td></tr><tr><td>Ctrl + X</td><td>删除当前光标所在行</td></tr><tr><td>Ctrl + Alt + L</td><td>格式化代码</td></tr><tr><td>Ctrl + Shift + 方向键上或下</td><td>将光标所在的行进行上下移动（也可以使用 Alt+Shift+方向键上或下）</td></tr><tr><td>Ctrl + Alt + left&#x2F;right</td><td>返回至上次浏览的位置</td></tr><tr><td>Ctrl + R</td><td>替换</td></tr><tr><td>Ctrl + F</td><td>查找文本</td></tr><tr><td>Ctrl + Shift + F</td><td>全局查找</td></tr></tbody></table><h3 id="3-5-4、控制台折叠多余信息"><a href="#3-5-4、控制台折叠多余信息" class="headerlink" title="3.5.4、控制台折叠多余信息"></a>3.5.4、控制台折叠多余信息</h3><p><img src="/pages_images/Go/image-20220722112303208-8460185.png" alt="image-20220722112303208"></p><p><img src="/pages_images/Go/image-20220722112534240-8460335.png" alt="image-20220722112534240"></p><p><img src="/pages_images/Go/image-20220722112629909-8460391.png" alt="image-20220722112629909"></p><h1 id="四、基础语法"><a href="#四、基础语法" class="headerlink" title="四、基础语法"></a>四、基础语法</h1><h2 id="4-1、注释"><a href="#4-1、注释" class="headerlink" title="4.1、注释"></a>4.1、注释</h2><p>注释就是对代码的解释和说明，其目的是让人们能够更加轻松地了解代码。注释是开发人员一个非常重要的习惯，也是专业的一种表现。单行注释是最常见的注释形式，你可以在任何地方使用以 &#x2F;&#x2F; 开头的单行注释。多行注释也叫块注释，均已以 &#x2F;* 开头，并以 *&#x2F; 结尾。</p><blockquote><p>注释只是为了提高可读性，不会被计算机编译。</p></blockquote><p><img src="/pages_images/Go/image-20220105164023755-16413720250637.png" alt="image-20220105164023755"></p><h2 id="4-2、变量"><a href="#4-2、变量" class="headerlink" title="4.2、变量"></a>4.2、变量</h2><p>在计算机编程中，我们用变量来保存并管理很多数据，并用变量名来区分、识别和处理这些数据。</p><p>变量本质上是一种对内存地址的引用，让你能够把程序中准备使用的每一段数据都赋给一个简短、易于记忆的名字进行操作。</p><h3 id="4-2-1、声明变量"><a href="#4-2-1、声明变量" class="headerlink" title="4.2.1、声明变量"></a>4.2.1、声明变量</h3><p>和C语言一样，Go语言也是通过var关键字进行声明，不同的是变量名放在类型前，具体格式如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span>  变量名 变量类型<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> x <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> s <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> b <span class="hljs-type">bool</span><br><br>fmt.Println(x)  <span class="hljs-comment">// 0</span><br>fmt.Println(s)  <span class="hljs-comment">// &quot;&quot;</span><br>fmt.Println(b)  <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><blockquote><p>声明未赋值，系统默认赋这些类型零值</p></blockquote><p>如果声明多个变量，可以进行简写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 声明多个相同类型变量</span><br><span class="hljs-keyword">var</span> x,y <span class="hljs-type">int</span><br><span class="hljs-comment">// 声明多个不同类型变量</span><br><span class="hljs-keyword">var</span> (<br>name      <span class="hljs-type">string</span><br>age       <span class="hljs-type">int</span><br>isMarried <span class="hljs-type">bool</span><br>)<br></code></pre></td></tr></table></figure><h3 id="4-2-2、变量赋值"><a href="#4-2-2、变量赋值" class="headerlink" title="4.2.2、变量赋值"></a>4.2.2、变量赋值</h3><p>变量赋值的3种方法</p><h4 id="（1）变量名-值"><a href="#（1）变量名-值" class="headerlink" title="（1）变量名&#x3D;值"></a>（1）变量名&#x3D;值</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// 先声明再赋值</span><br><span class="hljs-keyword">var</span> x <span class="hljs-type">int</span><br>x = <span class="hljs-number">10</span>     <span class="hljs-comment">// 不要 重复声明 ： var x = 10</span><br>fmt.Println(x)<br>x = <span class="hljs-number">20.</span> <span class="hljs-comment">// 重新赋值</span><br><br><span class="hljs-comment">//  直接声明赋值</span><br><span class="hljs-comment">// var y string= &quot;hello yuan!&quot;</span><br><span class="hljs-keyword">var</span> y = <span class="hljs-string">&quot;hello yuan!&quot;</span><br>fmt.Println(y)<br><br><span class="hljs-comment">// 声明赋值精简版</span><br>s := <span class="hljs-string">&quot;hi,yuan！&quot;</span>  <span class="hljs-comment">// 1、编译器会自动根据右值类型推断出左值的对应类型，等同于var s = &quot;hi,yuan!&quot;。2、该变量之前不能声明，否则重复声明</span><br>fmt.Println(s)<br><br><span class="hljs-comment">// 一行声明赋值多个变量</span><br><span class="hljs-keyword">var</span> name,age = <span class="hljs-string">&quot;yuan&quot;</span>,<span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><h4 id="（2）变量名-变量名"><a href="#（2）变量名-变量名" class="headerlink" title="（2）变量名&#x3D;变量名"></a>（2）变量名&#x3D;变量名</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span><br><span class="hljs-keyword">var</span> b = a <span class="hljs-comment">// 变量之间的赋值是值拷贝</span><br>fmt.Println(a, b)<br>a = <span class="hljs-number">200</span><br>fmt.Println(b)<br></code></pre></td></tr></table></figure><h4 id="（3）变量名-值-值-变量名"><a href="#（3）变量名-值-值-变量名" class="headerlink" title="（3）变量名&#x3D;值 + 值 (变量名)"></a>（3）变量名&#x3D;值 + 值 (变量名)</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs golang">    <span class="hljs-keyword">var</span> a, b = <span class="hljs-number">10</span>, <span class="hljs-number">20</span><br><span class="hljs-keyword">var</span> c = a + b<br>fmt.Println(c)<br><span class="hljs-keyword">var</span> d = c + <span class="hljs-number">100</span><br>fmt.Println(d)<br></code></pre></td></tr></table></figure><p>练习题：</p><blockquote><ol><li>将x，y两个变量的值进行交换</li></ol></blockquote><h3 id="4-2-3、匿名变量"><a href="#4-2-3、匿名变量" class="headerlink" title="4.2.3、匿名变量"></a>4.2.3、匿名变量</h3><p>匿名变量即没有命名的变量，在使用多重赋值时，如果想要忽略某个值，可以使用匿名变量（anonymous variable）。 匿名变量用一个下划线<code>_</code>表示。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">a,b,c :=<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span><br>fmt.Println(a,b,c)<br><span class="hljs-comment">// 如果只想接受第个变量,可以对前两个变量匿名</span><br>_,_,x := <span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span><br>fmt.Println(x)<br></code></pre></td></tr></table></figure><blockquote><p>匿名变量不占用命名空间，不会分配内存</p><p>让代码非常清晰，基本上屏蔽掉了可能混淆代码阅读者视线的内容，从而大幅降低沟通的复杂度和代码维护的难度。</p></blockquote><h3 id="4-2-4、变量命名规则"><a href="#4-2-4、变量命名规则" class="headerlink" title="4.2.4、变量命名规则"></a>4.2.4、变量命名规则</h3><p>变量命名是需要遵循一定的语法规范的，否则编译器不会通过。</p><blockquote><p>1、变量名称必须由数字、字母、下划线组成。</p><p>2、标识符开头不能是数字。</p><p>3、标识符不能是保留字和关键字。</p><p>4、建议使用驼峰式命名，当名字有几个单词组成的时优先使用大小写分隔</p><p>5、变量名尽量做到见名知意。</p><p>6、变量命名区分大小写</p></blockquote><p>go语言中有25个关键字，不能用于自定义变量名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">break</span>        <span class="hljs-keyword">default</span>          <span class="hljs-function"><span class="hljs-keyword">func</span>           <span class="hljs-title">interface</span>         <span class="hljs-title">select</span></span><br><span class="hljs-keyword">case</span>         <span class="hljs-keyword">defer</span>            <span class="hljs-keyword">go</span>             <span class="hljs-keyword">map</span>               <span class="hljs-keyword">struct</span><br><span class="hljs-keyword">chan</span>         <span class="hljs-keyword">else</span>             <span class="hljs-keyword">goto</span>           <span class="hljs-keyword">package</span>           <span class="hljs-keyword">switch</span><br><span class="hljs-keyword">const</span>        <span class="hljs-keyword">fallthrough</span>      <span class="hljs-keyword">if</span>             <span class="hljs-keyword">range</span>             <span class="hljs-keyword">type</span><br><span class="hljs-keyword">continue</span>     <span class="hljs-keyword">for</span>              <span class="hljs-keyword">import</span>         <span class="hljs-keyword">return</span>            <span class="hljs-keyword">var</span><br></code></pre></td></tr></table></figure><p>还有30多个预定义的名字，用于内建的常量、类型和函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 内建常量:</span><br>    <span class="hljs-literal">true</span> <span class="hljs-literal">false</span> <span class="hljs-literal">iota</span> <span class="hljs-literal">nil</span><br><span class="hljs-comment">// 内建类型:</span><br>    <span class="hljs-type">int</span> <span class="hljs-type">int8</span> <span class="hljs-type">int16</span> <span class="hljs-type">int32</span> <span class="hljs-type">int64</span><br>    <span class="hljs-type">uint</span> <span class="hljs-type">uint8</span> <span class="hljs-type">uint16</span> <span class="hljs-type">uint32</span> <span class="hljs-type">uint64</span> <span class="hljs-type">uintptr</span><br>    <span class="hljs-type">float32</span> <span class="hljs-type">float64</span> <span class="hljs-type">complex128</span> <span class="hljs-type">complex64</span><br>    <span class="hljs-type">bool</span> <span class="hljs-type">byte</span> <span class="hljs-type">rune</span> <span class="hljs-type">string</span> <span class="hljs-type">error</span><br><span class="hljs-comment">// 内建函数:</span><br>    <span class="hljs-built_in">make</span> <span class="hljs-built_in">len</span> <span class="hljs-built_in">cap</span> <span class="hljs-built_in">new</span> <span class="hljs-built_in">append</span> <span class="hljs-built_in">copy</span> <span class="hljs-built_in">close</span> <span class="hljs-built_in">delete</span><br>    <span class="hljs-built_in">complex</span> <span class="hljs-built_in">real</span> <span class="hljs-built_in">imag</span><br>    <span class="hljs-built_in">panic</span> <span class="hljs-built_in">recover</span><br></code></pre></td></tr></table></figure><h2 id="4-3、语句分隔符"><a href="#4-3、语句分隔符" class="headerlink" title="4.3、语句分隔符"></a>4.3、语句分隔符</h2><p>就像我们写作文一样，一定要有像逗号或者句号这样的语句分隔符，否则无法断句根本不能理解，编程语言也一样，需要给解释器或者编译器一个语句分割，让它知道哪里到哪里是一个语句，才能再去解析语句。</p><p>在 Go 程序中，一行代表一个语句结束。每个语句不需要像 C 家族中的其它语言一样以分号 ; 结尾，因为这些工作都将由 Go 编译器自动完成。如果你打算将多个语句写在同一行，它们则必须使用 ; 人为区分（不建议这样写）。</p><p><img src="/../Go%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%9116%E5%91%A8%E5%BF%AB%E9%80%9A%E8%BD%A6%E3%80%902023%E6%9C%80%E6%96%B0%E7%89%88%E3%80%91/pages_images/Go/image-20220105163143091-16413715041204.png" alt="image-20220105163143091"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//var name = &quot;yuan&quot;;var age = 18 // 不推荐</span><br><span class="hljs-comment">//fmt.Println(name)</span><br><span class="hljs-comment">//fmt.Println(age)  // 不报错但是不推荐</span><br><br><span class="hljs-comment">// 推荐写法</span><br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;yuan&quot;</span>  <span class="hljs-comment">// 换行即分隔符</span><br><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span><br>fmt.Println(name)<br>fmt.Println(age)<br></code></pre></td></tr></table></figure><h2 id="4-4、基本数据类型"><a href="#4-4、基本数据类型" class="headerlink" title="4.4、基本数据类型"></a>4.4、基本数据类型</h2><p>基本数据类型包含整型和浮点型，布尔类型以及字符串，这几种数据类型在几乎所有编程语言中都支持。</p><h3 id="4-4-1、整形"><a href="#4-4-1、整形" class="headerlink" title="4.4.1、整形"></a>4.4.1、整形</h3><p>字节了解：</p><blockquote><p>字节（Byte）：计算机中数据储存的单位。</p><p>位（bit）：也叫作“比特”，计算机中数据储存的最小单位，因为在计算机中是以二进制的形式数据储存，所以每个位以“0”或“1”表示。</p><p>位和字节的关系是：8个位组成一个字节。</p></blockquote><p>字节与位的关系：1Byte&#x3D;8bit。</p><p><img src="/pages_images/Go/(null)-9152699." alt="img"></p><ul><li><strong>整形类型</strong></li></ul><table><thead><tr><th>具体类型</th><th>取值范围</th></tr></thead><tbody><tr><td>int8</td><td>-128到127</td></tr><tr><td>uint8</td><td>0到255</td></tr><tr><td>int16</td><td>-32768到32767</td></tr><tr><td>uint16</td><td>0到65535</td></tr><tr><td>int32</td><td>-2147483648到2147483647</td></tr><tr><td>uint32</td><td>0到4294967295</td></tr><tr><td>int64</td><td>-9223372036854775808到9223372036854775807</td></tr><tr><td>uint64</td><td>0到18446744073709551615</td></tr><tr><td>uint</td><td>与平台相关，32位操作系统上就是<code>uint32</code>，64位操作系统上就是<code>uint64</code></td></tr><tr><td>int</td><td>与平台相关，32位操作系统上就是<code>int32</code>，64位操作系统上就是<code>int64</code></td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> x <span class="hljs-type">int</span><br>x = <span class="hljs-number">9223372036854775809</span><br>fmt.Print(x) <span class="hljs-comment">// overflows int</span><br></code></pre></td></tr></table></figure><ul><li><strong>进制转换</strong></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 十进制转化</span><br><span class="hljs-keyword">var</span> a <span class="hljs-type">int</span> = <span class="hljs-number">10</span><br>fmt.Printf(<span class="hljs-string">&quot;%d \n&quot;</span>, a)  <span class="hljs-comment">// 10    占位符%d表示十进制</span><br>fmt.Printf(<span class="hljs-string">&quot;%b \n&quot;</span>, a)  <span class="hljs-comment">// 1010  占位符%b表示二进制</span><br>fmt.Printf(<span class="hljs-string">&quot;%o \n&quot;</span>, a)  <span class="hljs-comment">// 12    占位符%o表示八进制</span><br>fmt.Printf(<span class="hljs-string">&quot;%x \n&quot;</span>, a)  <span class="hljs-comment">// a     占位符%x表示十六进制</span><br><br><span class="hljs-comment">// 八进制转化</span><br><span class="hljs-keyword">var</span> b <span class="hljs-type">int</span> = <span class="hljs-number">020</span><br>fmt.Printf(<span class="hljs-string">&quot;%o \n&quot;</span>, b)  <span class="hljs-comment">// 20</span><br>fmt.Printf(<span class="hljs-string">&quot;%d \n&quot;</span>, b)  <span class="hljs-comment">// 16</span><br>fmt.Printf(<span class="hljs-string">&quot;%x \n&quot;</span>, b)  <span class="hljs-comment">// 10</span><br>fmt.Printf(<span class="hljs-string">&quot;%b \n&quot;</span>, b)  <span class="hljs-comment">// 10000</span><br><br><span class="hljs-comment">// 十六进制转化</span><br><span class="hljs-keyword">var</span> c = <span class="hljs-number">0x12</span><br>fmt.Printf(<span class="hljs-string">&quot;%d \n&quot;</span>, c)  <span class="hljs-comment">// 18</span><br>fmt.Printf(<span class="hljs-string">&quot;%o \n&quot;</span>, c)  <span class="hljs-comment">// 22</span><br>fmt.Printf(<span class="hljs-string">&quot;%x \n&quot;</span>, c)  <span class="hljs-comment">// 12</span><br>fmt.Printf(<span class="hljs-string">&quot;%b \n&quot;</span>, c)  <span class="hljs-comment">// 10010</span><br></code></pre></td></tr></table></figure><h3 id="4-4-2、浮点型"><a href="#4-4-2、浮点型" class="headerlink" title="4.4.2、浮点型"></a>4.4.2、浮点型</h3><ul><li><strong>float类型</strong></li></ul><p>float类型分为<code>float32</code>和<code>float64</code>两种类型，这两种浮点型数据格式遵循 IEEE 754 标准。</p><p>单精度浮点数占用4个字节（32位）存储空间来存储一个浮点数。而双精度浮点数使用 8个字节（64位）存储空间来存储一个浮点数。</p><p>单精度浮点数最多有7位十进制有效数字，如果某个数的有效数字位数超过7位，当把它定义为单精度变量时，超出的部分会自动四舍五入。双精度浮点数可以表示十进制的15或16位有效数字，超出的部分也会自动四舍五入。</p><p>浮点类型默认声明为float64。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">    <span class="hljs-keyword">var</span> f1 <span class="hljs-type">float32</span> <span class="hljs-comment">// float32：  单精度浮点型</span><br>f1 = <span class="hljs-number">3.1234567890123456789</span><br>fmt.Println(f1, reflect.TypeOf(f1))<br><br><span class="hljs-keyword">var</span> f2 <span class="hljs-type">float64</span> <span class="hljs-comment">// 双精度浮点型</span><br>f2 = <span class="hljs-number">3.1234567890123456789</span><br>fmt.Println(f2, reflect.TypeOf(f2))<br><br><span class="hljs-keyword">var</span> f3 = <span class="hljs-number">3.1234567890123456789</span><br>fmt.Println(f3, reflect.TypeOf(f2)) <span class="hljs-comment">// 默认64</span><br></code></pre></td></tr></table></figure><ul><li><strong>科学计数表示</strong></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> f1 = <span class="hljs-number">2e10</span>        <span class="hljs-comment">// 即使是整数用科学技术表示也是浮点型</span><br>fmt.Println(f1,reflect.TypeOf(f1))<br><br><span class="hljs-keyword">var</span> f2 = <span class="hljs-number">2e-2</span><br>fmt.Println(f2,reflect.TypeOf(f2))<br></code></pre></td></tr></table></figure><h3 id="4-4-3、布尔类型"><a href="#4-4-3、布尔类型" class="headerlink" title="4.4.3、布尔类型"></a>4.4.3、布尔类型</h3><p>布尔类型是最基本数据类型之一，只有两个值：true和false，分别代表逻辑判断中的真和假，主要应用在条件判断中。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;reflect&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> b <span class="hljs-type">bool</span> <span class="hljs-comment">// 声明b是一个布尔类型</span><br>b = <span class="hljs-literal">true</span><br>b = <span class="hljs-literal">false</span> <span class="hljs-comment">// 该类型只有true和false两个值，分别代表真假两种状态</span><br>fmt.Println(b, reflect.TypeOf(b))<br><br>fmt.Println(<span class="hljs-number">1</span> == <span class="hljs-number">1</span>) <span class="hljs-comment">// 比较运算符的结果是一个布尔值</span><br><span class="hljs-comment">// fmt.Println(1 == &quot;1&quot;) // 报错，mismatched types不能比较</span><br>fmt.Println(<span class="hljs-number">3</span> &gt; <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;yuan&quot;</span><br><span class="hljs-keyword">var</span> b2 = name == <span class="hljs-string">&quot;rain&quot;</span><br>fmt.Println(b2)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-4-4、字符串"><a href="#4-4-4、字符串" class="headerlink" title="4.4.4、字符串"></a>4.4.4、字符串</h3><p>字符串是最基本也是最常用的数据类型，是通过双引号将多个字符按串联起来的一种数据，用于展示文本。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&quot;hello yuan&quot;</span>  <br>fmt.Println(s)<br></code></pre></td></tr></table></figure><blockquote><p>单引号只能标识字符</p></blockquote><h4 id="字符串的基本操作"><a href="#字符串的基本操作" class="headerlink" title="字符串的基本操作"></a>字符串的基本操作</h4><p>字符串在内存中是一段连续存储空间</p><p><img src="/./pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-23%2020.58.43-8581139.png" alt="截屏2022-07-23 20.58.43"></p><blockquote><p>注意：</p><ol><li>索引从零开始计数</li><li>go语言不支持负索引</li></ol></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&quot;hello yuan&quot;</span><br>fmt.Println(s)<br><br><span class="hljs-comment">// （1）索引取值 slice[index]  </span><br>a:= s[<span class="hljs-number">2</span>]<br>fmt.Println(<span class="hljs-type">string</span>(a))<br><br><span class="hljs-comment">// （2）切片取值slice[start:end], 取出的元素数量为：结束位置 - 开始位置；</span><br>b1:=s[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]   <span class="hljs-comment">//</span><br>fmt.Println(b1)<br>b2:=s[<span class="hljs-number">0</span>:]    <span class="hljs-comment">// 当缺省结束位置时，表示从开始位置到整个连续区域末尾；</span><br>fmt.Println(b2)<br>b3:=s[:<span class="hljs-number">8</span>]    <span class="hljs-comment">// 当缺省开始位置时，表示从连续区域开头到结束位置；</span><br>fmt.Println(b3)<br><br><span class="hljs-comment">// （3）字符串拼接</span><br><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-keyword">var</span> s2 = <span class="hljs-string">&quot;yuan&quot;</span><br><span class="hljs-keyword">var</span> s3 = s1 + s2 <span class="hljs-comment">// 生成一个新的字符串</span><br>fmt.Println(s3)<br><br></code></pre></td></tr></table></figure><h4 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h4><p>Go 语言的字符串常见转义符包含回车、换行、单双引号、制表符等，如下表所示。</p><table><thead><tr><th align="center">转义符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>\r</code></td><td align="center">回车符（返回行首）</td></tr><tr><td align="center"><code>\n</code></td><td align="center">换行符（直接跳到下一行的同列位置）</td></tr><tr><td align="center"><code>\t</code></td><td align="center">制表符</td></tr><tr><td align="center"><code>\&#39;</code></td><td align="center">单引号</td></tr><tr><td align="center"><code>\&quot;</code></td><td align="center">双引号</td></tr><tr><td align="center"><code>\\</code></td><td align="center">反斜杠</td></tr></tbody></table><p>举个例子，我们要打印一个Windows平台下的一个文件路径：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> s1 = <span class="hljs-string">&quot;hi yuan\nhi,alvin&quot;</span><br>fmt.Println(s1)<br><span class="hljs-keyword">var</span> s2 = <span class="hljs-string">&quot;his name is \&quot;rain\&quot;&quot;</span><br>fmt.Println(s2)<br><span class="hljs-keyword">var</span> s3 = <span class="hljs-string">&quot;D:\\next\\go.exe&quot;</span><br>fmt.Println(s3)<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h4><p>Go语言中要定义一个多行字符串时，就必须使用<code>反引号</code>字符：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">s1 := <span class="hljs-string">`第一行</span><br><span class="hljs-string">第二行</span><br><span class="hljs-string">第三行</span><br><span class="hljs-string">`</span><br>fmt.Println(s1)<br></code></pre></td></tr></table></figure><p>反引号间换行将被作为字符串中的换行，但是所有的转义字符均无效，文本将会原样输出。</p><h4 id="字符串的常用方法"><a href="#字符串的常用方法" class="headerlink" title="字符串的常用方法"></a>字符串的常用方法</h4><table><thead><tr><th align="left">方法</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left"><code>len(str)</code></td><td align="left">求长度</td></tr><tr><td align="left"><code>strings.ToUpper</code>,<code>strings.ToLower</code></td><td align="left">生成一个新的全部大写的字符串,生成一个新的全部小写的字符串</td></tr><tr><td align="left"><code>strings.ReplaceAll</code></td><td align="left">生成一个新的原字符串被指定替换后的字符串</td></tr><tr><td align="left"><code>strings.Contains</code></td><td align="left">判断是否包含</td></tr><tr><td align="left"><code>strings.HasPrefix,strings.HasSuffix</code></td><td align="left">前缀&#x2F;后缀判断</td></tr><tr><td align="left"><code>strings.Trim</code>、</td><td align="left">去除字符串两端匹配的内容</td></tr><tr><td align="left"><code>strings.Index(),strings.LastIndex()</code></td><td align="left">子串出现的位置</td></tr><tr><td align="left"><code>strings.Split</code></td><td align="left">分割，将字符串按指定的内容分割成数组</td></tr><tr><td align="left"><code>strings.Join(a[]string, sep string)</code></td><td align="left">join操作，将数组按指定的内容拼接成字符串</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;reflect&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s := <span class="hljs-string">&quot;hello world&quot;</span><br><span class="hljs-comment">// fmt.Println(len(s))</span><br><span class="hljs-comment">// strings.ToUpper 和 strings.ToLower</span><br>s1 := strings.ToUpper(<span class="hljs-string">&quot;Yuan&quot;</span>)<br>s2 := strings.ToLower(<span class="hljs-string">&quot;Rain&quot;</span>)<br>fmt.Println(s1, s2)<br><br><span class="hljs-comment">// strings.Trim</span><br>     user := <span class="hljs-string">&quot;  yuan &quot;</span><br>fmt.Println(<span class="hljs-built_in">len</span>(user))<br>fmt.Println(strings.TrimLeft(user, <span class="hljs-string">&quot; &quot;</span>))<br>fmt.Println(strings.TrimSpace(user))<br>fmt.Println(strings.Trim(user, <span class="hljs-string">&quot; &quot;</span>))<br><br>s := <span class="hljs-string">&quot;alvin,yuan,eric&quot;</span><br><span class="hljs-comment">// strings.Index，strings.LastIndex</span><br><span class="hljs-keyword">var</span> index = strings.Index(s, <span class="hljs-string">&quot;yuan!&quot;</span>)<br>fmt.Println(index) <span class="hljs-comment">// 未找到返回-1</span><br><span class="hljs-keyword">var</span> index2 = strings.LastIndex(s, <span class="hljs-string">&quot;l&quot;</span>)<br>fmt.Println(index2)<br><br><span class="hljs-comment">// strings.HasPrefix,strings.HasSuffix,strings.Contains（实现的依赖的就是strings.Index）</span><br>fmt.Println(strings.HasPrefix(s, <span class="hljs-string">&quot;alv&quot;</span>))<br>fmt.Println(strings.HasSuffix(s, <span class="hljs-string">&quot;eric&quot;</span>))<br>fmt.Println(strings.Contains(s, <span class="hljs-string">&quot;eric&quot;</span>))<br><br><span class="hljs-comment">// strings.Split: 将字符串分割成数组</span><br><span class="hljs-keyword">var</span> ret2 = strings.Split(s, <span class="hljs-string">&quot;,&quot;</span>)<br>fmt.Println(ret2, reflect.TypeOf(ret2))<br><br><span class="hljs-comment">// strings.Join：将数组拼接成字符串</span><br><span class="hljs-keyword">var</span> ret3 = strings.Join(ret2, <span class="hljs-string">&quot;-&quot;</span>)<br>fmt.Println(ret3, reflect.TypeOf(ret3))<br><br>&#125;<br></code></pre></td></tr></table></figure><p>练习：</p><blockquote><ol><li>基于字符串操作获取用户名和密码* s :&#x3D; “mysql … -u root -p 123”</li></ol></blockquote><h3 id="4-4-6、类型转换"><a href="#4-4-6、类型转换" class="headerlink" title="4.4.6、类型转换"></a>4.4.6、类型转换</h3><p>Go语言中只有强制类型转换，没有隐式类型转换。该语法只能在两个类型之间支持相互转换的时候使用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><br>   <span class="hljs-comment">// （1）整型之间的转换</span><br><span class="hljs-keyword">var</span> a <span class="hljs-type">int8</span><br>a = <span class="hljs-number">99</span><br>fmt.Println(<span class="hljs-type">int64</span>(a), reflect.TypeOf(<span class="hljs-type">int64</span>(a)))<br>fmt.Println(<span class="hljs-type">float64</span>(a), reflect.TypeOf(<span class="hljs-type">float64</span>(a)))<br><br><span class="hljs-comment">// （2）string与int类型的转换</span><br>x := strconv.Itoa(<span class="hljs-number">98</span>)<br>fmt.Println(x, reflect.TypeOf(x))<br>y, _ := strconv.Atoi(<span class="hljs-string">&quot;97&quot;</span>)<br>fmt.Println(y, reflect.TypeOf(y))<br><br><span class="hljs-comment">// (3) Parse系列函数</span><br><br><span class="hljs-comment">//  ParseInt</span><br><span class="hljs-comment">//  输入：1.数字的字符串形式 2.base,数字字符串的进制，比如：2进制、10进制。</span><br><span class="hljs-comment">//       3.bitSize的含义是⼤⼩限制，如果字符串转化的整形数据类型超过bitSize的最大值，那么输出的int64为bitSize的最大值，err就会显⽰数据超出范围。</span><br>i1, _ := strconv.ParseInt(<span class="hljs-string">&quot;1000&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-number">8</span>)<br><span class="hljs-built_in">println</span>(i1)<br>i2, _ := strconv.ParseInt(<span class="hljs-string">&quot;1000&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-number">64</span>)<br><span class="hljs-built_in">println</span>(i2)<br><br>f2, _ := strconv.ParseFloat(<span class="hljs-string">&quot;3.1415926&quot;</span>, <span class="hljs-number">64</span>)<br>fmt.Println(f2, reflect.TypeOf(f2))<br>f1, _ := strconv.ParseFloat(<span class="hljs-string">&quot;3.1415926&quot;</span>, <span class="hljs-number">32</span>)<br>fmt.Println(f1, reflect.TypeOf(f1))<br><br><span class="hljs-comment">// 返回字符串表示的bool值。它接受1、0、t、f、T、F、true、false、True、False、TRUE、FALSE；否则返回错误。</span><br>b1, _ := strconv.ParseBool(<span class="hljs-string">&quot;true&quot;</span>)<br>fmt.Println(b1, reflect.TypeOf(b1))<br>b2, _ := strconv.ParseBool(<span class="hljs-string">&quot;T&quot;</span>)<br>fmt.Println(b2, reflect.TypeOf(b2))<br>b3, _ := strconv.ParseBool(<span class="hljs-string">&quot;1&quot;</span>)<br>fmt.Println(b3, reflect.TypeOf(b3))<br>b4, _ := strconv.ParseBool(<span class="hljs-string">&quot;100&quot;</span>)<br>fmt.Println(b4, reflect.TypeOf(b4))<br><br></code></pre></td></tr></table></figure><h2 id="4-5、运算符"><a href="#4-5、运算符" class="headerlink" title="4.5、运算符"></a>4.5、运算符</h2><p>一个程序的最小单位是一条语句，一条语句最少包含一条指令，而指令就是对数据做运算，我们已经学完基本数据类型了，知道如何构建和使用一些最简单的数据，那么我们能对这些数据做什么运算呢，比如<code>fmt.Println(1+1)</code>这条语句包含两个指令，首先是计算1+1的指令，1就是数据，+就是算术运算符中的相加，这样计算机就可以帮我们执行这个指令计算出结果，然后执行第二个指令，即将计算结果2打印在终端，最终完成这条语句。</p><h3 id="4-5-1、算数运算符"><a href="#4-5-1、算数运算符" class="headerlink" title="4.5.1、算数运算符"></a>4.5.1、算数运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">相加</td></tr><tr><td align="left">-</td><td align="left">相减</td></tr><tr><td align="left">*</td><td align="left">相乘</td></tr><tr><td align="left">&#x2F;</td><td align="left">相除</td></tr><tr><td align="left">%</td><td align="left">求余</td></tr></tbody></table><blockquote><p>如何判断一个整型数字是奇数还是偶数？</p></blockquote><h3 id="4-5-2、关系运算符"><a href="#4-5-2、关系运算符" class="headerlink" title="4.5.2、关系运算符"></a>4.5.2、关系运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">检查两个值是否相等，如果相等返回 True 否则返回 False。</td></tr><tr><td align="left">!&#x3D;</td><td align="left">检查两个值是否不相等，如果不相等返回 True 否则返回 False。</td></tr><tr><td align="left">&gt;</td><td align="left">检查左边值是否大于右边值，如果是返回 True 否则返回 False。</td></tr><tr><td align="left">&lt;</td><td align="left">检查左边值是否小于右边值，如果是返回 True 否则返回 False。</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。</td></tr></tbody></table><h3 id="4-5-3、逻辑运算符"><a href="#4-5-3、逻辑运算符" class="headerlink" title="4.5.3、逻辑运算符"></a>4.5.3、逻辑运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">逻辑 AND 运算符。 如果两边的操作数都是 True，则条件 True，否则为 False。</td></tr><tr><td align="left">||</td><td align="left">逻辑 OR 运算符。 如果两边的操作数有一个 True，则条件 True，否则为 False。</td></tr><tr><td align="left">!</td><td align="left">逻辑 NOT 运算符。 如果条件为 True，则逻辑 NOT 条件 False，否则为 True。</td></tr></tbody></table><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs golang">    fmt.Println(<span class="hljs-number">2.1</span> &gt; <span class="hljs-number">1</span> || <span class="hljs-number">3</span> == <span class="hljs-number">2</span>)<br><span class="hljs-comment">// 用户名为root或者年龄大于18岁</span><br>username := <span class="hljs-string">&quot;root&quot;</span><br>age := <span class="hljs-number">16</span><br>ret := username == <span class="hljs-string">&quot;root&quot;</span> || !(age &lt; <span class="hljs-number">18</span>)<br>fmt.Println(ret)<br></code></pre></td></tr></table></figure><h3 id="4-5-4、赋值运算符"><a href="#4-5-4、赋值运算符" class="headerlink" title="4.5.4、赋值运算符"></a>4.5.4、赋值运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">简单的赋值运算符，将一个表达式的值赋给一个左值</td></tr><tr><td align="left">+&#x3D;</td><td align="left">相加后再赋值</td></tr><tr><td align="left">-&#x3D;</td><td align="left">相减后再赋值</td></tr><tr><td align="left">*&#x3D;</td><td align="left">相乘后再赋值</td></tr><tr><td align="left">&#x2F;&#x3D;</td><td align="left">相除后再赋值</td></tr><tr><td align="left">%&#x3D;</td><td align="left">求余后再赋值</td></tr><tr><td align="left">&lt;&lt;&#x3D;</td><td align="left">左移后赋值</td></tr><tr><td align="left">&gt;&gt;&#x3D;</td><td align="left">右移后赋值</td></tr><tr><td align="left">&amp;&#x3D;</td><td align="left">按位与后赋值</td></tr><tr><td align="left">^&#x3D;</td><td align="left">按位异或后赋值</td></tr><tr><td align="left">|&#x3D;</td><td align="left">按位或后赋值</td></tr></tbody></table><table><thead><tr><th align="left">++</th><th align="left">自增</th></tr></thead><tbody><tr><td align="left">–</td><td align="left">自减</td></tr></tbody></table><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs golang">    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span><br><span class="hljs-comment">// 使a自加1</span><br>ret := a + <span class="hljs-number">1</span><br>a = ret<br><span class="hljs-comment">// 使a自加1</span><br>a = a + <span class="hljs-number">1</span><br><span class="hljs-comment">// 使a自加1</span><br>a += <span class="hljs-number">1</span> <span class="hljs-comment">// 赋值元算符</span><br><span class="hljs-comment">// 使a自加1</span><br>a++ <span class="hljs-comment">// 注意：不能写成 ++ a 或 -- a 必须放在右边使用</span><br><span class="hljs-comment">// b := a++ // 此处为错误的用法，不能写在一行，要单独作为语句使用</span><br>fmt.Println(a)<br></code></pre></td></tr></table></figure><h3 id="4-5-5、运算符优先级"><a href="#4-5-5、运算符优先级" class="headerlink" title="4.5.5、运算符优先级"></a>4.5.5、运算符优先级</h3><p><img src="/pages_images/Go/youxianji.png" alt="image-20210625132209344"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><br>   <span class="hljs-comment">// 案例1</span><br>   <span class="hljs-keyword">var</span> a, b, c, d = <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span><br>ret := a + b*c/d<br>fmt.Println(ret)<br>    <span class="hljs-comment">// 案例2</span><br>    x := <span class="hljs-number">10</span><br>y := <span class="hljs-number">1</span><br>x += <span class="hljs-number">5</span>*(<span class="hljs-number">1</span>+<span class="hljs-number">2</span>) + y<br>fmt.Println(x)<br>z := <span class="hljs-number">1</span>+<span class="hljs-number">2</span> &gt; <span class="hljs-number">3</span> || <span class="hljs-number">1</span> == <span class="hljs-number">1</span>*<span class="hljs-number">5</span><br>fmt.Println(z)<br></code></pre></td></tr></table></figure><blockquote><p>为什么x &#x3D; 1+1， 为什么先计算后赋值：运算符的优先级</p></blockquote><h2 id="4-6、输入输出函数"><a href="#4-6、输入输出函数" class="headerlink" title="4.6、输入输出函数"></a>4.6、输入输出函数</h2><h3 id="4-6-1、输出函数"><a href="#4-6-1、输出函数" class="headerlink" title="4.6.1、输出函数"></a>4.6.1、输出函数</h3><p><code>fmt.Print</code>有几个变种：</p><blockquote><p>Print:   输出到控制台,不接受任何格式化操作<br>Println: 输出到控制台并换行<br>Printf : 只可以打印出格式化的字符串，只可以直接输出字符串类型的变量（不可以输出别的类型）<br>Sprintf：格式化并返回一个字符串而不带任何输出</p></blockquote><h4 id="（1）Print-和Println"><a href="#（1）Print-和Println" class="headerlink" title="（1）Print 和Println"></a>（1）Print 和Println</h4><p>Print和Println()函数可以打印出字符串或变量的值。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs golang">   name := <span class="hljs-string">&quot;yuan&quot;</span><br>age := <span class="hljs-number">24</span><br><br>fmt.Print(name, age)<br><br>fmt.Println(<span class="hljs-string">&quot;hello world&quot;</span>)<br>fmt.Println(name)<br>fmt.Println(age)<br>fmt.Println(name, age)<br>fmt.Println(<span class="hljs-string">&quot;姓名:&quot;</span>, name, <span class="hljs-string">&quot;年龄:&quot;</span>, age)<br></code></pre></td></tr></table></figure><h4 id="（2）格式化输出（Printf）"><a href="#（2）格式化输出（Printf）" class="headerlink" title="（2）格式化输出（Printf）"></a>（2）格式化输出（Printf）</h4><p>Printf 根据格式说明符格式化并写入标准输出。Printf 只打印字符串</p><p>比如上面打印一个人的基本信息格式：</p>  <figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs golang">    name := <span class="hljs-string">&quot;yuan&quot;</span><br>age := <span class="hljs-number">24</span><br>isMarried := <span class="hljs-literal">false</span><br>salary := <span class="hljs-number">3000.549</span><br>fmt.Printf(<span class="hljs-string">&quot;姓名:%s 年龄:%d 婚否：%t 薪资:%.2f\n&quot;</span>, name, age, isMarried, salary)<br>fmt.Printf(<span class="hljs-string">&quot;姓名:%v 年龄:%v 婚否：%v 薪资:%v\n&quot;</span>, name, age, isMarried, salary)<br>fmt.Printf(<span class="hljs-string">&quot;姓名:%#v 年龄:%#v 婚否：%#v 薪资:%#v\n&quot;</span>, name, age, isMarried, salary)<br></code></pre></td></tr></table></figure><table><thead><tr><th></th></tr></thead><tbody><tr><td><code>%v</code>：以默认的方式打印变量的值</td></tr><tr><td><code>%#v</code>：相应值的Go语法表示</td></tr><tr><td><code>%T</code>：打印对应值的类型</td></tr><tr><td><code>%+d</code> ：带符号的整型,<code>%d</code> 不带符号的整型</td></tr><tr><td><code>%o</code> ：不带零的八进制,<code>%#o</code> 带零的八进制</td></tr><tr><td><code>%x</code> ：小写的十六进制，<code>%X</code> 大写的十六进制，<code>%#x</code> 带0x的十六进制</td></tr><tr><td><code>%b</code> ：打印整型的二进制</td></tr><tr><td><code>%t</code> ：打印true 或 false</td></tr><tr><td><code>%s </code>：输出字符串表示，<code>%-5s</code> 最小宽度为5（左对齐）</td></tr><tr><td><code>%f</code> 小数点而无指数，默认精度为6</td></tr><tr><td><code>%e</code>  科学计数法，如-1234.456e+78</td></tr><tr><td><code>%p</code> 带0x的指针，<code>%#p</code> 不带0x的指针</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 整形和浮点型</span><br>fmt.Printf(<span class="hljs-string">&quot;%b\n&quot;</span>, <span class="hljs-number">12</span>)  <span class="hljs-comment">// 二进制表示:1100</span><br>fmt.Printf(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-number">12</span>)  <span class="hljs-comment">// 十进制表示:12</span><br>fmt.Printf(<span class="hljs-string">&quot;%o\n&quot;</span>, <span class="hljs-number">12</span>)  <span class="hljs-comment">// 八进制表示:14</span><br>fmt.Printf(<span class="hljs-string">&quot;%x\n&quot;</span>, <span class="hljs-number">12</span>)  <span class="hljs-comment">// 十六进制表示:c</span><br>fmt.Printf(<span class="hljs-string">&quot;%X\n&quot;</span>, <span class="hljs-number">12</span>)  <span class="hljs-comment">// 十六进制表示：c</span><br>fmt.Printf(<span class="hljs-string">&quot;%f\n&quot;</span>, <span class="hljs-number">3.1415</span>)  <span class="hljs-comment">// 有小数点而无指数：3.141500</span><br>fmt.Printf(<span class="hljs-string">&quot;%.3f\n&quot;</span>, <span class="hljs-number">3.1415</span>)  <span class="hljs-comment">// 3.142</span><br>fmt.Printf(<span class="hljs-string">&quot;%e\n&quot;</span>, <span class="hljs-number">1000.25</span>)  <span class="hljs-comment">// 科学计数法:  1.000250e+03，默认精度为6</span><br><br><span class="hljs-comment">// 设置宽度</span><br>fmt.Printf(<span class="hljs-string">&quot;学号：%s 姓名：%-20s 平均成绩：%-4d\n&quot;</span>, <span class="hljs-string">&quot;1001&quot;</span>, <span class="hljs-string">&quot;alvin&quot;</span>, <span class="hljs-number">100</span>)<br>fmt.Printf(<span class="hljs-string">&quot;学号：%s 姓名：%-20s 平均成绩：%-4d\n&quot;</span>, <span class="hljs-string">&quot;1002&quot;</span>, <span class="hljs-string">&quot;zuibangdeyuanlaoshi&quot;</span>, <span class="hljs-number">98</span>)<br>fmt.Printf(<span class="hljs-string">&quot;学号：%s 姓名：%-20s 平均成绩：%-4d\n&quot;</span>, <span class="hljs-string">&quot;1003&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-number">78</span>)<br><br></code></pre></td></tr></table></figure><h4 id="（3）Sprintf"><a href="#（3）Sprintf" class="headerlink" title="（3）Sprintf"></a>（3）Sprintf</h4><p>Printf和Sprintf都是替换<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>，Printf是直接输出到终端，Sprintf是不直接输出到终端，而是返回该字符串</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs golang">    name := <span class="hljs-string">&quot;yuan&quot;</span><br>age := <span class="hljs-number">24</span><br>isMarried := <span class="hljs-literal">false</span><br>salary := <span class="hljs-number">3000.549</span><br>info := fmt.Sprintf(<span class="hljs-string">&quot;姓名:%s 年龄:%d 婚否：%t 薪资:%.2f\n&quot;</span>, name, age, isMarried, salary)<br>fmt.Println(info)<br></code></pre></td></tr></table></figure><h3 id="4-6-2、输入函数"><a href="#4-6-2、输入函数" class="headerlink" title="4.6.2、输入函数"></a>4.6.2、输入函数</h3><p>go语言fmt包下有三个函数，可以在程序运行过程中从标准输入获取用户的输入：</p><h4 id="（1）fmt-Scan"><a href="#（1）fmt-Scan" class="headerlink" title="（1）fmt.Scan"></a>（1）fmt.Scan</h4><p>语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Scan</span><span class="hljs-params">(a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><ul><li>Scan 从标准输入扫描文本，读取由空白符分隔的值保存到传递给本函数的参数中，换行符视为空白符。</li><li>本函数返回成功扫描的数据个数和遇到的任何错误。如果读取的数据个数比提供的参数少，会返回一个错误报告原因。</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> (<br>name      <span class="hljs-type">string</span><br>age       <span class="hljs-type">int</span><br>isMarried <span class="hljs-type">bool</span><br>)<br>fmt.Scan(&amp;name, &amp;age, &amp;isMarried) <span class="hljs-comment">// 输入类型不一致，按默认值</span><br>fmt.Printf(<span class="hljs-string">&quot;扫描结果 name:%s age:%d married:%t\t&quot;</span>, name, age, isMarried)<br>&#125;<br></code></pre></td></tr></table></figure><p>将上述代码在终端运行，在终端依次输入 yuan 、26、false使用空格分隔。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> run main.<span class="hljs-keyword">go</span><br>yuan <span class="hljs-number">26</span> <span class="hljs-literal">false</span><br>扫描结果 name:yuan age:<span class="hljs-number">26</span> married:<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>fmt.Scan从标准输入中扫描用户输入的数据，将以空白符分隔的数据分别存入指定的参数中。</p><h4 id="（2）fmt-Scanf"><a href="#（2）fmt-Scanf" class="headerlink" title="（2）fmt.Scanf"></a>（2）fmt.Scanf</h4><p>语法</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">func Scanf（<span class="hljs-keyword">format</span> <span class="hljs-keyword">string</span>, a ...interface&#123;&#125;）(n <span class="hljs-keyword">int</span>, err <span class="hljs-keyword">error</span>)<br></code></pre></td></tr></table></figure><ul><li>Scanf从标准输入扫描文本，根据format参数指定的格式去读取由空白符分隔的值保存到传递给本函数的参数中。</li><li>本函数返回成功扫描的数据个数和遇到的任何错误。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 案例1</span><br><span class="hljs-keyword">var</span> (<br>name      <span class="hljs-type">string</span><br>age         <span class="hljs-type">int</span><br>isMarried <span class="hljs-type">bool</span><br>)<br>fmt.Scanf(<span class="hljs-string">&quot;1:%s 2:%d 3:%t&quot;</span>, &amp;name,&amp;age,&amp;isMarried)<br>fmt.Printf(<span class="hljs-string">&quot;扫描结果 姓名:%s 年龄:%d 婚否:%t&quot;</span>, name,age,isMarried)<br><br><span class="hljs-comment">// 案例2</span><br><span class="hljs-keyword">var</span> a, b <span class="hljs-type">int</span><br>fmt.Scanf(<span class="hljs-string">&quot;%d+%d&quot;</span>, &amp;a, &amp;b)<br>fmt.Println(a + b)<br></code></pre></td></tr></table></figure><h4 id="（3）fmt-Scanln"><a href="#（3）fmt-Scanln" class="headerlink" title="（3）fmt.Scanln"></a>（3）fmt.Scanln</h4><p>语法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Scanln</span><span class="hljs-params">(a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><ul><li>Scanln类似于Scan，它遇到换行立即停止扫描。</li><li>本函数返回成功扫描的数据个数和遇到的任何错误。</li></ul><blockquote><p>Scanln和Scan的区别就是Scanln遇到换行立即结束输入，而Scan则会将换行符作为一个空白符继续下一个输入</p></blockquote><h2 id="4-7、常量与itoa"><a href="#4-7、常量与itoa" class="headerlink" title="4.7、常量与itoa"></a>4.7、常量与itoa</h2><h3 id="4-7-1-常量"><a href="#4-7-1-常量" class="headerlink" title="4.7.1 常量"></a>4.7.1 常量</h3><p>常量是⼀个简单值的标识符，在程序运⾏时，不会被修改的量。<br>在Python、Java编程规范中，常量⼀般都是全⼤写字母，但是在Golang中，⼤⼩写是具有⼀定特殊含义的，所以不⼀定所有常量都得全⼤写。</p><p>声明赋值方式与变量接近，通过<code>const</code>实现</p><p><code>const 常量名[数据类型] =  value</code></p><blockquote><p>数据类型可以忽略不写，Golang编译器会⾃动推断出数据类型。<br>在使⽤时，要注意以下⼏点：</p><ol><li>数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型</li><li>满⾜多重赋值</li><li>常量只定义不使⽤,编译不会报错</li><li>常量可以作为枚举，常量组</li><li>常量组中如不指定类型和初始化值，则与上⼀⾏⾮空常量右值相同</li><li>显⽰指定类型的时候，必须确保常量左右值类型⼀致，需要时可做显⽰类型转换。</li></ol></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs golang">    <span class="hljs-comment">// （1）声明常量</span><br><span class="hljs-keyword">const</span> pai = <span class="hljs-number">3.1415926</span><br><span class="hljs-keyword">const</span> e <span class="hljs-type">float64</span> = <span class="hljs-number">2.7182818</span><br>fmt.Println(pai * pai)<br><br><span class="hljs-comment">// （2）常量也可以和变量一样一组一起声明</span><br><span class="hljs-comment">// const monday, tuesday, wednesday = 1, 2, 3</span><br><span class="hljs-comment">// 更推荐下面这种方式</span><br><span class="hljs-keyword">const</span> (<br>monday    = <span class="hljs-number">1</span><br>tuesday   = <span class="hljs-number">2</span><br>wednesday = <span class="hljs-number">3</span><br>thursday  = <span class="hljs-number">4</span><br>friday    = <span class="hljs-number">5</span><br>saturday  = <span class="hljs-number">6</span><br>sunday    = <span class="hljs-number">7</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>female = <span class="hljs-number">0</span><br>male   = <span class="hljs-number">1</span><br>)<br><br><span class="hljs-comment">// ⼀组常量中，如果某个常量没有初始值，默认和上⼀⾏⼀致</span><br><br><span class="hljs-keyword">const</span> (<br>a <span class="hljs-type">int</span> = <span class="hljs-number">1</span><br>b<br>c = <span class="hljs-number">2</span><br>d<br>)<br>fmt.Println(a, b, c, d)<br><br></code></pre></td></tr></table></figure><h3 id="4-7-2-iota计数器"><a href="#4-7-2-iota计数器" class="headerlink" title="4.7.2 iota计数器"></a>4.7.2 iota计数器</h3><p><code>iota</code>是go语言的常量计数器，只能在常量的表达式中使用。 使用<code>iota</code>时只需要记住以下两点</p><blockquote><p>1.<code>iota</code>在<code>const</code>关键字出现时将被重置为0。</p><p>2.<code>const</code>中每新增一行常量声明将使<code>iota</code>计数一次(iota可理解为<code>const</code>语句块中的行索引)。</p></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">const</span> (<br>food = <span class="hljs-literal">iota</span><br>cloth<br>bed<br>electric<br>)<br><br>fmt.Println(food, cloth, bed, electric)<br><br><span class="hljs-keyword">const</span> (<br>a = <span class="hljs-number">1</span><br>b = <span class="hljs-literal">iota</span><br>c = <span class="hljs-number">6</span><br>d<br>e = <span class="hljs-literal">iota</span><br>f<br>)<br><br>fmt.Println(a, b, c, d, e, f)<br></code></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs golang"><br><span class="hljs-keyword">const</span> (<br>b  = <span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-literal">iota</span> * <span class="hljs-number">10</span>)<br>kb <br>mb <br>gb <br>tb<br>pb <br>)<br>fmt.Println(b, kb, mb, gb, tb, pb)<br></code></pre></td></tr></table></figure><p>思考题：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">const</span> (<br>n1 = <span class="hljs-literal">iota</span><br>n2<br>_<br>n4<br>)<br><span class="hljs-keyword">const</span> (<br>a = <span class="hljs-literal">iota</span><br>b<br>_<br>c, d = <span class="hljs-literal">iota</span> + <span class="hljs-number">1</span>, <span class="hljs-literal">iota</span> + <span class="hljs-number">2</span><br>e    = <span class="hljs-literal">iota</span><br>)<br>fmt.Println(a, b, c, d, e)<br></code></pre></td></tr></table></figure><h1 id="五、流程控制语句"><a href="#五、流程控制语句" class="headerlink" title="五、流程控制语句"></a>五、流程控制语句</h1><p>程序是由语句构成，而流程控制语句 是用来控制程序中每条语句执行顺序的语句。可以通过控制语句实现更丰富的逻辑以及更强大的功能。几乎所有编程语言都有流程控制语句，功能也都基本相似。</p><p>其流程控制方式有</p><ul><li>顺序结构</li><li>分支结构</li><li>循环结构</li></ul><p>这里最简单最常用的就是顺序结构，即语句从上至下一一执行。</p><p><img src="/pages_images/Go/image-20210318154636648.png" alt="image-20210318154636648"></p><h2 id="5-1、分支语句"><a href="#5-1、分支语句" class="headerlink" title="5.1、分支语句"></a>5.1、分支语句</h2><p>顺序结构的程序虽然能解决计算、输出等问题，但不能做判断再选择。对于要先做判断再选择的问题就要使用分支结构。</p><h3 id="5-1-1、单分支语句"><a href="#5-1-1、单分支语句" class="headerlink" title="5.1.1、单分支语句"></a>5.1.1、单分支语句</h3><p>语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> 布尔表达式 &#123;  <span class="hljs-comment">// 注意左花括号必须与表达式同行</span><br>   <span class="hljs-comment">/* 在布尔表达式为 true 时执行 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/pages_images/Go/image-20211216155050847-16396410524811.png" alt="image-20211216155050847"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> username,password <span class="hljs-type">string</span><br><br>fmt.Print(<span class="hljs-string">&quot;请输入用户名：&quot;</span>)<br>fmt.Scanln(&amp;username)<br>fmt.Println(<span class="hljs-string">&quot;username&quot;</span>,username)<br><br>fmt.Print(<span class="hljs-string">&quot;请输入密码：&quot;</span>)<br>fmt.Scanln(&amp;password)<br>fmt.Println(<span class="hljs-string">&quot;password&quot;</span>,password)<br><br><span class="hljs-keyword">if</span> username == <span class="hljs-string">&quot;yuan&quot;</span> &amp;&amp; password==<span class="hljs-string">&quot;123&quot;</span>&#123;<br>    fmt.Println(<span class="hljs-string">&quot;登录成功！&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-1-2、双分支语句"><a href="#5-1-2、双分支语句" class="headerlink" title="5.1.2、双分支语句"></a>5.1.2、双分支语句</h3><p>双分支语句顾名思义，二条分支二选一执行！</p><p><img src="/pages_images/Go/image-20210318171626403.png" alt="image-20210318171626403"></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> age <span class="hljs-type">int</span><br>fmt.Println(<span class="hljs-string">&quot;请输入你的年龄：&quot;</span>)<br>fmt.Scanln(&amp;age)<br><span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;恭喜，你已经成年，可以观看该影片！&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;抱歉，你还未成年，不宜观看该影片！&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> username,password <span class="hljs-type">string</span><br>fmt.Print(<span class="hljs-string">&quot;请输入用户名：&quot;</span>)<br>fmt.Scanln(&amp;username)<br>fmt.Println(<span class="hljs-string">&quot;username&quot;</span>,username)<br><br>fmt.Print(<span class="hljs-string">&quot;请输入密码：&quot;</span>)<br>fmt.Scanln(&amp;password)<br>fmt.Println(<span class="hljs-string">&quot;password&quot;</span>,password)<br><br><span class="hljs-keyword">if</span> username == <span class="hljs-string">&quot;yuan&quot;</span> &amp;&amp; password==<span class="hljs-string">&quot;123&quot;</span>&#123;<br>    fmt.Println(<span class="hljs-string">&quot;登录成功！&quot;</span>)<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;用户名或者密码错误！&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-1-3、if多分支语句"><a href="#5-1-3、if多分支语句" class="headerlink" title="5.1.3、if多分支语句"></a>5.1.3、if多分支语句</h3><p>多分支即从比双分支更多的分支选择一支执行。</p><p><img src="/pages_images/Go/image-20210318173151614.png" alt="image-20210318173151614"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> score <span class="hljs-type">int</span><br>fmt.Scanln(&amp;score)<br><span class="hljs-keyword">if</span> score &gt; <span class="hljs-number">100</span> &amp;&amp; score &lt; <span class="hljs-number">0</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;输入数字应该在1-100之间&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> score &gt; <span class="hljs-number">90</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;成绩优秀！&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> score &gt; <span class="hljs-number">80</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;成绩良好！&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> score &gt; <span class="hljs-number">60</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;成绩及格！&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;请输入一个数字！&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>不管多少条分支只能执行一条分支！</p></blockquote><p>练习：根据用户输入的生日判断星座</p><p><img src="/pages_images/Go/image-20220730142158298-9162120.png" alt="image-20220730142158298"></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> month, day <span class="hljs-type">int</span><br>fmt.Print(<span class="hljs-string">&quot;请输入生日的月和日：&quot;</span>)<br>fmt.Scan(&amp;month, &amp;day)<br><br><span class="hljs-keyword">var</span> xingZuo <span class="hljs-type">string</span><br><br><span class="hljs-keyword">if</span> day &lt; <span class="hljs-number">1</span> || day &gt; <span class="hljs-number">31</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;输入的日有问题&quot;</span>)<br>os.Exit(<span class="hljs-number">0</span>)<br>&#125;<br><br><span class="hljs-keyword">switch</span> month &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-comment">// 日判断</span><br><span class="hljs-keyword">if</span> day &gt;= <span class="hljs-number">1</span> &amp;&amp; day &lt;= <span class="hljs-number">19</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;摩羯座&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;水瓶座&quot;</span><br>&#125;<br><br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-comment">// 日判断</span><br><span class="hljs-keyword">if</span> day &gt;= <span class="hljs-number">1</span> &amp;&amp; day &lt;= <span class="hljs-number">18</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;水瓶座&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;双鱼座&quot;</span><br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-comment">// 日判断</span><br><span class="hljs-keyword">if</span> day &gt;= <span class="hljs-number">1</span> &amp;&amp; day &lt;= <span class="hljs-number">20</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;双鱼座&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;白羊座&quot;</span><br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-comment">// 日判断</span><br><span class="hljs-keyword">if</span> day &gt;= <span class="hljs-number">1</span> &amp;&amp; day &lt;= <span class="hljs-number">19</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;白羊座&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;金牛座&quot;</span><br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br><span class="hljs-comment">// 日判断</span><br><span class="hljs-keyword">if</span> day &gt;= <span class="hljs-number">1</span> &amp;&amp; day &lt;= <span class="hljs-number">20</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;金牛座&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;双子座&quot;</span><br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br><span class="hljs-comment">// 日判断</span><br><span class="hljs-keyword">if</span> day &gt;= <span class="hljs-number">1</span> &amp;&amp; day &lt;= <span class="hljs-number">21</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;双子座&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;巨蟹座&quot;</span><br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br><span class="hljs-comment">// 日判断</span><br><span class="hljs-keyword">if</span> day &gt;= <span class="hljs-number">1</span> &amp;&amp; day &lt;= <span class="hljs-number">22</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;巨蟹座&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;狮子座&quot;</span><br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br><span class="hljs-comment">// 日判断</span><br><span class="hljs-keyword">if</span> day &gt;= <span class="hljs-number">1</span> &amp;&amp; day &lt;= <span class="hljs-number">22</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;狮子座&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;处女座&quot;</span><br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br><span class="hljs-comment">// 日判断</span><br><span class="hljs-keyword">if</span> day &gt;= <span class="hljs-number">1</span> &amp;&amp; day &lt;= <span class="hljs-number">22</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;处女座&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;天秤座&quot;</span><br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br><span class="hljs-comment">// 日判断</span><br><span class="hljs-keyword">if</span> day &gt;= <span class="hljs-number">1</span> &amp;&amp; day &lt;= <span class="hljs-number">23</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;天秤座&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;天蝎座&quot;</span><br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br><span class="hljs-comment">// 日判断</span><br><span class="hljs-keyword">if</span> day &gt;= <span class="hljs-number">1</span> &amp;&amp; day &lt;= <span class="hljs-number">22</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;天蝎座&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;射手座&quot;</span><br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br><span class="hljs-comment">// 日判断</span><br><span class="hljs-keyword">if</span> day &gt;= <span class="hljs-number">1</span> &amp;&amp; day &lt;= <span class="hljs-number">21</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;射手座&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>xingZuo = <span class="hljs-string">&quot;摩羯座&quot;</span><br>&#125;<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;输入的月份有问题&quot;</span>)<br>&#125;<br><br>fmt.Println(<span class="hljs-string">&quot;您的星座是：&quot;</span>, xingZuo)<br></code></pre></td></tr></table></figure><h3 id="5-1-4、switch多分支语句"><a href="#5-1-4、switch多分支语句" class="headerlink" title="5.1.4、switch多分支语句"></a>5.1.4、switch多分支语句</h3><p>语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> <span class="hljs-keyword">var</span> &#123;<br>    <span class="hljs-keyword">case</span> val1:<br>        ...<br>    <span class="hljs-keyword">case</span> val2:<br>        ...<br>    <span class="hljs-keyword">default</span>:<br>        ...<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/pages_images/Go/image-20210319120205199.png" alt="image-20210319120205199"></p><p>switch语句也是多分支选择语句，执行哪一代码块，取决于switch后的值与哪一case值匹配成功，则执行该case后的代码块。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">给出如下选项，并根据选项进行效果展示：</span><br><span class="hljs-comment">    输入1：则输出&quot;普通攻击&quot;</span><br><span class="hljs-comment">    输入2：则输出&quot;超级攻击&quot;</span><br><span class="hljs-comment">    输入3：则输出&quot;使用道具&quot;</span><br><span class="hljs-comment">    输入3：则输出&quot;逃跑&quot;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">var</span> choice <span class="hljs-type">int</span><br>fmt.Println(<span class="hljs-string">&quot;请输入选择:&quot;</span>)<br>fmt.Scanln(&amp;choice)<br><span class="hljs-comment">//fmt.Println(choice,reflect.TypeOf(choice))</span><br><br><span class="hljs-keyword">switch</span> choice &#123;<br>     <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:fmt.Println(<span class="hljs-string">&quot;普通攻击&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:fmt.Println(<span class="hljs-string">&quot;超级攻击&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:fmt.Println(<span class="hljs-string">&quot;使用道具&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:fmt.Println(<span class="hljs-string">&quot;逃跑&quot;</span>)<br><span class="hljs-keyword">default</span>:fmt.Println(<span class="hljs-string">&quot;输入有误！&quot;</span>)<br>&#125;<br> <br></code></pre></td></tr></table></figure><blockquote><p>1、switch比if else更为简洁</p><p>2、执行效率更高。switch…case会生成一个跳转表来指示实际的case分支的地址，而这个跳转表的索引号与switch变量的值是相等的。从而，switch…case不用像if…else那样遍历条件分支直到命中条件，而只需访问对应索引号的表项从而到达定位分支的目的。</p><p>3、到底使用哪一个选择语句，代码环境有关，如果是范围取值，则使用if else语句更为快捷；如果是确定取值，则使用switch是更优方案。</p></blockquote><p>switch同时支持多条件匹配：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span>&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>:<br>    <span class="hljs-keyword">default</span>:<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>strconv.ParseBool() 源码查看</p></blockquote><h3 id="5-1-5、分支嵌套"><a href="#5-1-5、分支嵌套" class="headerlink" title="5.1.5、分支嵌套"></a>5.1.5、分支嵌套</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 分支嵌套</span><br>    <span class="hljs-keyword">var</span> user <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> pwd <span class="hljs-type">int</span><br><br>fmt.Printf(<span class="hljs-string">&quot;请输入用户名:&quot;</span>)<br>fmt.Scanln(&amp;user)<br>fmt.Printf(<span class="hljs-string">&quot;请输入密码:&quot;</span>)<br>fmt.Scanln(&amp;pwd)<br><br><span class="hljs-keyword">if</span> user == <span class="hljs-string">&quot;yuan&quot;</span> &amp;&amp; pwd==<span class="hljs-number">123</span>&#123;<br><span class="hljs-keyword">var</span> score <span class="hljs-type">int</span><br>fmt.Printf(<span class="hljs-string">&quot;请输入成绩:&quot;</span>)<br>fmt.Scanln(&amp;score)<br><br><span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">90</span> &amp;&amp; score&lt;=<span class="hljs-number">100</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;成绩优秀！&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">80</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;成绩良好！&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">60</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;成绩及格&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;不及格！&quot;</span>)<br>&#125;<br><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;用户名或者密码错误！&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="5-2、循环语句"><a href="#5-2、循环语句" class="headerlink" title="5.2、循环语句"></a>5.2、循环语句</h2><p>在不少实际问题中有许多具有规律性的重复操作，因此在程序中就需要重复执行某些语句。一组被重复执行的语句称之为循环体，能否继续重复，决定循环的终止条件。</p><p>与其它主流编程语言不同的的是，Go语言中的循环语句只支持 for 关键字，而不支持 while 和 do-while 结构。</p><p><img src="/pages_images/Go/image-20210319125002230.png" alt="image-20210319125002230"></p><h3 id="5-2-1、for循环"><a href="#5-2-1、for循环" class="headerlink" title="5.2.1、for循环"></a>5.2.1、for循环</h3><h4 id="原始for循环"><a href="#原始for循环" class="headerlink" title="原始for循环"></a>原始for循环</h4><p>通过关系表达式或逻辑表达式控制循环</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span>  condition &#123; &#125;<br></code></pre></td></tr></table></figure><p>简单循环案例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">count := <span class="hljs-number">0</span>       <span class="hljs-comment">// 初始化语句</span><br><span class="hljs-keyword">for</span> count &lt; <span class="hljs-number">10</span> &#123; <span class="hljs-comment">// 条件判断</span><br>fmt.Println(<span class="hljs-string">&quot;hello yuan!&quot;</span>)<br>count++ <span class="hljs-comment">//  步进语句</span><br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;end&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs golang">count := <span class="hljs-number">10</span>     <span class="hljs-comment">// 初始化语句</span><br><span class="hljs-keyword">for</span> count &gt; <span class="hljs-number">0</span> &#123; <span class="hljs-comment">// 条件判断</span><br>fmt.Println(count)<br>count-- <span class="hljs-comment">//  步进语句</span><br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;end&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-30%2013.05.14-9157538.png" alt="截屏2022-07-30 13.05.14"></p><blockquote><p>练习：如何打印1-100</p></blockquote><h4 id="三要素for循环（核心）"><a href="#三要素for循环（核心）" class="headerlink" title="三要素for循环（核心）"></a>三要素for循环（核心）</h4><p>将初始化语句、条件判断以及步进语句格式固定化的循环方式，本质上和上面的for循环没有区别。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> init;condition;post &#123; <br>    <span class="hljs-comment">// 循环体语句</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>init</code>： 初始化语句,一般为赋值表达式，给控制变量赋初值;</p></li><li><p><code>condition</code>：条件判断，一般是关系表达式或逻辑表达式，循环控制条件;</p></li><li><p><code>post</code>： 步进语句，一般为赋值表达式，给控制变量增量或减量。</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>fmt.Println(i)<br>&#125;<br></code></pre></td></tr></table></figure><p>执行流程（关键）：</p><blockquote><p>（1）初始语句</p><p>（2）条件判断，布尔值为真则执行一次循环体，为假则退出循环</p><p>（3）执行一次循环体语句结束后，再执行步进语句，然后回到步骤（2），依次循环</p></blockquote><p>案例1：计算1-100的和</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*var s = 0</span><br><span class="hljs-comment">s += 1</span><br><span class="hljs-comment">s += 2</span><br><span class="hljs-comment">s += 3</span><br><span class="hljs-comment">s += 4</span><br><span class="hljs-comment">s += 5</span><br><span class="hljs-comment">s += 6</span><br><span class="hljs-comment">s += 7</span><br><span class="hljs-comment">s += 8</span><br><span class="hljs-comment">s += 9</span><br><span class="hljs-comment">s += 10</span><br><span class="hljs-comment">fmt.Println(s)*/</span><br><br><span class="hljs-comment">// 如果是1+2+3+....100呢？如何借助循环语法实现</span><br><span class="hljs-keyword">var</span> s = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++ &#123;<br>s += i<br>&#125;<br>fmt.Println(s)<br><br></code></pre></td></tr></table></figure><h3 id="5-2-2、分支与循环的嵌套使用"><a href="#5-2-2、分支与循环的嵌套使用" class="headerlink" title="5.2.2、分支与循环的嵌套使用"></a>5.2.2、分支与循环的嵌套使用</h3><p>循环与和分支语句是可以相互嵌套使用的，即分支语句中使用循环语句，循环语句中使用分支语句。</p><p>打印1-100中所有的偶数</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++ &#123;<br><span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;<br>fmt.Println(i)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>无限循环案例</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">/*</span><br><span class="hljs-comment">无限循环</span><br><span class="hljs-comment">for true&#123;&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 循环中嵌入分支语句</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">`</span><br><span class="hljs-string">1、普通攻击</span><br><span class="hljs-string">2、超级攻击</span><br><span class="hljs-string">3、使用道具</span><br><span class="hljs-string">4、逃跑</span><br><span class="hljs-string">`</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br><span class="hljs-keyword">var</span> choice <span class="hljs-type">int</span><br>fmt.Printf(<span class="hljs-string">&quot;请输入选择:&quot;</span>)<br>fmt.Scanln(&amp;choice)<br><span class="hljs-comment">//fmt.Println(choice,reflect.TypeOf(choice))</span><br><br><span class="hljs-keyword">switch</span> choice &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>fmt.Println(<span class="hljs-string">&quot;普通攻击&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>fmt.Println(<span class="hljs-string">&quot;超级攻击&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>fmt.Println(<span class="hljs-string">&quot;使用道具&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>fmt.Println(<span class="hljs-string">&quot;逃跑&quot;</span>)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;输入有误！&quot;</span>)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>输入正整数num，大于100，则打印1-num，小于100，则打印num-1？</p></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> num <span class="hljs-type">int</span><br>fmt.Scanln(&amp;num)<br><br><span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">100</span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= num; i++ &#123;<br>fmt.Println(i)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> i := num; i &gt; <span class="hljs-number">0</span>; i-- &#123;<br>fmt.Println(i)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-3、退出循环"><a href="#5-2-3、退出循环" class="headerlink" title="5.2.3、退出循环"></a>5.2.3、退出循环</h3><p>如果想提前结束循环（在不满足结束条件的情况下结束循环），可以使用break或continue关键字。</p><ul><li>break 用来跳出整个循环语句，也就是跳出所有的循环次数；</li><li>continue 用来跳出当次循环，也就是跳过当前的一次循环。</li></ul><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><p>当 break 关键字用于 for 循环时，会终止循环而执行整个循环语句后面的代码。break 关键字通常和 if 语句一起使用，即满足某个条件时便跳出循环，继续执行循环语句下面的代码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br><span class="hljs-keyword">if</span> i==<span class="hljs-number">8</span>&#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;:&quot;</span>,i)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./pages_images/Go/WX20220730-165349@2x-9171400.png" alt="WX20220730-165349@2x"></p><h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><p>break 语句使得循环语句还没有完全执行完就提前结束，与之相反，continue 语句并不终止当前的循环语句的执行，仅仅是终止当前循环变量 i 所控制的这一次循环，而继续执行该循环语句。continue 语句的实际含义是“忽略 continue 之后的所有循环体语句，回到循环的顶部并开始下一次循环”</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br><span class="hljs-keyword">if</span> i==<span class="hljs-number">8</span>&#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;:&quot;</span>,i)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./pages_images/Go/WX20220730-170000@2x-9171740.png" alt="WX20220730-170000@2x"></p><blockquote><p>案例: 计算 1 - 2 + 3 - 4 + … + 99 中除了88以外所有数的总和？</p></blockquote><h3 id="5-2-4、循环嵌套"><a href="#5-2-4、循环嵌套" class="headerlink" title="5.2.4、循环嵌套"></a>5.2.4、循环嵌套</h3><p>在一个循环体语句中又包含另一个循环语句，称为循环嵌套</p><h4 id="独立嵌套"><a href="#独立嵌套" class="headerlink" title="独立嵌套"></a>独立嵌套</h4><p>在控制台上打印一个五行五列的矩形，如下图所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">*****<br>*****<br>*****<br>*****<br>*****<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>    <br>    <span class="hljs-keyword">for</span> j:=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">5</span>;j++ &#123;<br>        fmt.Print(<span class="hljs-string">&quot;*&quot;</span>)<br>    &#125;<br>    fmt.Print(<span class="hljs-string">&quot;\n&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-30%2016.41.21-9170498.png" alt="截屏2022-07-30 16.41.21"></p><h4 id="关联嵌套"><a href="#关联嵌套" class="headerlink" title="关联嵌套"></a>关联嵌套</h4><p>在控制台上打印一个如下图所示的三角形</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">*</span><br><span class="hljs-comment">**</span><br><span class="hljs-comment">***</span><br><span class="hljs-comment">****</span><br><span class="hljs-comment">*****</span><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>    <span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt;= i; j++ &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;*&quot;</span>)<br>    &#125;<br>    fmt.Println()<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="六、重要数据类型"><a href="#六、重要数据类型" class="headerlink" title="六、重要数据类型"></a>六、重要数据类型</h1><h2 id="6-1、指针类型（核心类型）"><a href="#6-1、指针类型（核心类型）" class="headerlink" title="6.1、指针类型（核心类型）"></a>6.1、指针类型（核心类型）</h2><h3 id="6-1-1、指针的基本使用"><a href="#6-1-1、指针的基本使用" class="headerlink" title="6.1.1、指针的基本使用"></a>6.1.1、指针的基本使用</h3><p>计算机中所有的数据都必须放在内存中，不同类型的数据占用的字节数不一样，例如 int 占用 4 个字节。为了正确地访问这些数据，必须为每个字节都编上号码，就像门牌号、身份证号一样，每个字节的编号是唯一的，根据编号可以准确地找到某个字节。</p><p>我们将内存中字节的编号称为地址（Address）或<a href="http://c.biancheng.net/c/80/">指针</a>（Pointer）。地址从 0 开始依次增加，对于 32 位环境，程序能够使用的内存为 4GB，最小的地址为 0，最大的地址为 0XFFFFFFFF。</p><p>数据在内存中的地址也称为<a href="http://c.biancheng.net/c/80/">指针</a>，如果一个变量存储了一份数据的指针，我们就称它为<strong>指针变量</strong>。</p><p>Go语言中使用对于指针存在两种操作： <code>取址</code>和<code>取值</code>。</p><table><thead><tr><th align="left">符号</th><th align="left">名称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">&amp;变量</td><td align="left">取址符</td><td align="left">返回变量所在的地址</td></tr><tr><td align="left">*指针变量</td><td align="left">取值符</td><td align="left">返回指针指地址存储的值</td></tr></tbody></table><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> x = <span class="hljs-number">100</span><br><span class="hljs-comment">// 取址符：&amp;  取值符:*</span><br>fmt.Println(<span class="hljs-string">&quot;x的地址：&quot;</span>, &amp;x)<br><span class="hljs-comment">// 将地址值赋值给的变量称为指针变量</span><br><span class="hljs-keyword">var</span> p *<span class="hljs-type">int</span><br>p = &amp;x<br>fmt.Println(<span class="hljs-string">&quot;p的值：&quot;</span>, p)<br>fmt.Println(<span class="hljs-string">&quot;p地址对应的值&quot;</span>, *p)<br></code></pre></td></tr></table></figure><p><img src="/pages_images/Go/image-20210607171319554.png" alt="image-20210607171319554"></p><p>关于地址的格式化打印</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span><br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;x)<br>x = <span class="hljs-number">100</span><br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;x)<br>fmt.Println(*&amp;x)<br></code></pre></td></tr></table></figure><p>关于指针的应用：</p>  <figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// 当使用等号将一个变量的值赋给另一个变量时，如 x = y ,实际上是在内存中将 i 的值进行了拷贝</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span><br><span class="hljs-keyword">var</span> y = x<br><span class="hljs-keyword">var</span> z = &amp;x<br>x = <span class="hljs-number">20</span><br>fmt.Println(y)<br>fmt.Println(*z)<br>*z = <span class="hljs-number">30</span><br>fmt.Println(x)<br></code></pre></td></tr></table></figure><p>练习1</p> <figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span><br><span class="hljs-keyword">var</span> y = &amp;x<br><span class="hljs-keyword">var</span> z = *y<br>x = <span class="hljs-number">20</span><br>fmt.Println(x)<br>fmt.Println(*y)<br>fmt.Println(z) <br></code></pre></td></tr></table></figure><p>练习2</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span><br><span class="hljs-keyword">var</span> b = &amp;a<br><span class="hljs-keyword">var</span> c = &amp;b<br>**c = <span class="hljs-number">200</span><br>fmt.Println(a)<br></code></pre></td></tr></table></figure><blockquote><ol><li>Go语言的指针类型变量即拥有指针高效访问的特点，又不会发生指针偏移和运算，从而避免了非法修改关键性数据的问题。</li></ol></blockquote><h3 id="6-1-2、new函数"><a href="#6-1-2、new函数" class="headerlink" title="6.1.2、new函数"></a>6.1.2、new函数</h3><p>new 和 make 是 Go 语言中用于内存分配的原语。简单来说，new 只分配内存，make 用于初始化 slice、map 和 channel。</p><p>之前我们学习的基本数据类型声明之后是有一个默认零值的，但是指针类型呢？</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> p *<span class="hljs-type">int</span><br><span class="hljs-comment">// fmt.Println(p)  // &lt;nil&gt;</span><br><span class="hljs-comment">// fmt.Println(*p) // 报错，并没有开辟空间地址</span><br>*p = <span class="hljs-number">10.</span> <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><p>我们可以看到初始化⼀个指针变量，其值为nil，nil的值是不能直接赋值的。通过内建的new函数返回⼀个指向新分配的类型为int的指针，指针值为0xc00004c088，这个指针指向的内容的值为零（zero value）。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> p *<span class="hljs-type">int</span> = <span class="hljs-built_in">new</span>(<span class="hljs-type">int</span>)<br>fmt.Println(p)  <span class="hljs-comment">// 0x14000122008</span><br>fmt.Println(*p) <span class="hljs-comment">// 0</span><br>*p = <span class="hljs-number">10</span><br>fmt.Println(*p) <span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-07-30%2023.15.24-9194168.png" alt="截屏2022-07-30 23.15.24"></p><blockquote><p>make返回的还是引⽤类型本⾝；⽽new返回的是指向类型的指针。后面再详细介绍</p></blockquote><h2 id="6-2、数组"><a href="#6-2、数组" class="headerlink" title="6.2、数组"></a>6.2、数组</h2><p>我们之前学习过变量，当存储一个学生名字时可以<code>name=&quot;yuan&quot;</code>,但是如果班级有三十人，每个人的名字都想存储到内存中怎么办呢？总不能用三十个变量分别存储吧，这时数组就可以发挥作用了。</p><p>数组其实是和字符串一样的序列类型，不同于字符串在内存中连续存储字符，数组用<code>[]</code>的语法将同一类型的多个值存储在一块连续内存中。</p><h3 id="6-2-1、声明数组"><a href="#6-2-1、声明数组" class="headerlink" title="6.2.1、声明数组"></a>6.2.1、声明数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> 数组名 [元素数量]元素类型<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> names [<span class="hljs-number">5</span>]<span class="hljs-type">string</span><br>fmt.Println(names,reflect.TypeOf(names)) <span class="hljs-comment">// [    ] [5]string</span><br><br><span class="hljs-keyword">var</span> ages [<span class="hljs-number">5</span>]<span class="hljs-type">int</span><br>fmt.Println(ages,reflect.TypeOf(ages)) <span class="hljs-comment">// [0 0 0 0 0] [5]int</span><br></code></pre></td></tr></table></figure><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-08-02%2012.12.25-9413557.png" alt="截屏2022-08-02 12.12.25"></p><blockquote><p>在计算机语言中数组是非常重要的集合类型，大部分计算机语言中数组具有如下三个基本特性：</p><ol><li>一致性：数组只能保存相同数据类型元素，元素的数据类型可以是任何相同的数据类型。</li><li>有序性：数组中的元素是有序的，通过下标访问。</li><li>不可变性：数组一旦初始化，则长度（数组中元素的个数）不可变。</li></ol></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> x [<span class="hljs-number">3</span>]<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> y [<span class="hljs-number">5</span>]<span class="hljs-type">int</span><br><br><span class="hljs-comment">// x y的数据类型相同吗？</span><br></code></pre></td></tr></table></figure><h3 id="6-2-2、数组初始化"><a href="#6-2-2、数组初始化" class="headerlink" title="6.2.2、数组初始化"></a>6.2.2、数组初始化</h3><h4 id="初始化方式1：先声明再赋值"><a href="#初始化方式1：先声明再赋值" class="headerlink" title="初始化方式1：先声明再赋值"></a>初始化方式1：先声明再赋值</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> names [<span class="hljs-number">5</span>]<span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> ages [<span class="hljs-number">5</span>]<span class="hljs-type">int</span><br><br>names[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;张三&quot;</span><br>names[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;李四&quot;</span><br>names[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;王五&quot;</span><br>names[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;赵六&quot;</span><br>names[<span class="hljs-number">4</span>] = <span class="hljs-string">&quot;孙七&quot;</span><br><br>fmt.Println(names)   <span class="hljs-comment">// [张三 李四 王五 赵六 孙七]</span><br><br>ages[<span class="hljs-number">0</span>] = <span class="hljs-number">23</span><br>ages[<span class="hljs-number">1</span>] = <span class="hljs-number">24</span><br>ages[<span class="hljs-number">2</span>] = <span class="hljs-number">25</span><br>ages[<span class="hljs-number">3</span>] = <span class="hljs-number">26</span><br>ages[<span class="hljs-number">4</span>] = <span class="hljs-number">27</span><br><br>fmt.Println(ages) <span class="hljs-comment">// [23 24 25 26 27]</span><br></code></pre></td></tr></table></figure><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-08-02%2012.19.49-9414007.png" alt="截屏2022-08-02 12.19.49"></p><h4 id="初始化方式2：声明并赋值"><a href="#初始化方式2：声明并赋值" class="headerlink" title="初始化方式2：声明并赋值"></a>初始化方式2：声明并赋值</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> names = [<span class="hljs-number">3</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>&#125;<br><span class="hljs-keyword">var</span> ages = [<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>&#125;<br>fmt.Println(names) <span class="hljs-comment">// [张三 李四 王五]</span><br>fmt.Println(ages) <span class="hljs-comment">// [23 24 25]</span><br></code></pre></td></tr></table></figure><h4 id="初始化方式3：-…-不限长度"><a href="#初始化方式3：-…-不限长度" class="headerlink" title="初始化方式3： […]不限长度"></a>初始化方式3： […]不限长度</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> names = [...]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>&#125;<br><span class="hljs-keyword">var</span> ages = [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>&#125;<br>fmt.Println(names,reflect.TypeOf(names))  <span class="hljs-comment">// [张三 李四 王五] [3]string</span><br>fmt.Println(ages,reflect.TypeOf(ages))  <span class="hljs-comment">// [23 24 25] [3]int</span><br></code></pre></td></tr></table></figure><h4 id="初始化方式4：索引设置"><a href="#初始化方式4：索引设置" class="headerlink" title="初始化方式4：索引设置"></a>初始化方式4：索引设置</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> names = [...]<span class="hljs-type">string</span>&#123;<span class="hljs-number">0</span>:<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">2</span>:<span class="hljs-string">&quot;王五&quot;</span>&#125;<br>fmt.Println(names) <span class="hljs-comment">// [张三  王五]</span><br></code></pre></td></tr></table></figure><h3 id="6-2-3、基于索引访问和修改数组元素"><a href="#6-2-3、基于索引访问和修改数组元素" class="headerlink" title="6.2.3、基于索引访问和修改数组元素"></a>6.2.3、基于索引访问和修改数组元素</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> names = [...]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-string">&quot;赵六&quot;</span>,<span class="hljs-string">&quot;孙七&quot;</span>&#125;<br><span class="hljs-comment">// 索引取值</span><br>fmt.Println(names[<span class="hljs-number">2</span>])<br><span class="hljs-comment">// 修改元素值</span><br>names[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;zhangsan&quot;</span><br>fmt.Println(names)<br><span class="hljs-comment">// 切片取值</span><br>fmt.Println(names[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>]) <br>fmt.Println(names[<span class="hljs-number">0</span>:])<br>fmt.Println(names[:<span class="hljs-number">3</span>])<br><span class="hljs-comment">// 循环取值</span><br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>(names);i++&#123;<br>    fmt.Println(i,names[i])<br>&#125;<br><span class="hljs-keyword">for</span> k,v := <span class="hljs-keyword">range</span> names&#123;    <span class="hljs-comment">// range 表达式是副本参与循环</span><br>    fmt.Println(k,v)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-3、切片（slice）"><a href="#6-3、切片（slice）" class="headerlink" title="6.3、切片（slice）"></a>6.3、切片（slice）</h2><p>切片是一个动态数组，因为数组的长度是固定的，所以操作起来很不方便，比如一个names数组，我想增加一个学生姓名都没有办法，十分不灵活。所以在开发中数组并不常用，切片类型才是大量使用的。</p><h3 id="6-3-1、切片基本操作"><a href="#6-3-1、切片基本操作" class="headerlink" title="6.3.1、切片基本操作"></a>6.3.1、切片基本操作</h3><p>切片的创建有两种方式：</p><blockquote><ol><li>从数组或者切片上切取获得</li><li>直接声明切片  : <code>var name []Type</code> &#x2F;&#x2F; 不同于数组, []没有数字</li></ol></blockquote><p>切片语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">arr [start : end] 或者 slice [start : end]  <span class="hljs-comment">// start: 开始索引  end：结束索引</span><br></code></pre></td></tr></table></figure><p>切片特点：</p><blockquote><ol><li>左闭右开 [ )</li><li>取出的元素数量为：结束位置 - 开始位置；</li><li>取出元素不包含结束位置对应的索引，切片最后一个元素使用 <code>slice[len(slice)] </code>获取；</li><li>当缺省开始位置时，表示从连续区域开头到结束位置；当缺省结束位置时，表示从开始位置到整个连续区域末尾；两者同时缺省时，与切片本身等效；</li></ol></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">5</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>&#125;<br><span class="hljs-keyword">var</span> s1 = arr[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>]<br>fmt.Println(s1, reflect.TypeOf(s1)) <span class="hljs-comment">// [11 12 13] []int</span><br><span class="hljs-keyword">var</span> s2 = arr[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>fmt.Println(s2, reflect.TypeOf(s2)) <span class="hljs-comment">// [12 13 14]</span><br><span class="hljs-keyword">var</span> s3 = s2[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]                    <span class="hljs-comment">//  [12 13]</span><br></code></pre></td></tr></table></figure><p>思考：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs golang">s3[<span class="hljs-number">0</span>] = <span class="hljs-number">1000</span><br>fmt.Println(<span class="hljs-string">&quot;:::&quot;</span>, s1, s2, s3)<br></code></pre></td></tr></table></figure><h3 id="6-3-2、值类型和引用类型"><a href="#6-3-2、值类型和引用类型" class="headerlink" title="6.3.2、值类型和引用类型"></a>6.3.2、值类型和引用类型</h3><p>数据类型从存储方式分为两类：值类型和引用类型！</p><h4 id="1-值类型"><a href="#1-值类型" class="headerlink" title="(1) 值类型"></a>(1) 值类型</h4><p>基本数据类型(<code>int,float,bool,string</code>)以及数组和<code>struct</code>都属于值类型。</p><p>特点：变量直接存储值，内存通常在栈中分配，栈在函数调用完会被释放。值类型变量声明后，不管是否已经赋值，编译器为其分配内存，此时该值存储于栈上。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a <span class="hljs-type">int</span>       <span class="hljs-comment">//int类型默认值为 0</span><br><span class="hljs-keyword">var</span> b <span class="hljs-type">string</span>    <span class="hljs-comment">//string类型默认值为 nil空</span><br><span class="hljs-keyword">var</span> c <span class="hljs-type">bool</span>      <span class="hljs-comment">//bool类型默认值为false</span><br><span class="hljs-keyword">var</span> d [<span class="hljs-number">2</span>]<span class="hljs-type">int</span>    <span class="hljs-comment">//数组默认值为[0 0]</span><br></code></pre></td></tr></table></figure><p>当使用等号&#x3D;将一个变量的值赋给另一个变量时，如 j &#x3D; i ,实际上是在内存中将 i 的值进行了拷贝，可以通过 &amp;i 获取变量 i 的内存地址。此时如果修改某个变量的值，不会影响另一个。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 整型赋值</span><br><span class="hljs-keyword">var</span> a =<span class="hljs-number">10</span><br>b := a<br>b = <span class="hljs-number">101</span><br>fmt.Printf(<span class="hljs-string">&quot;a：%v，a的内存地址是%p\n&quot;</span>,a,&amp;a)<br>fmt.Printf(<span class="hljs-string">&quot;b：%v，b的内存地址是%p\n&quot;</span>,b,&amp;b)<br><span class="hljs-comment">//数组赋值</span><br><span class="hljs-keyword">var</span> c =[<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br>d := c<br>d[<span class="hljs-number">1</span>] = <span class="hljs-number">100</span><br>fmt.Printf(<span class="hljs-string">&quot;c：%v，c的内存地址是%p\n&quot;</span>,c,&amp;c)<br>fmt.Printf(<span class="hljs-string">&quot;d：%v，d的内存地址是%p\n&quot;</span>,d,&amp;d)<br></code></pre></td></tr></table></figure><h4 id="2-引用类型"><a href="#2-引用类型" class="headerlink" title="(2) 引用类型"></a>(2) 引用类型</h4><p><code>指针、slice，map，chan，interface</code>等都是引用类型。</p><p>特点：变量通过存储一个地址来存储最终的值。内存通常在堆上分配，通过GC回收。</p><blockquote><p>引用类型必须申请内存才可以使用，new()和make()是给引用类型申请内存空间。</p></blockquote><h3 id="6-3-3、切片原理"><a href="#6-3-3、切片原理" class="headerlink" title="6.3.3、切片原理"></a>6.3.3、切片原理</h3><p>切片的构造根本是对一个具体数组通过切片起始指针，切片长度以及最大容量三个参数确定下来的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Slice <span class="hljs-keyword">struct</span> &#123;<br>      Data <span class="hljs-type">uintptr</span>   <span class="hljs-comment">// 指针，指向底层数组中切片指定的开始位置</span><br>      Len <span class="hljs-type">int</span>        <span class="hljs-comment">// 长度，即切片的长度</span><br>      Cap <span class="hljs-type">int</span>        <span class="hljs-comment">// 最大长度（容量），也就是切片开始位置到数组的最后位置的长度 </span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-08-13%2017.10.32-0381871.png" alt="截屏2022-08-13 17.10.32"></p><p>举例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go">   <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">5</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>&#125;<br>s1 := arr[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>] <span class="hljs-comment">// 对数组切片</span><br>s2 := arr[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>s3 := s2[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>] <span class="hljs-comment">// 对切片切片</span><br><br>fmt.Println(s1) <span class="hljs-comment">// [10, 11, 12]</span><br>fmt.Println(s2) <span class="hljs-comment">// [12, 13, 14]</span><br>fmt.Println(s3) <span class="hljs-comment">// [12, 13]</span><br><br><span class="hljs-comment">// 地址是连续的</span><br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;arr)<br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;arr[<span class="hljs-number">0</span>]) <span class="hljs-comment">// 相差8个字节</span><br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;arr[<span class="hljs-number">1</span>])<br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;arr[<span class="hljs-number">2</span>])<br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;arr[<span class="hljs-number">3</span>])<br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;arr[<span class="hljs-number">4</span>])<br><br><span class="hljs-comment">// 每一个切片都有一块自己的空间地址，分别存储了对于数组的引用地址，长度和容量</span><br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;s1) <span class="hljs-comment">// s1自己的地址</span><br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;s1[<span class="hljs-number">0</span>])<br>fmt.Println(<span class="hljs-built_in">len</span>(s1), <span class="hljs-built_in">cap</span>(s1))<br><br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;s2) <span class="hljs-comment">// s2自己的地址</span><br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;s2[<span class="hljs-number">0</span>])<br>fmt.Println(<span class="hljs-built_in">len</span>(s2), <span class="hljs-built_in">cap</span>(s2))<br><br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;s3) <span class="hljs-comment">// s3自己的地址</span><br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;s3[<span class="hljs-number">0</span>])<br>fmt.Println(<span class="hljs-built_in">len</span>(s3), <span class="hljs-built_in">cap</span>(s3))<br></code></pre></td></tr></table></figure><p>练习题：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a = [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;<br>a1 := a[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<br>a2 := a[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]<br>a3 := a[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>]<br>a4 := a[<span class="hljs-number">1</span>:]<br>a5 := a[:]<br>a6 := a3[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]<br>fmt.Printf(<span class="hljs-string">&quot;a1的长度%d，容量%d\n&quot;</span>, <span class="hljs-built_in">len</span>(a1), <span class="hljs-built_in">cap</span>(a1))<br>fmt.Printf(<span class="hljs-string">&quot;a2的长度%d，容量%d\n&quot;</span>, <span class="hljs-built_in">len</span>(a2), <span class="hljs-built_in">cap</span>(a2))<br>fmt.Printf(<span class="hljs-string">&quot;a3的长度%d，容量%d\n&quot;</span>, <span class="hljs-built_in">len</span>(a3), <span class="hljs-built_in">cap</span>(a3))<br>fmt.Printf(<span class="hljs-string">&quot;a4的长度%d，容量%d\n&quot;</span>, <span class="hljs-built_in">len</span>(a4), <span class="hljs-built_in">cap</span>(a4))<br>fmt.Printf(<span class="hljs-string">&quot;a5的长度%d，容量%d\n&quot;</span>, <span class="hljs-built_in">len</span>(a5), <span class="hljs-built_in">cap</span>(a5))<br>fmt.Printf(<span class="hljs-string">&quot;a6的长度%d，容量%d\n&quot;</span>, <span class="hljs-built_in">len</span>(a6), <span class="hljs-built_in">cap</span>(a6))<br></code></pre></td></tr></table></figure><p>除了可以从原有的数组或者切片中生成切片外，也可以声明一个新的切片，每一种类型都可以拥有其切片类型，表示多个相同类型元素的连续集合，因此切片类型也可以被声明，切片类型声明格式如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> name []Type  <span class="hljs-comment">// []Type是切片类型的标识</span><br></code></pre></td></tr></table></figure><p>其中 name 表示切片的变量名，Type 表示切片对应的元素类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> names = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>&#125;<br>fmt.Println(names,reflect.TypeOf(names))  <span class="hljs-comment">// [张三 李四 王五 赵六 孙七] []string</span><br></code></pre></td></tr></table></figure><blockquote><p>直接声明切片，会针对切片构建底层数组，然后切片形成对数组的引用</p></blockquote><p>练习1</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang">s1 := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>s2 := s1[<span class="hljs-number">1</span>:]    <br>s2[<span class="hljs-number">1</span>] = <span class="hljs-number">4</span>       <br>fmt.Println(s1) <br></code></pre></td></tr></table></figure><p>练习2</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> a = []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>b := a<br>a[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br>fmt.Println(b)<br></code></pre></td></tr></table></figure><h3 id="6-3-4、make函数"><a href="#6-3-4、make函数" class="headerlink" title="6.3.4、make函数"></a>6.3.4、make函数</h3><p>变量的声明我们可以通过var关键字，然后就可以在程序中使用。当我们不指定变量的默认值时，这些变量的默认值是他们的零值，比如int类型的零值是0,string类型的零值是””，引用类型的零值是nil。</p><p>对于例子中的两种类型的声明，我们可以直接使用，对其进行赋值输出。但是如果我们换成引用类型呢？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// arr := []int&#123;&#125;</span><br><span class="hljs-keyword">var</span> arr [] <span class="hljs-type">int</span>  <span class="hljs-comment">// 如果是 var arr [2] int</span><br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>fmt.Println(arr)<br></code></pre></td></tr></table></figure><p>从这个提示中可以看出，对于引用类型的变量，我们不光要声明它，还要为它分配内容空间。</p><p>对于值类型的声明不需要，是因为已经默认帮我们分配好了。要分配内存，就引出来今天的make函数。make也是用于<code>chan</code>、<code>map</code>以及切片的内存创建，而且它返回的类型就是这三个类型本身。</p><p>如果需要动态地创建一个切片，可以使用 make() 内建函数，格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">make</span>([]Type, size, <span class="hljs-built_in">cap</span>)<br></code></pre></td></tr></table></figure><p>其中 Type 是指切片的元素类型，size 指的是为这个类型分配多少个元素，cap 为预分配的元素数量，这个值设定后不影响 size，只是能提前分配空间，降低多次分配空间造成的性能问题。 示例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">2</span>)<br>b := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">2</span>, <span class="hljs-number">10</span>)<br>fmt.Println(a, b)<br>fmt.Println(<span class="hljs-built_in">len</span>(a), <span class="hljs-built_in">len</span>(b))<br>fmt.Println(<span class="hljs-built_in">cap</span>(a), <span class="hljs-built_in">cap</span>(b))<br></code></pre></td></tr></table></figure><p>使用 make() 函数生成的切片一定发生了内存分配操作，但给定开始与结束位置（包括切片复位）的切片只是将新的切片结构指向已经分配好的内存区域，设定开始与结束位置，不会发生内存分配操作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">5</span>)  <br>b := a[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]        <br>a[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>         <br>fmt.Println(a)<br>fmt.Println(b)<br></code></pre></td></tr></table></figure><h3 id="6-3-5、append-重点"><a href="#6-3-5、append-重点" class="headerlink" title="6.3.5、append(重点)"></a>6.3.5、append(重点)</h3><p> 上面我们已经讲过，切片作为一个动态数组是可以添加元素的，添加方式为内建方法append。</p><h4 id="（1）append的基本用法"><a href="#（1）append的基本用法" class="headerlink" title="（1）append的基本用法"></a>（1）append的基本用法</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs golang">   <span class="hljs-keyword">var</span> emps = <span class="hljs-built_in">make</span>([]<span class="hljs-type">string</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>emps[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;张三&quot;</span><br>emps[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;李四&quot;</span><br>emps[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;王五&quot;</span><br>fmt.Println(emps)<br>emps2 := <span class="hljs-built_in">append</span>(emps, <span class="hljs-string">&quot;rain&quot;</span>)<br>fmt.Println(emps2)<br>emps3 := <span class="hljs-built_in">append</span>(emps2, <span class="hljs-string">&quot;eric&quot;</span>)<br>fmt.Println(emps3)<br><span class="hljs-comment">// 容量不够时发生二倍扩容</span><br>emps4 := <span class="hljs-built_in">append</span>(emps3, <span class="hljs-string">&quot;yuan&quot;</span>)<br>fmt.Println(emps4) <span class="hljs-comment">// 此时底层数组已经发生变化</span><br></code></pre></td></tr></table></figure><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-08-13%2018.45.44-0387563.png" alt="截屏2022-08-13 18.45.44"></p><p><strong>扩容机制</strong></p><blockquote><p>1、每次 append 操作都会检查 slice 是否有足够的容量，如果足够会直接在原始数组上追加元素并返回一个新的 slice，底层数组不变，但是这种情况非常危险，极度容易产生 bug！而若容量不够，会创建一个新的容量足够的底层数组，先将之前数组的元素复制过来，再将新元素追加到后面，然后返回新的 slice，底层数组改变而这里对新数组的进行扩容</p><p>2、扩容策略：如果切片的容量小于 1024 个元素，于是扩容的时候就翻倍增加容量。上面那个例子也验证了这一情况，总容量从原来的4个翻倍到现在的8个。一旦元素个数超过 1024 个元素，那么增长因子就变成 1.25 ，即每次增加原来容量的四分之一。</p></blockquote><p><strong>经典面试题</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">arr := [<span class="hljs-number">4</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;<br>s1 := arr[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>] <span class="hljs-comment">// [10, 20]</span><br>s2 := s1       <span class="hljs-comment">//  // [10, 20]</span><br>s3 := <span class="hljs-built_in">append</span>(<span class="hljs-built_in">append</span>(<span class="hljs-built_in">append</span>(s1, <span class="hljs-number">1</span>), <span class="hljs-number">2</span>), <span class="hljs-number">3</span>)<br>s1[<span class="hljs-number">0</span>] = <span class="hljs-number">1000</span><br>fmt.Println(s1)<br>fmt.Println(s2)<br>fmt.Println(s3)<br>fmt.Println(arr)<br></code></pre></td></tr></table></figure><h4 id="（2）append的扩展用法"><a href="#（2）append的扩展用法" class="headerlink" title="（2）append的扩展用法"></a>（2）append的扩展用法</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> a []<span class="hljs-type">int</span><br>a = <span class="hljs-built_in">append</span>(a, <span class="hljs-number">1</span>) <span class="hljs-comment">// 追加1个元素</span><br>fmt.Println(a)<br>a = <span class="hljs-built_in">append</span>(a, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// 追加多个元素, 手写解包方式</span><br>fmt.Println(a)<br>a = <span class="hljs-built_in">append</span>(a, []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;...) <span class="hljs-comment">// 追加一个切片, 切片需要解包</span><br>fmt.Println(a)<br></code></pre></td></tr></table></figure><blockquote><p>a &#x3D; append(a, 1)返回切片又重新赋值a的目的是丢弃老数组</p></blockquote><p>经典练习：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs golang">   <span class="hljs-comment">// 案例1</span><br>a := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>&#125;<br>fmt.Println(<span class="hljs-built_in">len</span>(a), <span class="hljs-built_in">cap</span>(a))<br><br>c := <span class="hljs-built_in">append</span>(a, <span class="hljs-number">44</span>)<br>a[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br>fmt.Println(a)<br>fmt.Println(c)<br><br><span class="hljs-comment">// 案例2</span><br>a := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>)<br>fmt.Println(a)<br>b := <span class="hljs-built_in">append</span>(a, <span class="hljs-number">11</span>, <span class="hljs-number">22</span>)<br>fmt.Println(a) <span class="hljs-comment">// 小心a等于多少？</span><br>fmt.Println(b)<br>a[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br>fmt.Println(a)<br>fmt.Println(b)<br><br><span class="hljs-comment">// 案例3</span><br>l := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<br>v1 := <span class="hljs-built_in">append</span>(l, <span class="hljs-number">1</span>)<br>fmt.Println(v1)<br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;v1)<br>v2 := <span class="hljs-built_in">append</span>(l, <span class="hljs-number">2</span>)<br>fmt.Println(v2)<br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;v2)<br>fmt.Println(v1)<br><br></code></pre></td></tr></table></figure><h3 id="6-2-6、切片的插入和删除"><a href="#6-2-6、切片的插入和删除" class="headerlink" title="6.2.6、切片的插入和删除"></a>6.2.6、切片的插入和删除</h3><h4 id="开头添加元素"><a href="#开头添加元素" class="headerlink" title="开头添加元素"></a>开头添加元素</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a = []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br>a = <span class="hljs-built_in">append</span>([]<span class="hljs-type">int</span>&#123;<span class="hljs-number">0</span>&#125;, a...) <span class="hljs-comment">// 在开头添加1个元素</span><br>a = <span class="hljs-built_in">append</span>([]<span class="hljs-type">int</span>&#123;<span class="hljs-number">-3</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">-1</span>&#125;, a...) <span class="hljs-comment">// 在开头添加1个切片</span><br></code></pre></td></tr></table></figure><blockquote><p>在切片开头添加元素一般都会导致内存的重新分配，而且会导致已有元素全部被复制 1 次，因此，从切片的开头添加元素的性能要比从尾部追加元素的性能差很多。</p></blockquote><h4 id="任意位置插入元素"><a href="#任意位置插入元素" class="headerlink" title="任意位置插入元素"></a>任意位置插入元素</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a []<span class="hljs-type">int</span><br>a = <span class="hljs-built_in">append</span>(a[:i], <span class="hljs-built_in">append</span>([]<span class="hljs-type">int</span>&#123;x&#125;, a[i:]...)...) <span class="hljs-comment">// 在第i个位置插入x</span><br>a = <span class="hljs-built_in">append</span>(a[:i], <span class="hljs-built_in">append</span>([]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;, a[i:]...)...) <span class="hljs-comment">// 在第i个位置插入切片</span><br></code></pre></td></tr></table></figure><p>每个添加操作中的第二个 append 调用都会创建一个临时切片，并将 a[i:] 的内容复制到新创建的切片中，然后将临时创建的切片再追加到 a[:i] 中。</p><p>思考这样写可以不：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a = []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;<br>s1:=a[:<span class="hljs-number">2</span>]<br>s2:=a[<span class="hljs-number">2</span>:]<br>fmt.Println(<span class="hljs-built_in">append</span>(<span class="hljs-built_in">append</span>(s1,<span class="hljs-number">100</span>,),s2...))<br></code></pre></td></tr></table></figure><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><p>Go语言中并没有删除切片元素的专用方法，我们可以使用切片本身的特性来删除元素。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 从切片中删除元素</span><br>a := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>, <span class="hljs-number">34</span>, <span class="hljs-number">35</span>, <span class="hljs-number">36</span>, <span class="hljs-number">37</span>&#125;<br><span class="hljs-comment">// 要删除索引为2的元素</span><br>a = <span class="hljs-built_in">append</span>(a[:<span class="hljs-number">2</span>], a[<span class="hljs-number">3</span>:]...)<br>fmt.Println(a) <span class="hljs-comment">//[30 31 33 34 35 36 37]</span><br></code></pre></td></tr></table></figure><blockquote><p>要从切片a中删除索引为<code>index</code>的元素，操作方法是<code>a = append(a[:index], a[index+1:]...)</code></p></blockquote><p>思考题：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">a:=[...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br>b:=a[:]<br>b =<span class="hljs-built_in">append</span>(b[:<span class="hljs-number">1</span>],b[<span class="hljs-number">2</span>:]...)<br>fmt.Println(a)<br>fmt.Println(b)<br></code></pre></td></tr></table></figure><h3 id="6-2-7、切片元素排序"><a href="#6-2-7、切片元素排序" class="headerlink" title="6.2.7、切片元素排序"></a>6.2.7、切片元素排序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go">a:=[]<span class="hljs-type">int</span>&#123;<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">100</span>&#125;<br>sort.Ints(a)<br>fmt.Println(a)  <span class="hljs-comment">// [2 3 10 100]</span><br><br>b:=[]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;melon&quot;</span>,<span class="hljs-string">&quot;banana&quot;</span>,<span class="hljs-string">&quot;caomei&quot;</span>,<span class="hljs-string">&quot;apple&quot;</span>&#125;<br>sort.Strings(b)<br>fmt.Println(b) <span class="hljs-comment">// [apple banana caomei melon]</span><br><br>c:=[]<span class="hljs-type">float64</span>&#123;<span class="hljs-number">3.14</span>,<span class="hljs-number">5.25</span>,<span class="hljs-number">1.12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">78</span>&#125;<br>sort.Float64s(c)<br>fmt.Println(c) <span class="hljs-comment">// [1.12 3.14 4 5.25 78]</span><br><br><span class="hljs-comment">// 注意：如果是一个数组，需要先转成切片再排序  [:]</span><br><br>sort.Sort(sort.Reverse(sort.IntSlice(a)))<br>sort.Sort(sort.Reverse(sort.Float64Slice(c)))<br>fmt.Println(a,c)<br></code></pre></td></tr></table></figure><h3 id="6-2-8、切片拷贝"><a href="#6-2-8、切片拷贝" class="headerlink" title="6.2.8、切片拷贝"></a>6.2.8、切片拷贝</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">var</span> s1 = []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br><span class="hljs-keyword">var</span> s2 = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>(s1))<br><span class="hljs-built_in">copy</span>(s2, s1)<br>fmt.Println(s2)<br><br>s3 := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>s4 := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;<br><span class="hljs-built_in">copy</span>(s4, s3)<br>fmt.Println(s4) <span class="hljs-comment">//[4 5 3]</span><br></code></pre></td></tr></table></figure><h2 id="6-3、map（映射）类型"><a href="#6-3、map（映射）类型" class="headerlink" title="6.3、map（映射）类型"></a>6.3、map（映射）类型</h2><p>通过切片，我们可以动态灵活存储管理学生姓名、年龄等信息，比如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">names := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>&#125;<br>ages := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>&#125;<br>fmt.Println(names)<br>fmt.Println(ages)<br></code></pre></td></tr></table></figure><p>但是如果我想获取张三的年龄，这是一个再简单不过的需求，但是却非常麻烦，我们需要先获取张三的切片索引，再去ages切片中对应索引取出，前提还得是姓名年龄按索引对应存储。</p><p>所以在编程语言中大都会存在一种映射（key-value）类型，在<code>JS</code>中叫<code>json</code>对象类型，在python中叫字典（<code>dict</code>）类型，而在Go语言中则叫Map类型。</p><blockquote><ol><li>Map是一种通过key来获取value的一个数据结构，其底层存储方式为数组，在存储时key不能重复，当key重复时，value进行覆盖，我们通过key进行hash运算（可以简单理解为把key转化为一个整形数字）然后对数组的长度取余，得到key存储在数组的哪个下标位置，最后将key和value组装为一个结构体，放入数组下标处</li><li>slice查询是遍历方式，时间复杂度是O(n), map查询是hash映射 ;当数据量小的时候切片查询比map快，但是数据量大的时候map的优势就体现出来了</li></ol></blockquote><h3 id="6-3-1、map的声明和初始化"><a href="#6-3-1、map的声明和初始化" class="headerlink" title="6.3.1、map的声明和初始化"></a>6.3.1、map的声明和初始化</h3><p>不同于切片根据索引查找值，map类型是根据key查找值。</p><p>map 是引用类型，声明语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> map_name <span class="hljs-keyword">map</span>[key_type]value_type<br></code></pre></td></tr></table></figure><p>其中：</p><blockquote><ul><li><code>map_name</code> 为 map 的变量名。</li><li><code>key_type</code>为键类型。</li><li><code>value_type</code>是键对应的值类型。</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> info <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span><br>fmt.Println(info)   <span class="hljs-comment">// map[]</span><br></code></pre></td></tr></table></figure><h4 id="1-先声明再赋值"><a href="#1-先声明再赋值" class="headerlink" title="(1) 先声明再赋值"></a>(1) 先声明再赋值</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// var info map[string]string   // 没有默认空间</span><br>info := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>)<br>info[<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&quot;yuan&quot;</span><br>info[<span class="hljs-string">&quot;age&quot;</span>] = <span class="hljs-string">&quot;23&quot;</span><br>fmt.Println(info)  <span class="hljs-comment">// map[age:23 name:yuan]  </span><br></code></pre></td></tr></table></figure><blockquote><ol><li>map的键是无序的</li><li>map的键不能重复</li></ol></blockquote><h4 id="2-直接声明赋值"><a href="#2-直接声明赋值" class="headerlink" title="(2) 直接声明赋值"></a>(2) 直接声明赋值</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">info := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;yuan&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;23&quot;</span>,<span class="hljs-string">&quot;gender&quot;</span>:<span class="hljs-string">&quot;male&quot;</span>&#125;<br>fmt.Println(info) <span class="hljs-comment">// map[age:18 gender:male name:yuan]</span><br></code></pre></td></tr></table></figure><h3 id="6-3-2、map的增删改查"><a href="#6-3-2、map的增删改查" class="headerlink" title="6.3.2、map的增删改查"></a>6.3.2、map的增删改查</h3><h4 id="（1）-查"><a href="#（1）-查" class="headerlink" title="（1） 查"></a>（1） 查</h4><ul><li>通过key访问值</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">info := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;yuan&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;18&quot;</span>,<span class="hljs-string">&quot;gender&quot;</span>:<span class="hljs-string">&quot;male&quot;</span>&#125;<br>val:= info[<span class="hljs-string">&quot;name&quot;</span>]<br><br>val,is_exist:= info[<span class="hljs-string">&quot;name&quot;</span>]  <span class="hljs-comment">// 判断某个键是否存在map数据中</span><br><span class="hljs-keyword">if</span> is_exist&#123;<br>    fmt.Println(val)<br>    fmt.Println(is_exist)<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;键不存在！&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>循环访问所有键值</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> k,v :=<span class="hljs-keyword">range</span> info&#123;<br>    fmt.Println(k,v)  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs golang">noSortMap := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>&#123;<br><span class="hljs-number">1</span>: <span class="hljs-number">1</span>,<br><span class="hljs-number">2</span>: <span class="hljs-number">2</span>,<br><span class="hljs-number">3</span>: <span class="hljs-number">3</span>,<br><span class="hljs-number">4</span>: <span class="hljs-number">4</span>,<br><span class="hljs-number">5</span>: <span class="hljs-number">5</span>,<br><span class="hljs-number">6</span>: <span class="hljs-number">6</span>,<br>&#125;<br><br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> noSortMap &#123;    <span class="hljs-comment">// for range顺序随机</span><br>fmt.Println(k, v)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）添加和更新"><a href="#（2）添加和更新" class="headerlink" title="（2）添加和更新"></a>（2）添加和更新</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang">info := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;yuan&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;18&quot;</span>,<span class="hljs-string">&quot;gender&quot;</span>:<span class="hljs-string">&quot;male&quot;</span>&#125;<br>info[<span class="hljs-string">&quot;height&quot;</span>] = <span class="hljs-string">&quot;180cm&quot;</span>  <span class="hljs-comment">// 键不存在，则是添加键值对</span><br>info[<span class="hljs-string">&quot;age&quot;</span>] = <span class="hljs-string">&quot;22&quot;</span>  <span class="hljs-comment">// 键存在，则是更新键的值</span><br>fmt.Println(info)  <span class="hljs-comment">// map[age:22 gender:male height:180cm name:yuan]</span><br></code></pre></td></tr></table></figure><h4 id="（3）删除键值对"><a href="#（3）删除键值对" class="headerlink" title="（3）删除键值对"></a>（3）删除键值对</h4><p>一个内置函数 delete()，用于删除容器内的元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">info := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;yuan&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;18&quot;</span>,<span class="hljs-string">&quot;gender&quot;</span>:<span class="hljs-string">&quot;male&quot;</span>&#125;<br><span class="hljs-built_in">delete</span>(info,<span class="hljs-string">&quot;gender&quot;</span>)<br>fmt.Println(info)<br></code></pre></td></tr></table></figure><blockquote><p>如果想清空一个map，最优方式即创建一个新的map！</p></blockquote><h3 id="6-3-3、map-容量"><a href="#6-3-3、map-容量" class="headerlink" title="6.3.3、map 容量"></a>6.3.3、map 容量</h3><p>和数组不同，map 可以根据新增的 key-value 动态的伸缩，因此它不存在固定长度或者最大限制，但是也可以选择标明 map 的初始容量 capacity，格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[keytype]valuetype, <span class="hljs-built_in">cap</span>)<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]float, <span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><p>当 map 增长到容量上限的时候，如果再增加新的 key-value，map 的大小会自动加 1，所以出于性能的考虑，对于大的 map 或者会快速扩张的 map，即使只是大概知道容量，也最好先标明。</p><h3 id="6-3-4、map的灵活运用"><a href="#6-3-4、map的灵活运用" class="headerlink" title="6.3.4、map的灵活运用"></a>6.3.4、map的灵活运用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 案例1</span><br>data := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>][]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;hebei&quot;</span>: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;廊坊市&quot;</span>, <span class="hljs-string">&quot;石家庄&quot;</span>, <span class="hljs-string">&quot;邯郸&quot;</span>&#125;, <span class="hljs-string">&quot;beijing&quot;</span>: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;朝阳&quot;</span>, <span class="hljs-string">&quot;丰台&quot;</span>, <span class="hljs-string">&quot;海淀&quot;</span>&#125;&#125;<br><span class="hljs-comment">// 打印河北的第二个城市</span><br><span class="hljs-comment">// 循环打印每个省份的名字和城市数量</span><br><span class="hljs-comment">// 添加一个新的省份和城市的key-value</span><br><span class="hljs-comment">// 删除北京的key-value</span><br><br><span class="hljs-comment">// 案例2</span><br>info := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-number">1001</span>: &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;yuan&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;23&quot;</span>&#125;, <span class="hljs-number">1002</span>: &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;alvin&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;33&quot;</span>&#125;&#125;<br><span class="hljs-comment">// 打印学号为1002的学生的年龄</span><br><span class="hljs-comment">// 循环打印每个学员的学号，姓名，年龄</span><br><span class="hljs-comment">// 添加一个新的学员</span><br><span class="hljs-comment">// 删除1001的学生</span><br><br><span class="hljs-comment">// 案例3</span><br>stus := []<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;yuan&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;23&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;rain&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;22&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;32&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;eric&quot;</span>&#125;&#125;<br><span class="hljs-comment">// 打印第二个学生的姓名</span><br><span class="hljs-comment">// 循环打印每一个学生的姓名和年龄</span><br><span class="hljs-comment">// 添加一个新的学生map</span><br><span class="hljs-comment">// 删除一个学生map</span><br><span class="hljs-comment">// 将姓名为rain的学生的年龄自加一岁</span><br></code></pre></td></tr></table></figure><h3 id="6-3-5、练习"><a href="#6-3-5、练习" class="headerlink" title="6.3.5、练习"></a>6.3.5、练习</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 根据age的大小重新排序</span><br>stus := []<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">23</span>&#125;, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">33</span>&#125;, <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>&#125;&#125;<br>fmt.Println(stus)<br></code></pre></td></tr></table></figure><h3 id="6-3-6、map的底层原理"><a href="#6-3-6、map的底层原理" class="headerlink" title="6.3.6、map的底层原理"></a>6.3.6、map的底层原理</h3><h4 id="（1）摘要算法"><a href="#（1）摘要算法" class="headerlink" title="（1）摘要算法"></a>（1）摘要算法</h4><p>“消息摘要”（Message Digest）是一种能产生特殊输出格式的算法，这种加密算法的特点是无论用户输入什么长度的原始数据，经过计算后输出的密文都是固定长度的，这种算法的原理是根据一定的运算规则对原数据进行某种形式的提取，这种提取就是“摘要”，被“摘要”的数据内容与原数据有密切联系，只要原数据稍有改变，输出的“摘要”便完全不同，因此基于这种原理的算法便能对数据完整性提供较为健全的保障。但是，由于输出的密文是提取原数据经过处理的定长值，所以它已经不能还原为原数据，即消息摘要算法是<strong>“不可逆”</strong>的，理论上无法通过反向运算取得原数据内容，因此它通常只能被用来做数据完整性验证，而不能作为原数据内容的加密方案使用，否则谁也无法还原。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;crypto/md5&quot;</span><br><span class="hljs-string">&quot;crypto/sha1&quot;</span><br><span class="hljs-string">&quot;crypto/sha256&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//输⼊字符串测试开始.</span><br>input := <span class="hljs-string">&quot;k4&quot;</span><br><span class="hljs-comment">//MD5算法.</span><br>hash := md5.New()<br>_, err := hash.Write([]<span class="hljs-type">byte</span>(input))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>os.Exit(<span class="hljs-number">-1</span>)<br>&#125;<br>result := hash.Sum(<span class="hljs-literal">nil</span>)<br><span class="hljs-comment">//或者result := hash.Sum([]byte(&quot;&quot;))</span><br>fmt.Printf(<span class="hljs-string">&quot;md5 hash算法长度为%d,结果：%x\n&quot;</span>, <span class="hljs-built_in">len</span>(result), result)<br><span class="hljs-comment">//SHA1算法.</span><br>hash = sha1.New()<br>_, err = hash.Write([]<span class="hljs-type">byte</span>(input))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>os.Exit(<span class="hljs-number">-1</span>)<br>&#125;<br>result = hash.Sum(<span class="hljs-literal">nil</span>)<br><span class="hljs-comment">//或者result = hash.Sum([]byte(&quot;&quot;))</span><br>fmt.Printf(<span class="hljs-string">&quot;sha1 hash算法长度为%d,结果：%x\n&quot;</span>, <span class="hljs-built_in">len</span>(result), result)<br><span class="hljs-comment">//SHA256算法.</span><br>hash = sha256.New()<br>_, err = hash.Write([]<span class="hljs-type">byte</span>(input))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>os.Exit(<span class="hljs-number">-1</span>)<br>&#125;<br>result = hash.Sum(<span class="hljs-literal">nil</span>)<br><span class="hljs-comment">//或者result = hash.Sum([]byte(&quot;&quot;))</span><br>fmt.Printf(<span class="hljs-string">&quot;sha256 hash算法长度为%d,结果：%x\n&quot;</span>, <span class="hljs-built_in">len</span>(result), result)<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）map底层存储"><a href="#（2）map底层存储" class="headerlink" title="（2）map底层存储"></a>（2）map底层存储</h4><p>哈希表属于编程中比较常见的数据结构之一，基本上所有的语言都会实现数组和哈希表这两种结构。</p><blockquote><p>slice查询是遍历⽅式，时间复杂度是O(n)</p><p>map查询是hash映射，时间复杂度是O(1)</p></blockquote><p>在go的map实现中，它的底层结构体是hmap，hmap⾥维护着若⼲个bucket数组 (即桶数组)。</p><p>Bucket数组中每个元素都是bmap结构，也即每个bucket（桶）都是bmap结构，【ps：后⽂为了语义⼀致，和⽅便理解，就不再提bmap 了，统⼀叫作桶】 每个桶中保存了8个kv对，如果8个满了，⼜来了⼀个key落在了这个桶⾥，会使⽤overflow连接下⼀个桶(溢出桶)。</p><p>map 的源码位于 src&#x2F;runtime&#x2F;map.go 文件中，结构如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">type</span> hmap <span class="hljs-keyword">struct</span> &#123; <br>                  count     <span class="hljs-type">int</span> <span class="hljs-comment">// 当前 map 中元素数量 </span><br>                  flags     <span class="hljs-type">uint8</span> <br>                  B         <span class="hljs-type">uint8</span>  <span class="hljs-comment">// 当前 buckets 数量，2^B 等于 buckets 个数 </span><br>                  noverflow <span class="hljs-type">uint16</span> <span class="hljs-comment">// approximate number of overflow buckets; see incrnoverflow for details </span><br>                  hash0     <span class="hljs-type">uint32</span> <span class="hljs-comment">// 哈希种子 </span><br>  <br>                  buckets    unsafe.Pointer <span class="hljs-comment">// buckets 数组指针 </span><br>                  oldbuckets unsafe.Pointer <span class="hljs-comment">// 扩容时保存之前 buckets 数据。 </span><br>                  nevacuate  <span class="hljs-type">uintptr</span>        <span class="hljs-comment">// progress counter for evacuation (buckets less than this have been evacuated) </span><br><br>                  extra *mapextra <span class="hljs-comment">// optional fields </span><br>&#125; <br></code></pre></td></tr></table></figure><table><thead><tr><th>count</th><th>键值对的数量</th></tr></thead><tbody><tr><td>B</td><td>2^B&#x3D;len(buckets)</td></tr><tr><td>hash0</td><td>hash因子</td></tr><tr><td>buckets</td><td>指向一个数组(连续内存空间)，数组的类型为[]bmap，bmap类型就是存在键值对的结构下面会详细介绍，这个字段我们可以称之为正常桶。<strong>如下图所示</strong></td></tr><tr><td>oldbuckets</td><td>扩容时，存放之前的buckets(Map扩容相关字段)</td></tr><tr><td>extra</td><td>溢出桶结构，正常桶里面某个bmap存满了，会使用这里面的内存空间存放键值对</td></tr><tr><td>noverflow</td><td>溢出桶里bmap大致的数量</td></tr><tr><td>nevacuate</td><td>分流次数，成倍扩容分流操作计数的字段(Map扩容相关字段)</td></tr><tr><td>flags</td><td>状态标识，比如正在被写、buckets和oldbuckets在被遍历、等量扩容(Map扩容相关字段)</td></tr></tbody></table><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// 每一个 bucket 的结构，即 hmap 中 buckets 指向的数据。 </span><br><span class="hljs-keyword">type</span> bmap <span class="hljs-keyword">struct</span> &#123; <br>    tophash [bucketCnt]<span class="hljs-type">uint8</span> <br>&#125; <br><span class="hljs-comment">// 编译期间重构此结构 </span><br><span class="hljs-keyword">type</span> bmap <span class="hljs-keyword">struct</span> &#123; <br>    topbits  [<span class="hljs-number">8</span>]<span class="hljs-type">uint8</span> <br>    keys     [<span class="hljs-number">8</span>]keytype <br>    values   [<span class="hljs-number">8</span>]valuetype <br>    pad      <span class="hljs-type">uintptr</span> <br>    overflow <span class="hljs-type">uintptr</span> <br>&#125; <br></code></pre></td></tr></table></figure><table><thead><tr><th>topbits</th><th>长度为8的数组，[]uint8，元素为：key获取的hash的高8位，遍历时对比使用，提高性能。<strong>如下图所示</strong></th></tr></thead><tbody><tr><td>keys</td><td>长度为8的数组，[]keytype，元素为：具体的key值。每个bucket可以存储8个键值对</td></tr><tr><td>elems</td><td>长度为8的数组，[]elemtype，元素为：键值对的key对应的值。</td></tr><tr><td>overflow</td><td>指向的<code>hmap.extra.overflow</code>溢出桶里的<code>bmap</code>，上面的字段<code>topbits</code>、<code>keys</code>、<code>elems</code>长度为8，最多存8组键值对，存满了就往指向的这个<code>bmap</code>里存</td></tr><tr><td>pad</td><td>对齐内存使用的，不是每个bmap都有会这个字段，需要满足一定条件</td></tr></tbody></table><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-08-06%2015.29.13-9770980.png" alt="截屏2022-08-06 15.29.13"></p><h4 id="（1）插入key-value"><a href="#（1）插入key-value" class="headerlink" title="（1）插入key-value"></a>（1）插入key-value</h4><p><strong>map的赋值流程可总结位如下几步：</strong></p><blockquote><p>map的赋值流程可总结位如下⼏步：</p><p>&lt;1&gt; 通过key的hash值后“B”位确定是哪⼀个桶，图中⽰例为5号桶。</p><p>&lt;2&gt; 遍历当前桶，通过key的tophash和hash值，防⽌key重复。如果key已存在则直接更新值。如果没找到将key，将key插入到第⼀个可以插⼊的位置，即空位置处存储数据。</p><p>&lt;3&gt; 如果当前桶元素已满，会通过overflow链接创建⼀个新的桶，来存储数据。</p></blockquote><h4 id="（2）查询key-value"><a href="#（2）查询key-value" class="headerlink" title="（2）查询key-value"></a>（2）查询key-value</h4><p>参考上图，k4的get流程可以归纳为如下⼏步：</p><blockquote><p>&lt;1&gt; 计算k4的hash值。[由于当前主流机都是64位操作系统，所以计算结果有64个⽐特位]</p><p>&lt;2&gt; 通过最后的“B”位来确定在哪号桶，此时B为4，所以取k4对应哈希值的后4位，也就是0101，0101⽤⼗进制表⽰为5，所以在5号桶）</p><p>&lt;3&gt; 根据k4对应的hash值前8位快速确定是在这个桶的哪个位置（额外说明⼀下，在bmap中存放了每个key对应的tophash，是key的哈希值前8位),⼀旦发现前8位⼀致，则会执⾏下⼀步</p><p>&lt;4&gt; 对⽐key完整的hash是否匹配，如果匹配则获取对应value</p><p>&lt;5&gt; 如果都没有找到，就去连接的下⼀个溢出桶中找</p><p>有很多同学会问这⾥为什么要多维护⼀个tophash，即hash前8位？</p><p>这是因为tophash可以快速确定key是否正确，也可以把它理解成⼀种缓存措施，如果前8位都不对了，后⾯就没有必要⽐较了。</p></blockquote><h1 id="七、函数"><a href="#七、函数" class="headerlink" title="七、函数"></a>七、函数</h1><p>设计一个程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">打印两个六层菱形</span><br><span class="hljs-comment">期待结果：</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">    ***</span><br><span class="hljs-comment">   *****</span><br><span class="hljs-comment">  *******</span><br><span class="hljs-comment"> *********</span><br><span class="hljs-comment">***********</span><br><span class="hljs-comment"> *********</span><br><span class="hljs-comment">  *******</span><br><span class="hljs-comment">   *****</span><br><span class="hljs-comment">    ***</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">    ***</span><br><span class="hljs-comment">   *****</span><br><span class="hljs-comment">  *******</span><br><span class="hljs-comment"> *********</span><br><span class="hljs-comment">***********</span><br><span class="hljs-comment"> *********</span><br><span class="hljs-comment">  *******</span><br><span class="hljs-comment">   *****</span><br><span class="hljs-comment">    ***</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">*/</span>     <br></code></pre></td></tr></table></figure><p>如果没有函数，我们的实现方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 打印菱形</span><br><br><span class="hljs-comment">// 层数</span><br><span class="hljs-keyword">var</span> n <span class="hljs-type">int</span> = <span class="hljs-number">6</span><br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= n; i++ &#123;<br>    <span class="hljs-keyword">for</span> k := <span class="hljs-number">1</span>; k &lt;= n-i; k++ &#123;<br>        fmt.Print(<span class="hljs-string">&quot; &quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>; j++ &#123;<br>        fmt.Print(<span class="hljs-string">&quot;*&quot;</span>)<br>    &#125;<br>    fmt.Println()<br>&#125;<br><br><span class="hljs-keyword">for</span> i := n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i-- &#123;<br>    <span class="hljs-keyword">for</span> k := <span class="hljs-number">1</span>; k &lt;= n-i; k++ &#123;<br>        fmt.Print(<span class="hljs-string">&quot; &quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>; j++ &#123;<br>        fmt.Print(<span class="hljs-string">&quot;*&quot;</span>)<br>    &#125;<br>    fmt.Println()<br>&#125;<br><br><span class="hljs-comment">// 再次打印菱形</span><br><br><span class="hljs-keyword">var</span> n <span class="hljs-type">int</span> = <span class="hljs-number">6</span><br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= n; i++ &#123;<br>    <span class="hljs-keyword">for</span> k := <span class="hljs-number">1</span>; k &lt;= n-i; k++ &#123;<br>        fmt.Print(<span class="hljs-string">&quot; &quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>; j++ &#123;<br>        fmt.Print(<span class="hljs-string">&quot;*&quot;</span>)<br>    &#125;<br>    fmt.Println()<br>&#125;<br><br><span class="hljs-keyword">for</span> i := n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i-- &#123;<br>    <span class="hljs-keyword">for</span> k := <span class="hljs-number">1</span>; k &lt;= n-i; k++ &#123;<br>        fmt.Print(<span class="hljs-string">&quot; &quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>; j++ &#123;<br>        fmt.Print(<span class="hljs-string">&quot;*&quot;</span>)<br>    &#125;<br>    fmt.Println()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>相信大家一定看出来了，这种方式会出现大量重复代码，对于阅读和维护整个程序都会变得十分麻烦。</p><p>这时候，函数就出现了！</p><p>简单说，函数就是一段封装好的，可以重复使用的代码，它使得我们的程序更加模块化，避免大量重复的代码。</p><p>刚才的程序函数版本：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printLing</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-comment">// 打印菱形</span><br><br><span class="hljs-keyword">var</span> n <span class="hljs-type">int</span> = <span class="hljs-number">6</span><br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= n; i++ &#123;<br><span class="hljs-keyword">for</span> k := <span class="hljs-number">1</span>; k &lt;= n-i; k++ &#123;<br>fmt.Print(<span class="hljs-string">&quot; &quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>; j++ &#123;<br>fmt.Print(<span class="hljs-string">&quot;*&quot;</span>)<br>&#125;<br>fmt.Println()<br>&#125;<br><br><span class="hljs-keyword">for</span> i := n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i-- &#123;<br><span class="hljs-keyword">for</span> k := <span class="hljs-number">1</span>; k &lt;= n-i; k++ &#123;<br>fmt.Print(<span class="hljs-string">&quot; &quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">2</span>*i<span class="hljs-number">-1</span>; j++ &#123;<br>fmt.Print(<span class="hljs-string">&quot;*&quot;</span>)<br>&#125;<br>fmt.Println()<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    <span class="hljs-comment">// 打印菱形</span><br>    printLing()<br>    <span class="hljs-comment">// 打印菱形</span><br>printLing()<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="7-1、函数声明和调用"><a href="#7-1、函数声明和调用" class="headerlink" title="7.1、函数声明和调用"></a>7.1、函数声明和调用</h2><p>go语言是通过<code>func</code>关键字声明一个函数的，声明语法格式如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> 函数名<span class="hljs-params">(形式参数)</span></span> (返回值) &#123;<br>        函数体<br>        <span class="hljs-keyword">return</span> 返回值   <span class="hljs-comment">// 函数终止语句</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li>函数名：由字母、数字、下划线组成。但函数名的第一个字母不能是数字。在同一个包内，函数名也称不能重名（包的概念详见后文）。</li><li>形式参数：参数由参数变量和参数变量的类型组成，多个参数之间使用<code>,</code>分隔。</li><li>返回值：返回值由返回值变量和其变量类型组成，也可以只写返回值的类型，多个返回值必须用<code>()</code>包裹，并用<code>,</code>分隔。</li><li>函数体：实现指定功能的代码块。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cal_sum100</span><span class="hljs-params">()</span></span>  &#123;<br><br><span class="hljs-comment">// 计算1-100的和</span><br><span class="hljs-keyword">var</span> s = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++ &#123;<br>s += i<br>&#125;<br>fmt.Println(s)<br>&#125;<br></code></pre></td></tr></table></figure><p>声明一个函数并不会执行函数内代码，只是完成一个一个包裹的作用。真正运行函数内的代码还需要对声明的函数进行调用，一个函数可以在任意位置多次调用。调用一次，即执行一次该函数内的代码。</p><p>调用语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">函数名()     <span class="hljs-comment">// 无参数的情况</span><br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cal_sum100</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-comment">// 计算1-100的和</span><br><span class="hljs-keyword">var</span> s = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++ &#123;<br>s += i<br>&#125;<br>fmt.Println(s)<br>&#125;<br>cal_sum100()  <br></code></pre></td></tr></table></figure><h2 id="7-3、函数参数"><a href="#7-3、函数参数" class="headerlink" title="7.3、函数参数"></a>7.3、函数参数</h2><h3 id="7-3-1、什么是参数"><a href="#7-3-1、什么是参数" class="headerlink" title="7.3.1、什么是参数"></a>7.3.1、什么是参数</h3><p>什么是参数，函数为什么需要参数呢？将上面的打印的两个菱形换乘打印一个6行的和一个8行的，如何实现呢？这就涉及到了函数参数。</p><p>再比如上面我们将计算1-100的和通过函数实现了，但是完成新的需求：</p><p>分别计算并在终端打印1-100的和，1-150的和以及1-200的和</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cal_sum100</span><span class="hljs-params">()</span></span>  &#123;<br><br><span class="hljs-comment">// 计算1-100的和</span><br><span class="hljs-keyword">var</span> s = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++ &#123;<br>s += i<br>&#125;<br>fmt.Println(s)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cal_sum150</span><span class="hljs-params">()</span></span>  &#123;<br><br><span class="hljs-comment">// 计算1-100的和</span><br><span class="hljs-keyword">var</span> s = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">150</span>; i++ &#123;<br>s += i<br>&#125;<br>fmt.Println(s)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cal_sum200</span><span class="hljs-params">()</span></span>  &#123;<br><br><span class="hljs-comment">// 计算1-100的和</span><br><span class="hljs-keyword">var</span> s = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">200</span>; i++ &#123;<br>s += i<br>&#125;<br>fmt.Println(s)<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>cal_sum100()<br>cal_sum150()<br>cal_sum200()<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这样当然可以实现，但是是不是依然有大量重复代码，一会发现三个函数出了一个变量值不同以外其他都是相同的，所以为了能够在函数调用的时候动态传入一些值给函数，就有了参数的概念。</p><p>参数从位置上区分分为形式参数和实际参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 函数声明</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> 函数名<span class="hljs-params">(形式参数1 参数1类型,形式参数2 参数2类型,...)</span></span>&#123;<br>     函数体<br>&#125;<br><span class="hljs-comment">// 调用函数</span><br>函数名(实际参数<span class="hljs-number">1</span>,实际参数<span class="hljs-number">2</span>,...)  <br></code></pre></td></tr></table></figure><p>函数每次调用可以传入不同的实际参数，传参的过程其实就是变量赋值的过程，将实际参数按位置分别赋值给形参。</p><p>还是刚才的案例，用参数实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cal_sum</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span>  &#123;<br><br><span class="hljs-comment">// 计算1-100的和</span><br><span class="hljs-keyword">var</span> s = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= n; i++ &#123;<br>s += i<br>&#125;<br>fmt.Println(s)<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>   cal_sum(<span class="hljs-number">100</span>)<br>   cal_sum(<span class="hljs-number">101</span>)<br>   cal_sum(<span class="hljs-number">200</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这样是不是就灵活很多了呢，所以基本上一个功能强大的函数都会有自己需要的参数，让整个业务实现更加灵活。</p><h3 id="7-3-2、位置参数"><a href="#7-3-2、位置参数" class="headerlink" title="7.3.2、位置参数"></a>7.3.2、位置参数</h3><p>位置参数，有时也称必备参数，指的是必须按照正确的顺序将实际参数传到函数中，换句话说，调用函数时传入实际参数的数量和位置都必须和定义函数时保持一致。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-comment">// 函数声明 两个形参：x,y</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add_cal</span><span class="hljs-params">(x <span class="hljs-type">int</span>,y <span class="hljs-type">int</span>)</span></span>&#123;<br>fmt.Println(x+y)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 函数调用，按顺序传参</span><br><span class="hljs-comment">// add_cal(2) // 报错</span><br><span class="hljs-comment">// add_cal(232,123,12) // 报错</span><br>    add_cal(<span class="hljs-number">100</span>,<span class="hljs-number">12</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="7-3-3、不定长参数"><a href="#7-3-3、不定长参数" class="headerlink" title="7.3.3、不定长参数"></a>7.3.3、不定长参数</h3><p>如果想要一个函数能接收任意多个参数，或者这个函数的参数个数你无法确认，就可以使用不定长参数，也叫可变长参数。Go语言中的可变参数通过在参数名后加<code>...</code>来标识。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(nums ...<span class="hljs-type">int</span>)</span></span> &#123; <span class="hljs-comment">//变参函数</span><br>    fmt.Println(<span class="hljs-string">&quot;nums&quot;</span>,nums)<br>total := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, num := <span class="hljs-keyword">range</span> nums &#123;<br>total += num<br>&#125;<br>fmt.Println(total)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>sum(<span class="hljs-number">12</span>,<span class="hljs-number">23</span>)<br>sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：可变参数通常要作为函数的最后一个参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(base <span class="hljs-type">int</span>, nums ...<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>fmt.Println(base, nums)<br>sum := base<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> nums &#123;<br>sum = sum + v<br>&#125;<br><span class="hljs-keyword">return</span> sum<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ret := sum(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br>fmt.Println(ret)<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>go的函数强调显示表达的设计哲学，没有默认参数</p></blockquote><h2 id="7-4、函数返回值"><a href="#7-4、函数返回值" class="headerlink" title="7.4、函数返回值"></a>7.4、函数返回值</h2><h3 id="7-4-1、返回值的基本使用"><a href="#7-4-1、返回值的基本使用" class="headerlink" title="7.4.1、返回值的基本使用"></a>7.4.1、返回值的基本使用</h3><p>函数的返回值是指函数被调用之后，执行函数体中的代码所得到的结果，这个结果通过 <strong>return</strong> 语句返回。<strong>return</strong> 语句将被调函数中的一个确定的值带回到主调函数中，供主调函数使用。函数的返回值类型是在定义函数时指定的。return 语句中表达式的类型应与定义函数时指定的返回值类型必须一致。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> 函数名<span class="hljs-params">(形参 形参类型)</span></span>(返回值类型)&#123;<br>    <span class="hljs-comment">//  函数体</span><br>    <span class="hljs-keyword">return</span> 返回值<br>&#125;<br><br>变量 = 函数(实参)    <span class="hljs-comment">// return 返回的值赋值给某个变量，程序就可以使用这个返回值了。</span><br></code></pre></td></tr></table></figure><p>同样是设计一个加法计算函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add_cal</span><span class="hljs-params">(x,y <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span>&#123;<br><span class="hljs-keyword">return</span> x+y<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ret := add_cal(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>    fmt.Println(ret)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-4-2、无返回值"><a href="#7-4-2、无返回值" class="headerlink" title="7.4.2、无返回值"></a>7.4.2、无返回值</h3><p>声明函数时没有定义返回值，函数调用的结果不能作为值使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span>&#123;<br>fmt.Printf(<span class="hljs-string">&quot;hi,yuan!&quot;</span>)<br>    <span class="hljs-keyword">return</span>  <span class="hljs-comment">// 不写return默认return空</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// ret := foo() // 报错:无返回值不能将调用的结果作为值使用</span><br>    foo()<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-4-3、返回多个值"><a href="#7-4-3、返回多个值" class="headerlink" title="7.4.3、返回多个值"></a>7.4.3、返回多个值</h3><p>函数可以返回多个值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">get_name_age</span><span class="hljs-params">()</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;yuan&quot;</span>,<span class="hljs-number">18</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a, b := get_name_age()<br>fmt.Println(a, b)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-4-4、返回值命名"><a href="#7-4-4、返回值命名" class="headerlink" title="7.4.4、返回值命名"></a>7.4.4、返回值命名</h3><p>函数定义时可以给返回值命名，并在函数体中直接使用这些变量，最后通过<code>return</code>关键字返回。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">calc</span><span class="hljs-params">(x, y <span class="hljs-type">int</span>)</span></span> (sum, sub <span class="hljs-type">int</span>) &#123;<br>sum = x + y<br>sub = x - y<br><span class="hljs-keyword">return</span>     <span class="hljs-comment">//  return sum sub</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-5、作用域"><a href="#7-5、作用域" class="headerlink" title="7.5、作用域"></a>7.5、作用域</h2><p>所谓变量作用域，即变量可以作用的范围。</p><p>作用域（scope）通常来说，程序中的标识符并不是在任何位置都是有效可用的，而限定这个标识符的可用性的范围就是这个名字的作用域。</p><p>变量根据所在位置的不同可以划分为全局变量和局部变量</p><ul><li><strong>局部变量</strong> ：写在{}中或者函数中或者函数的形参, 都是局部变量</li></ul><blockquote><p>1、局部变量的作用域是从定义的那一行开始, 直到遇到 } 结束或者遇到return为止</p><p>2、局部变量, 只有执行了才会分配存储空间, 只要离开作用域就会自动释放</p><p>3、局部变量存储在栈区</p><p>4、局部变量如果没有使用, 编译会报错。全局变量如果没有使用, 编译不会报错</p><p>5、:&#x3D;只能用于局部变量, 不能用于全局变量</p></blockquote><ul><li><strong>全局变量</strong> ：函数外面的就是全局变量</li></ul><blockquote><p>1、全局变量的作用域是从定义的那一行开始, 直到文件末尾为止</p><p>2、全局变量, 只要程序一启动就会分配存储空间, 只有程序关闭才会释放存储空间,</p><p>3、全局变量存储在静态区(数据区)</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span>  &#123;<br><span class="hljs-comment">// var x =10</span><br>x = <span class="hljs-number">10</span><br>fmt.Println(x)<br>&#125;<br><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">30</span>   <span class="hljs-comment">// 全局变量</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    <span class="hljs-comment">// var x = 20</span><br>foo()<br>fmt.Println(x)<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，if，for语句具备独立开辟作用域的能力：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// if的局部空间</span><br><span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>&#123;<br>    x:=<span class="hljs-number">10</span><br>    fmt.Println(x)<br>&#125;<br><br>fmt.Println(x)<br><br><span class="hljs-comment">// for的局部空间</span><br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span> ;i++  &#123;<br><br>&#125;<br>fmt.Println(i)<br></code></pre></td></tr></table></figure><h2 id="7-6、值传递"><a href="#7-6、值传递" class="headerlink" title="7.6、值传递"></a>7.6、值传递</h2><h4 id="7-6-1、赋值操作"><a href="#7-6-1、赋值操作" class="headerlink" title="7.6.1、赋值操作"></a>7.6.1、赋值操作</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 案例1</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span><br>fmt.Printf(<span class="hljs-string">&quot;x的地址%p\n&quot;</span>, &amp;x)<br>y := x<br>fmt.Printf(<span class="hljs-string">&quot;y的地址%p\n&quot;</span>, &amp;y)<br>x = <span class="hljs-number">100</span><br>fmt.Println(y)<br><br><span class="hljs-comment">// 案例2</span><br><span class="hljs-keyword">var</span> a = []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>b := a<br>a[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br>fmt.Println(b)<br><br><span class="hljs-comment">// 案例3</span><br><span class="hljs-keyword">var</span> m1 = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;yuan&quot;</span>&#125;<br><span class="hljs-keyword">var</span> m2 = m1<br>m2[<span class="hljs-string">&quot;age&quot;</span>] = <span class="hljs-string">&quot;22&quot;</span><br>fmt.Println(m1)<br></code></pre></td></tr></table></figure><h4 id="7-6-2、函数传参"><a href="#7-6-2、函数传参" class="headerlink" title="7.6.2、函数传参"></a>7.6.2、函数传参</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swap</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> &#123;<br>c := a<br>a = b<br>b = c<br>fmt.Println(<span class="hljs-string">&quot;a&quot;</span>, a)<br>fmt.Println(<span class="hljs-string">&quot;b&quot;</span>, b)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span><br><span class="hljs-keyword">var</span> y = <span class="hljs-number">20</span><br>swap(x, y)<br>fmt.Println(<span class="hljs-string">&quot;x&quot;</span>, x)<br>fmt.Println(<span class="hljs-string">&quot;y&quot;</span>, y)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">func01</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> &#123;<br>x = <span class="hljs-number">100</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">func02</span><span class="hljs-params">(s []<span class="hljs-type">int</span>)</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;func02的s的地址：%p\n&quot;</span>,&amp;s)<br>s[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br><span class="hljs-comment">// s = append(s, 1000)</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">func03</span><span class="hljs-params">(p *<span class="hljs-type">int</span>)</span></span>  &#123;<br>*p = <span class="hljs-number">100</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">// 案例1</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span><br>func01(x)<br>fmt.Println(x)<br><br><span class="hljs-comment">// 案例2</span><br><span class="hljs-keyword">var</span> s = []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;main的s的地址：%p\n&quot;</span>,&amp;s)<br>func02(s)<br>fmt.Println(s)<br><br><span class="hljs-comment">//案例3</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span><br><span class="hljs-keyword">var</span> p *<span class="hljs-type">int</span> = &amp;a<br>func03(p)<br>fmt.Println(a)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>思考之前的scan函数为什么一定传参&amp;</p></blockquote><p>Go语言中所有的传参都是值传递（传值），都是一个副本，一个拷贝。因为拷贝的内容有时候是非引用类型（int、string、struct等这些），这样就在函数中就无法修改原内容数据；有的是引用类型（指针、map、slice、chan等这些），这样就可以修改原内容数据。</p><blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makemap</span><span class="hljs-params">(t *maptype, hint <span class="hljs-type">int64</span>, h *hmap, bucket unsafe.Pointer)</span></span> *hmap &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>make</code>函数创建的<code>map</code>就是一个指针类型，工作原理类似于案例3，所以map数据和切片数据一样虽然值拷贝但依然可以修改原值。</p></blockquote><h2 id="7-7、匿名函数"><a href="#7-7、匿名函数" class="headerlink" title="7.7、匿名函数"></a>7.7、匿名函数</h2><p>匿名函数，顾名思义，没有函数名的函数。</p><p>匿名函数的定义格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(参数列表)</span></span>(返回参数列表)&#123;<br>    函数体<br>&#125;<br></code></pre></td></tr></table></figure><p>匿名函数可以在使用函数的时候再声明调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//(1)</span><br>(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;yuan&quot;</span>)<br>&#125;)()<br><span class="hljs-comment">//(2)</span><br><span class="hljs-keyword">var</span> z =(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x,y <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> x + y<br>&#125;)(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><br>fmt.Println(z)<br></code></pre></td></tr></table></figure><p>也可以将匿名函数作为一个<code>func</code>类型数据赋值给变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> f  = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;yuan&quot;</span>)<br>&#125;<br><br>fmt.Println(reflect.TypeOf(f))  <span class="hljs-comment">// func</span><br><br>f() <span class="hljs-comment">// 赋值调用调用</span><br></code></pre></td></tr></table></figure><p>Go语言不支持在函数内部声明普通函数，只能声明匿名函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span>  &#123;<br>fmt.Println(<span class="hljs-string">&quot;foo功能&quot;</span>)<br>f := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;bar功能&quot;</span>)<br>&#125;<br>fmt.Println(f)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-8、高阶函数"><a href="#7-8、高阶函数" class="headerlink" title="7.8、高阶函数"></a>7.8、高阶函数</h2><p>一个高阶函数应该具备下面至少一个特点：</p><ul><li>将一个或者多个函数作为形参</li><li>返回一个函数作为其结果</li></ul><p>首先明确一件事情：函数名亦是一个变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;reflect&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addCal</span><span class="hljs-params">(x <span class="hljs-type">int</span>, y <span class="hljs-type">int</span>)</span></span><span class="hljs-type">int</span>&#123;<br><span class="hljs-keyword">return</span> x + y<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-keyword">var</span> a = addCal<br>a(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>fmt.Println(a)<br>fmt.Println(addCal)<br>fmt.Println(reflect.TypeOf(addCal))  <span class="hljs-comment">// func(int, int) int</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>结论：函数参数是一个变量，所以，函数名当然可以作为一个参数传入函数体,也可以作为一个返回值。</p><h3 id="7-8-1、函数参数"><a href="#7-8-1、函数参数" class="headerlink" title="7.8.1、函数参数"></a>7.8.1、函数参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">timer</span><span class="hljs-params">(f <span class="hljs-keyword">func</span>()</span></span>)&#123;<br>timeBefore := time.Now().Unix()<br>f()<br>timeAfter := time.Now().Unix()<br>fmt.Println(<span class="hljs-string">&quot;运行时间：&quot;</span>, timeAfter - timeBefore)<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;foo function... start&quot;</span>)<br>time.Sleep(time.Second * <span class="hljs-number">2</span>)<br>fmt.Println(<span class="hljs-string">&quot;foo function... end&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;bar function... start&quot;</span>)<br>time.Sleep(time.Second * <span class="hljs-number">3</span>)<br>fmt.Println(<span class="hljs-string">&quot;bar function... end&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>timer(foo)<br>timer(bar)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意如果函数参数也有参数该怎么写呢？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(x,y <span class="hljs-type">int</span> )</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> x+y<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">mul</span><span class="hljs-params">(x,y <span class="hljs-type">int</span> )</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> x*y<br>&#125;<br><br><span class="hljs-comment">// 双值计算器</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cal</span><span class="hljs-params">(f <span class="hljs-keyword">func</span>(x,y <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span>,x,y <span class="hljs-type">int</span>,) <span class="hljs-type">int</span>&#123;<br><br><span class="hljs-keyword">return</span> f(x,y)<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>ret1 := cal(add,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,)<br>fmt.Println(ret1)<br>ret2 := cal(mul,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,)<br>fmt.Println(ret2)<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-8-2、函数返回值"><a href="#7-8-2、函数返回值" class="headerlink" title="7.8.2、函数返回值"></a>7.8.2、函数返回值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br><br>inner := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;函数inner执行&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">return</span> inner<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>foo()()<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-9、闭包"><a href="#7-9、闭包" class="headerlink" title="7.9、闭包"></a>7.9、闭包</h2><p>复习函数作用域</p><h3 id="7-9-1、闭包函数"><a href="#7-9-1、闭包函数" class="headerlink" title="7.9.1、闭包函数"></a>7.9.1、闭包函数</h3><p>闭包并不只是一个go中的概念，在函数式编程语言中应用较为广泛。</p><p>首先看一下维基上对闭包的解释：</p><blockquote><p>在计算机科学中，闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），是引用了自由变量（外部非全局）的函数。</p></blockquote><p>简单来说就是一个函数定义中引用了函数外定义的变量，并且该函数可以在其定义环境外被执行。这样的一个函数我们称之为闭包函数。</p><blockquote><ol><li>闭包就是当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之 外执行。</li><li>需要注意的是，自由变量不一定是在局部环境中定义的，也有可能是以参数的形式传进局部环境；另外在 Go 中，函数也可以作为参数传递，因此函数也可能是自由变量。</li><li>闭包中，自由变量的生命周期等同于闭包函数的生命周期，和局部环境的周期无关。</li><li>闭包在运行时可以有多个实例，不同的引用环境和相同的函数组合可以产生不同的实例。</li></ol></blockquote><p>实现一个计数器函数，不考虑闭包的情况下，最简单的方式就是声明全局变量：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">counter</span><span class="hljs-params">()</span></span> &#123;<br>i++<br>fmt.Println(i)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    counter()<br>    counter()<br>    counter()<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方法的一个缺点是全局变量容易被修改，安全性较差。闭包可以解决这个问题，从而实现<code>数据隔离</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getCounter</span><span class="hljs-params">()</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;   <br><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span><br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>i++<br>fmt.Println(i)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>counter := getCounter()<br>counter()<br>counter()<br>counter()<br><br>counter2 := getCounter()<br>counter2()<br>counter2()<br>counter2()<br>&#125;<br></code></pre></td></tr></table></figure><p>getCounter完成了对变量i以及counter函数的封装，然后重新赋值给counter变量，counter函数和上面案例的counter函数的区别就是将需要操作的自由变量转化为闭包环境。</p><h3 id="7-9-2、闭包函数应用案例"><a href="#7-9-2、闭包函数应用案例" class="headerlink" title="7.9.2、闭包函数应用案例"></a>7.9.2、闭包函数应用案例</h3><p>在go语言中可以使用闭包函数来实现装饰器</p><h4 id="案例1：计算函数调用次数"><a href="#案例1：计算函数调用次数" class="headerlink" title="案例1：计算函数调用次数"></a>案例1：计算函数调用次数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;reflect&quot;</span><br><span class="hljs-string">&quot;runtime&quot;</span><br>)<br><br><span class="hljs-comment">// 函数计数器</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getCounter</span><span class="hljs-params">(f <span class="hljs-keyword">func</span>()</span></span>) <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>calledNum := <span class="hljs-number">0</span> <span class="hljs-comment">// 数据隔离</span><br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>f()<br>calledNum += <span class="hljs-number">1</span><br><span class="hljs-comment">// 获取函数名</span><br>fn := runtime.FuncForPC(reflect.ValueOf(f).Pointer()).Name()<br>fmt.Printf(<span class="hljs-string">&quot;函数%s第%d次被调用\n&quot;</span>, fn, calledNum)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 测试的调用函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;foo function执行&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;bar function执行&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">/*fooAndCounter := getCounter(foo)   // 针对foo的计数器</span><br><span class="hljs-comment">fooAndCounter()</span><br><span class="hljs-comment">fooAndCounter()</span><br><span class="hljs-comment">fooAndCounter()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">barAndCounter := getCounter(bar)</span><br><span class="hljs-comment">barAndCounter()</span><br><span class="hljs-comment">barAndCounter()</span><br><span class="hljs-comment">barAndCounter()*/</span><br><br>foo := getCounter(foo) <span class="hljs-comment">// 开放原则</span><br>foo()<br>foo()<br>foo()<br><br>bar := getCounter(bar)<br>bar()<br>bar()<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="案例2：计算函数运行时间"><a href="#案例2：计算函数运行时间" class="headerlink" title="案例2：计算函数运行时间"></a>案例2：计算函数运行时间</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetTimer</span><span class="hljs-params">(f <span class="hljs-keyword">func</span>(t time.Duration)</span></span>) <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(duration time.Duration)</span></span> &#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(t time.Duration)</span></span> &#123;<br>t1 := time.Now().Unix()<br>f(t)<br>t2 := time.Now().Unix()<br>fmt.Println(<span class="hljs-string">&quot;运行时间：&quot;</span>, t2-t1)<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">(t time.Duration)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;foo功能开始&quot;</span>)<br>time.Sleep(time.Second * t)<br>fmt.Println(<span class="hljs-string">&quot;foo功能结束&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bar</span><span class="hljs-params">(t time.Duration)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;bar功能开始&quot;</span>)<br>time.Sleep(time.Second * t)<br>fmt.Println(<span class="hljs-string">&quot;bar功能结束&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-keyword">var</span> foo = GetTimer(foo)<br>foo(<span class="hljs-number">3</span>)<br><span class="hljs-keyword">var</span> bar = GetTimer(bar)<br>bar(<span class="hljs-number">2</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>关键点：将一个功能函数作为自由变量与一个装饰函数<code>封装成一个整体</code>作为返回值，赋值给一个新的函数变量，这个新的函数变量在调用的时候，既可以完成原本的功能函数又可以实现装饰功能。</p><h2 id="7-10、defer语句"><a href="#7-10、defer语句" class="headerlink" title="7.10、defer语句"></a>7.10、defer语句</h2><p>defer语句是go语言提供的一种用于注册延迟调用的机制，是go语言中一种很有用的特性。</p><h3 id="7-10-1、defer的用法"><a href="#7-10-1、defer的用法" class="headerlink" title="7.10.1、defer的用法"></a>7.10.1、defer的用法</h3><p>defer语句注册了一个函数调用，这个调用会延迟到defer语句所在的函数执行完毕后执行，所谓执行完毕是指该函数执行了return语句、函数体已执行完最后一条语句或函数所在协程发生了恐慌。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(<span class="hljs-string">&quot;test01&quot;</span>)<br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;test02&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;test03&quot;</span>)<br></code></pre></td></tr></table></figure><p>编程经常会需要申请一些资源，比如数据库连接、打开文件句柄、申请锁、获取可用网络连接、申请内存空间等，这些资源都有一个共同点那就是在我们使用完之后都需要将其释放掉，否则会造成内存泄漏或死锁等其它问题。但操作完资源忘记关闭释放是正常的，而defer可以很好解决这个问题</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 打开文件</span><br>file_obj,err:=os.Open(<span class="hljs-string">&quot;满江红&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;文件打开失败，错误原因：&quot;</span>,err)<br>&#125;<br><span class="hljs-comment">// 关闭文件</span><br><span class="hljs-keyword">defer</span> file_obj.Close()<br><span class="hljs-comment">// 操作文件</span><br></code></pre></td></tr></table></figure><h3 id="7-10-2、多个defer执行顺序"><a href="#7-10-2、多个defer执行顺序" class="headerlink" title="7.10.2、多个defer执行顺序"></a>7.10.2、多个defer执行顺序</h3><p>当一个函数中有多个defer语句时，会按defer定义的顺序逆序执行，也就是说最先注册的defer函数调用最后执行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(<span class="hljs-string">&quot;test01&quot;</span>)<br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;test02&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;test03&quot;</span>)<br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;test04&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;test05&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="7-10-3、defer的拷贝机制"><a href="#7-10-3、defer的拷贝机制" class="headerlink" title="7.10.3、defer的拷贝机制"></a>7.10.3、defer的拷贝机制</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 案例1</span><br>foo := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;I am function foo1&quot;</span>)<br>&#125;<br><span class="hljs-keyword">defer</span> foo()<br>foo = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;I am function foo2&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// 案例2</span><br>x := <span class="hljs-number">10</span><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(a <span class="hljs-type">int</span>)</span></span> &#123;<br>fmt.Println(a)<br>&#125;(x)    <br>x++<br><br><span class="hljs-comment">// 案例3</span><br>x := <span class="hljs-number">10</span><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(x)   <span class="hljs-comment">// 保留x的地址</span><br>&#125;()<br>x++<br></code></pre></td></tr></table></figure><p>当执行defer语句时，函数调用不会马上发生，会先把defer注册的函数及变量拷贝到defer栈中保存，直到函数return前才执行defer中的函数调用。需要格外注意的是，这一拷贝拷贝的是那一刻函数的值和参数的值。注册之后再修改函数值或参数值时，不会生效。</p><h3 id="7-10-4、defer执行时机"><a href="#7-10-4、defer执行时机" class="headerlink" title="7.10.4、defer执行时机"></a>7.10.4、defer执行时机</h3><p>在Go语言的函数 return 语句不是原子操作，而是被拆成了两步</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">rval</span> <span class="hljs-operator">=</span> xxx<br>ret<br></code></pre></td></tr></table></figure><p>而 defer 语句就是在这两条语句之间执行，也就是</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">rval = xxx<br>defer_func<br>ret rval<br><br><br><span class="hljs-keyword">defer</span> x = <span class="hljs-number">100</span><br>x := <span class="hljs-number">10</span><br><span class="hljs-keyword">return</span> x  <span class="hljs-comment">// rval=10.   x = 100, ret rval</span><br></code></pre></td></tr></table></figure><p>经典面试题：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f1</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>i := <span class="hljs-number">5</span><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>i++<br>&#125;()<br><span class="hljs-keyword">return</span> i<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f2</span><span class="hljs-params">()</span></span> *<span class="hljs-type">int</span> &#123;<br><br>i := <span class="hljs-number">5</span><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>i++<br>fmt.Printf(<span class="hljs-string">&quot;:::%p\n&quot;</span>, &amp;i)<br>&#125;()<br>fmt.Printf(<span class="hljs-string">&quot;:::%p\n&quot;</span>, &amp;i)<br><span class="hljs-keyword">return</span> &amp;i<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f3</span><span class="hljs-params">()</span></span> (result <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>result++<br>&#125;()<br><span class="hljs-keyword">return</span> <span class="hljs-number">5</span> <span class="hljs-comment">// result = 5;ret result(result替换了rval)</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f4</span><span class="hljs-params">()</span></span> (result <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>result++<br>&#125;()<br><span class="hljs-keyword">return</span> result <span class="hljs-comment">// ret result变量的值</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f5</span><span class="hljs-params">()</span></span> (r <span class="hljs-type">int</span>) &#123;<br>t := <span class="hljs-number">5</span><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>t = t + <span class="hljs-number">1</span><br>&#125;()<br><span class="hljs-keyword">return</span> t <span class="hljs-comment">// ret r = 5 (拷贝t的值5赋值给r)</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f6</span><span class="hljs-params">()</span></span> (r <span class="hljs-type">int</span>) &#123;<br>fmt.Println(&amp;r)<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r <span class="hljs-type">int</span>)</span></span> &#123;<br>r = r + <span class="hljs-number">1</span><br>fmt.Println(&amp;r)<br>&#125;(r)<br><span class="hljs-keyword">return</span> <span class="hljs-number">5</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f7</span><span class="hljs-params">()</span></span> (r <span class="hljs-type">int</span>) &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> &#123;<br>r = x + <span class="hljs-number">1</span><br>&#125;(r)<br><span class="hljs-keyword">return</span> <span class="hljs-number">5</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">// println(f1())</span><br><span class="hljs-comment">// println(*f2())</span><br><span class="hljs-comment">// println(f3())</span><br><span class="hljs-comment">// println(f4())</span><br><span class="hljs-comment">// println(f5())</span><br><span class="hljs-comment">// println(f6())</span><br><span class="hljs-comment">// println(f7())</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>在命名返回方式中，最终函数返回的就是命名返回变量的值，因此，对该命名返回变量的修改会影响到最终的函数返回值！</p></blockquote><h2 id="7-11、递归函数"><a href="#7-11、递归函数" class="headerlink" title="7.11、递归函数"></a>7.11、递归函数</h2><p>一种计算过程，如果其中每一步都要用到前一步或前几步的结果，称为递归的。用递归过程定义的函数，称为递归函数，例如连加、连乘及阶乘等。</p><blockquote><p>递归特性:</p><ol><li>调用自身函数</li><li>必须有一个明确的结束条件</li><li>在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返 回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。</li></ol></blockquote><h4 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">factorial</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span><span class="hljs-type">int</span>&#123;<br><span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">return</span> n * factorial(n<span class="hljs-number">-1</span>)<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">// 计算n的阶乘,即 n！</span><br><span class="hljs-keyword">var</span> ret = factorial(<span class="hljs-number">4</span>)<br>fmt.Println(ret)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/pages_images/Go/digui.png" alt="img"></p><h4 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h4><p>这个数列生成规则很简单，每一项都是前两项的和，举例<br>1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233……</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fib</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> n == <span class="hljs-number">2</span> || n == <span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">return</span> fib(n<span class="hljs-number">-1</span>) + fib(n<span class="hljs-number">-2</span>)<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">// 计算n的阶乘,即 n！</span><br>ret:=fib(<span class="hljs-number">6</span>)<br>fmt.Println(ret)<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/pages_images/Go/image20210626185959544.png" alt="image-20210626185959544"></p><h2 id="7-12、章节练习"><a href="#7-12、章节练习" class="headerlink" title="7.12、章节练习"></a>7.12、章节练习</h2><p><strong>添加客户：</strong></p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-08-04%2016.09.01.png" alt="截屏2022-08-04 16.09.01"></p><p><strong>查看客户和删除客户：</strong></p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-08-04%2016.09.40.png" alt="截屏2022-08-04 16.09.40"></p><p><strong>修改客户：</strong></p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-08-04%2016.12.27.png" alt="截屏2022-08-04 16.12.27"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-comment">// 构建数据存储结构</span><br><span class="hljs-keyword">var</span> customers []<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;<br><span class="hljs-keyword">var</span> customersId <span class="hljs-type">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">findById</span><span class="hljs-params">(id <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>index := <span class="hljs-number">-1</span><br><span class="hljs-comment">//遍历this.customers切⽚</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(customers); i++ &#123;<br><br><span class="hljs-keyword">if</span> customers[i][<span class="hljs-string">&quot;cid&quot;</span>] == id &#123;<br>index = i<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">return</span> index<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isBack</span><span class="hljs-params">()</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-comment">// 引导用户选择继续还是返回</span><br>fmt.Print(<span class="hljs-string">&quot;请问是否返回上一层【Y/N】:&quot;</span>)<br><span class="hljs-keyword">var</span> backChoice <span class="hljs-type">string</span><br>fmt.Scan(&amp;backChoice)<br><span class="hljs-keyword">if</span> strings.ToUpper(backChoice) == <span class="hljs-string">&quot;Y&quot;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">inputInfo</span><span class="hljs-params">()</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">string</span>, <span class="hljs-type">int8</span>, <span class="hljs-type">string</span>) &#123;<br><span class="hljs-keyword">var</span> name <span class="hljs-type">string</span><br>fmt.Print(<span class="hljs-string">&quot;请输入客户姓名：&quot;</span>)<br>fmt.Scan(&amp;name)<br><br><span class="hljs-keyword">var</span> gender <span class="hljs-type">string</span><br>fmt.Print(<span class="hljs-string">&quot;请输入客户性别：&quot;</span>)<br>fmt.Scan(&amp;gender)<br><br><span class="hljs-keyword">var</span> age <span class="hljs-type">int8</span><br>fmt.Print(<span class="hljs-string">&quot;请输入客户年龄：&quot;</span>)<br>fmt.Scan(&amp;age)<br><br><span class="hljs-keyword">var</span> email <span class="hljs-type">string</span><br>fmt.Print(<span class="hljs-string">&quot;请输入客户邮箱：&quot;</span>)<br>fmt.Scan(&amp;email)<br><br><span class="hljs-keyword">return</span> name, gender, age, email<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addCustomer</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br><span class="hljs-comment">// 引导用户输入学号和姓名</span><br>fmt.Printf(<span class="hljs-string">&quot;\033[1;35;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------添加客户开始-----------------------------&quot;</span>)<br>name, gender, age, email := inputInfo()<br><span class="hljs-comment">// 创建客户的map对象</span><br>customersId++ <span class="hljs-comment">// 客户编号不需要输入，系统自增即可</span><br>newCustomer := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<br><span class="hljs-string">&quot;cid&quot;</span>:    customersId,<br><span class="hljs-string">&quot;name&quot;</span>:   name,<br><span class="hljs-string">&quot;gender&quot;</span>: gender,<br><span class="hljs-string">&quot;age&quot;</span>:    age,<br><span class="hljs-string">&quot;email&quot;</span>:  email,<br>&#125;<br><span class="hljs-comment">// 添加客户map对象添加到客户切片中</span><br>customers = <span class="hljs-built_in">append</span>(customers, newCustomer)<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;35;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------添加客户完成-----------------------------&quot;</span>)<br>b := isBack()<br><span class="hljs-keyword">if</span> b &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">listCustomer</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;32;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;----------------------------------客户列表开始-----------------------------------&quot;</span>)<br><span class="hljs-keyword">for</span> _, customer := <span class="hljs-keyword">range</span> customers &#123;<br>fmt.Printf(<span class="hljs-string">&quot;编号：%-8d 姓名：%-8s 性别：%-8s 年龄：%-8d 邮箱：%-8s \n&quot;</span>,<br>customer[<span class="hljs-string">&quot;cid&quot;</span>], customer[<span class="hljs-string">&quot;name&quot;</span>], customer[<span class="hljs-string">&quot;gender&quot;</span>], customer[<span class="hljs-string">&quot;age&quot;</span>], customer[<span class="hljs-string">&quot;email&quot;</span>])<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;32;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;----------------------------------客户列表完成-----------------------------------&quot;</span>)<br>b := isBack()<br><span class="hljs-keyword">if</span> b &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">updateCustomer</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;36;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------客户修改开始----------------------------&quot;</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br><span class="hljs-keyword">var</span> updateCid <span class="hljs-type">int</span><br>fmt.Print(<span class="hljs-string">&quot;请输入更新客户编号：&quot;</span>)<br>fmt.Scan(&amp;updateCid)<br>updateIndex := findById(updateCid)<br><span class="hljs-keyword">if</span> updateIndex == <span class="hljs-number">-1</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;删除失败，输入的编号ID不存在&quot;</span>)<br><span class="hljs-keyword">continue</span><br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;请输入修改客户的信息&quot;</span>)<br>name, gender, age, email := inputInfo()<br><br>customers[updateIndex][<span class="hljs-string">&quot;name&quot;</span>] = name<br>customers[updateIndex][<span class="hljs-string">&quot;gender&quot;</span>] = gender<br>customers[updateIndex][<span class="hljs-string">&quot;age&quot;</span>] = age<br>customers[updateIndex][<span class="hljs-string">&quot;email&quot;</span>] = email<br><br>fmt.Printf(<span class="hljs-string">&quot;\033[1;36;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------客户修改完成----------------------------&quot;</span>)<br>b := isBack()<br><span class="hljs-keyword">if</span> b &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">deleteCustomer</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;31;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------删除客户开始----------------------------&quot;</span>)<br><span class="hljs-keyword">var</span> delCid <span class="hljs-type">int</span><br>fmt.Print(<span class="hljs-string">&quot;请输入删除客户编号：&quot;</span>)<br>fmt.Scan(&amp;delCid)<br><br>delIndex := findById(delCid)<br><span class="hljs-keyword">if</span> delIndex == <span class="hljs-number">-1</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;删除失败，输入的编号ID不存在&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>customers = <span class="hljs-built_in">append</span>(customers[:delIndex], customers[delIndex+<span class="hljs-number">1</span>:]...)<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;31;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------删除客户完成----------------------&quot;</span>)<br><br>&#125;<br><br><span class="hljs-keyword">var</span> data = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;33;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">`</span><br><span class="hljs-string">----------------客户信息管理系统--------------</span><br><span class="hljs-string">   1、添加客户</span><br><span class="hljs-string">   2、查看客户</span><br><span class="hljs-string">   3、更新客户</span><br><span class="hljs-string">   4、删除客户</span><br><span class="hljs-string">   5、退出</span><br><span class="hljs-string">-------------------------------------------</span><br><span class="hljs-string">`</span>)<br><br><span class="hljs-keyword">var</span> choice <span class="hljs-type">int</span><br>fmt.Printf(<span class="hljs-string">&quot;\033[1;38;40m%s\033[0m&quot;</span>, <span class="hljs-string">&quot;请输入选择【1-5】:&quot;</span>)<br>stdin := bufio.NewReader(os.Stdin)<br>fmt.Fscan(stdin, &amp;choice)<br><br><span class="hljs-keyword">switch</span> choice &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>addCustomer()<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>listCustomer()<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>updateCustomer()<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>deleteCustomer()<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;非法输入！&quot;</span>)<br>os.Exit(<span class="hljs-number">0</span>)<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="八、文件操作"><a href="#八、文件操作" class="headerlink" title="八、文件操作"></a>八、文件操作</h1><h2 id="8-1、编码"><a href="#8-1、编码" class="headerlink" title="8.1、编码"></a>8.1、编码</h2><p><img src="http://www.yuan316.com/post/Python%E5%9F%BA%E7%A1%80//pages_images/Go/image-20210414160556205.png" alt="image-20210414160556205"></p><ul><li><code>ASCII</code>表</li></ul><p>众所周知，计算机起源于美国，英文只有26个字符，算上其他所有特殊符号也不会超过128个。字节是计算机的基本储存单位，一个字节(bytes)包括八个比特位(bit),能够表示出256个二进制数字，所以美国人在这里只是用到了一个字节的前七位即127个数字来对应了127个具体字符，而这张对应表就是ASCII码字符编码表，简称ASCII表。后来为了能够让计算机识别拉丁文，就将一个字节的最高位也应用了，这样就多扩展出128个二进制数字来对应新的符号。这张对应表因为是在ASCII表的基础上扩展的最高位，因此称为扩展ASCII表。到此位置，一个字节能表示的256个二进制数字都有了特殊的符号对应。</p><p><img src="/pages_images/Go/src=http%253A%252F%252Fimages2018.cnblogs.com%252Fblog%252F1316095%252F201803%252F1316095-20180330193843413-618697280.png&refer=http%253A%252F%252Fimages2018.cnblogs-0991323.png" alt="img"></p><ul><li><code>GBK</code>编码</li></ul><p>但是，当计算机发展到东亚国家后，问题又出现了，像中文，韩文，日文等符号也需要在计算机上显示。可是一个字节已经被西方国家占满了。于是，我中华民族自己重写一张对应表，直接生猛地将扩展的第八位对应拉丁文全部删掉，规定一个小于127的字符的意义与原来相同，即支持ASCII码表，但两个大于127的字符连在一起时，就表示一个汉字，这样就可以将几千个汉字对应一个个二进制数了。而这种编码方式就是GB2312，也称为中文扩展ASCII码表。再后来，我们为了对应更多的汉字规定只要第一个字节是大于127就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字符集里的内容。这样能多出几万个二进制数字，就算甲骨文也能够用了。而这次扩展的编码方式称为GBK标准。当然，GBK标准下，一个像”苑”这样的中文符号，必须占两个字节才能存储显示。</p><ul><li><code>Unicode</code>与<code>utf8</code>编码</li></ul><p>与此同时，其它国家也都开发出一套编码方式，即本国文字符号和二进制数字的对应表。而国家彼此间的编码方式是互不支持的，这会导致很多问题。于是ISO国际化标准组织为了统一编码，统计了世界上所有国家的字符，开发出了一张万国码字符表，用两个字节即六万多个二进制数字来对应。这就是Unicode编码方式。这样，每个国家都使用这套编码方式就再也不会有计算机的编码问题了。Unicode的编码特点是对于任意一个字符，都需要两个字节来存储。这对于美国人而言无异于吃上了世界的大锅饭，也就是说，如果用ASCII码表，明明一个字节就可以存储的字符现在为了兼容其他语言而需要两个字节了，比如字母I，本可以用01001001来存储，现在要用Unicode只能是00000000 01001001存储，而这将导致大量的空间被浪费掉。基于此，美国人创建了utf8编码，而utf8编码是一种针对<strong>Unicode</strong>的可变长字符编码方式，根据具体不同的字符计算出需要的字节，对于ASCII码范围的字符，就用一个字节，而且符号与数字的对应也是一致的，所以说utf8是兼容ASCII码表的。但是对于中文，一般是用三个字节存储的。</p><h2 id="8-2、Go的字符与字节"><a href="#8-2、Go的字符与字节" class="headerlink" title="8.2、Go的字符与字节"></a>8.2、Go的字符与字节</h2><p>byte就是字节的意思，一个字节就是8个二进制位。uint8，无符号整形，占8位，正好也是2的8次方。所以<code>byte</code>和 <code>uint8</code> 类型本质上没有区别，它表示的是 ACSII 表中的一个字符。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><br> <span class="hljs-comment">// byte类型</span><br><span class="hljs-keyword">var</span> b1 <span class="hljs-type">byte</span><br>b1 = <span class="hljs-string">&#x27;A&#x27;</span>  <span class="hljs-comment">// 必须是单引号</span><br><span class="hljs-comment">// b1 = 98  // 必须是单引号</span><br>fmt.Println(reflect.TypeOf(b1)) <span class="hljs-comment">// 65  uint8</span><br>fmt.Printf(<span class="hljs-string">&quot;%c\n&quot;</span>,b1)<br>fmt.Printf(<span class="hljs-string">&quot;%d\n&quot;</span>,b1)  <span class="hljs-comment">// ASCII数字</span><br>fmt.Println(b1)  <span class="hljs-comment">// ASCII数字</span><br><br><span class="hljs-comment">// uint8类型</span><br><span class="hljs-keyword">var</span> b2 <span class="hljs-type">uint8</span><br>b2 = <span class="hljs-number">65</span><br><span class="hljs-comment">// b2 = &#x27;c&#x27;</span><br>fmt.Printf(<span class="hljs-string">&quot;%c\n&quot;</span>,b2)<br>fmt.Printf(<span class="hljs-string">&quot;%d\n&quot;</span>,b2)<br>fmt.Println(b2) <span class="hljs-comment">// ASCII数字</span><br><br>   <span class="hljs-comment">// var b3 byte</span><br>   <span class="hljs-keyword">var</span> b3 <span class="hljs-type">rune</span><br>   b3 = <span class="hljs-string">&#x27;苑&#x27;</span><br>   <span class="hljs-comment">// rune，占用4个字节，共32位比特位，所以它和 int32 本质上也没有区别。它表示的是一个 Unicode字符</span><br>   fmt.Println(b3,<span class="hljs-type">string</span>(b3),reflect.TypeOf(b3))<br><br><br></code></pre></td></tr></table></figure><h2 id="8-3、字符串"><a href="#8-3、字符串" class="headerlink" title="8.3、字符串"></a>8.3、字符串</h2><p>go语⾔的string是⼀种数据类型，这个数据类型占⽤16字节空间，前8字节是⼀个指针，指向字符串值的地址，后⼋个字节是⼀个整数，标识字 符串的长度；</p><h3 id="（1）字符串的存储原理"><a href="#（1）字符串的存储原理" class="headerlink" title="（1）字符串的存储原理"></a>（1）字符串的存储原理</h3><p><img src="/pages_images/Go/720430-20181129100333862-587648083.png" alt="img"></p><p>string 数据结构：源码包<code>src/runtime/string.go:stringStruct</code>定义了string的数据结构：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> stringStruct <span class="hljs-keyword">struct</span> &#123;<br>str unsafe.Pointer<br><span class="hljs-built_in">len</span> <span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其数据结构很简单：</p><blockquote><p>stringStruct.str：字符串的首地址；</p><p>stringStruct.len：字符串的长度；</p></blockquote><p>string数据结构跟切片有些类似，只不过切片还有一个表示容量的成员，事实上string和切片，准确的说是byte切片经常发生转换。这个后面再详细介绍。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs golang">s1 := <span class="hljs-string">&quot;hello&quot;</span><br>s2 := s1[:]<br>s3 := s1[<span class="hljs-number">1</span>:]<br>fmt.Println(&amp;s1, (*reflect.StringHeader)(unsafe.Pointer(&amp;s1)))<br>fmt.Println(&amp;s2, (*reflect.StringHeader)(unsafe.Pointer(&amp;s2)))<br>fmt.Println(&amp;s3, (*reflect.StringHeader)(unsafe.Pointer(&amp;s3)))<br></code></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">/*</span><br><span class="hljs-comment">A string type represents the set of string values. A string value is a (possibly empty) sequence of bytes. Strings are immutable: once created, it is impossible to change the contents of a string. The predeclared string type is string.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">The length of a string s (its size in bytes) can be discovered using the built-in function len. The length is a compile-time constant if the string is a constant. A string&#x27;s bytes can be accessed by integer indices 0 through len(s)-1. It is illegal to take the address of such an element; if s[i] is the i&#x27;th byte of a string, &amp;s[i] is invalid.</span><br><span class="hljs-comment">*/</span> <br></code></pre></td></tr></table></figure><p>字符串类型表示字符串值的集合。字符串值是一个字节序列(可能为空)。字符串是不可变的:一旦创建，就不可能改变字符串的内容。预先声明的字符串类型是string。</p><p>字符串s的长度(以字节为单位的大小)可以使用内置函数len来发现。如果字符串是常量，则长度为编译时常量。字符串的字节可以通过索引0到len(s)-1的整数来访问。取这样一个元素的地址是非法的;如果s[i]是字符串的第i个字节，&amp;s[i]是无效的。</p><blockquote><p>go语⾔指针和C&#x2F;C++指针的唯⼀差别就是：go语⾔不允许对指针做算术运算(+、-、++、–)。</p><p>但是，Go提供了⼀套底层库reflect和unsafe，它们可以把任意⼀个go指针转成uintptr类型的值，然后再像C&#x2F;C++⼀样对指针做算术运算，最后再还原成go类型。所以从这个⾓度上看，go指针也是可以和C&#x2F;C++指针⼀样使⽤的，只是会⽐较绕，这同时也要求使⽤者⾃⼰明⽩，如果真要把指针这么⽤，那么请记得后果⾃负。</p></blockquote><h3 id="（2）字符串的使用"><a href="#（2）字符串的使用" class="headerlink" title="（2）字符串的使用"></a>（2）字符串的使用</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs golang">   <span class="hljs-comment">// 本质上，unicode是一个编码集，和ascii码相同，而utf8是编码规则</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;苑&#x27;</span><br>fmt.Printf(<span class="hljs-string">&quot;字符&#x27;苑&#x27;unicode的十进制：%d\n&quot;</span>, a)<br>fmt.Printf(<span class="hljs-string">&quot;字符&#x27;苑&#x27;unicode的十六进制：%x\n&quot;</span>, a)<br>fmt.Printf(<span class="hljs-string">&quot;字符&#x27;苑&#x27;unicode的二进制：%b\n&quot;</span>, a)<br><span class="hljs-keyword">var</span> b = <span class="hljs-number">0</span>b111010001000101110010001<br>fmt.Printf(<span class="hljs-string">&quot;字符&#x27;苑&#x27;的utf8：%x\n&quot;</span>, b)<br><br><span class="hljs-keyword">var</span> c = <span class="hljs-string">&quot;苑abc&quot;</span><br>fmt.Println(c) <span class="hljs-comment">// 苑abc</span><br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(c); i++ &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d\n&quot;</span>, c[i]) <span class="hljs-comment">// 存储的字节的十进制数</span><br>&#125;<br><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> c &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d,%c\n&quot;</span>, v, v) <span class="hljs-comment">// 通过存储的utf8解析到unicode值和对应的符号</span><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>UTF-8的编码规则：</p><p>(1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。<br>(2）对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</p><p>举例说明：</p><p>已知’苑’的unicode是82d1（1000001011010001），’苑’的UTF-8编码需要三个字节，即格式是“1110xxxx 10xxxxxx 10xxxxxx”。然后，从’苑’的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。这样就得到了，’苑’的UTF-8编码是 “111010001 00010111 0010001”，转换成十六进制就是e88b91。</p></blockquote><h3 id="（3）字符串与字节串的转换"><a href="#（3）字符串与字节串的转换" class="headerlink" title="（3）字符串与字节串的转换"></a>（3）字符串与字节串的转换</h3><p>字节数组，就是一个数组，里面每一个元素都是字符，字符又跟字节划等号。所以字符串和字节数组之间可以相互转化。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// (1) 字符串类型（string） 转为字节串类型（[]byte）</span><br><span class="hljs-keyword">var</span> s = <span class="hljs-string">&quot;苑昊&quot;</span><br>fmt.Println(s,reflect.TypeOf(s)) <span class="hljs-comment">// 苑昊 string</span><br><br><span class="hljs-keyword">var</span> b = []<span class="hljs-type">byte</span>(s)  <span class="hljs-comment">// 默认用uft-8进行编码</span><br>fmt.Println(b,reflect.TypeOf(b)) <span class="hljs-comment">// [232 139 145 230 152 138] []uint8</span><br><br><span class="hljs-comment">// 可以通过代码 len([]rune(s)) 来获得字符串中字符的数量, 但使用 utf8.RuneCountInString(s) 效率会更高一点.</span><br>s := <span class="hljs-string">&quot;Hello,世界&quot;</span><br>r1 := []<span class="hljs-type">byte</span>(s)<br>r2 := []<span class="hljs-type">rune</span>(s)<br>fmt.Println(r1) <span class="hljs-comment">// 输出：[72 101 108 108 111 44 32 228 184 150 231 149 140]</span><br>fmt.Println(r2) <span class="hljs-comment">// 输出：[72 101 108 108 111 44 32 19990 30028]</span><br><span class="hljs-comment">// 统计字节个数</span><br>fmt.Println(<span class="hljs-built_in">len</span>(r1))<br><span class="hljs-comment">// 统计字符个数</span><br>fmt.Println(<span class="hljs-built_in">len</span>(r2))<br>fmt.Println(utf8.RuneCountInString(s))<br><br><span class="hljs-comment">// (2) byte转为string</span><br>fmt.Println(<span class="hljs-type">string</span>(b))<br><span class="hljs-keyword">var</span> data = []<span class="hljs-type">byte</span>&#123;<span class="hljs-number">121</span>,<span class="hljs-number">117</span>,<span class="hljs-number">97</span>,<span class="hljs-number">110</span>&#125;<br>fmt.Println(<span class="hljs-type">string</span>(data)) <span class="hljs-comment">// yuan</span><br></code></pre></td></tr></table></figure><p>这里的转化不是将string结构体中指向的byte切片直接做赋值操作，而是通过copy实现的，在数据量比较大时，这里的转化会比较耗费内存空间。</p><h3 id="（4）练习"><a href="#（4）练习" class="headerlink" title="（4）练习"></a>（4）练习</h3><p>将字符串 “hello” 转换为 “cello”</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs golang">s := <span class="hljs-string">&quot;hello&quot;</span><br>c := []<span class="hljs-type">byte</span>(s)<br>c[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;c&#x27;</span><br>s2 := <span class="hljs-type">string</span>(c) <span class="hljs-comment">//s2 == &quot;cello&quot;</span><br></code></pre></td></tr></table></figure><p>将字符串 “hello” 反转</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">reverseString</span><span class="hljs-params">(s []<span class="hljs-type">byte</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br><span class="hljs-keyword">var</span> i, j = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i &lt; j &#123;<br>s[i], s[j] = s[j], s[i]<br>i++<br>j--<br>&#125;<br><span class="hljs-keyword">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-3、读写文件"><a href="#8-3、读写文件" class="headerlink" title="8.3、读写文件"></a>8.3、读写文件</h2><h4 id="8-3-1、打开文件"><a href="#8-3-1、打开文件" class="headerlink" title="8.3.1、打开文件"></a>8.3.1、打开文件</h4><p><code>os.Open()</code>函数能够打开一个文件，返回一个<code>*File</code>和一个<code>err</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//打开文件</span><br>file, err := os.Open(<span class="hljs-string">&quot;./满江红&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;err: &quot;</span>, err)<br>&#125;<br><span class="hljs-comment">//关闭文件句柄</span><br><span class="hljs-keyword">defer</span> file.Close()<br></code></pre></td></tr></table></figure><h4 id="8-3-2、读文件"><a href="#8-3-2、读文件" class="headerlink" title="8.3.2、读文件"></a>8.3.2、读文件</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readBytes</span><span class="hljs-params">(file *os.File)</span></span> &#123;<br><span class="hljs-keyword">var</span> b = <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">3</span>)<br>n, err := file.Read(b)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;err:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;读取字节数：%d\n&quot;</span>, n)<br>fmt.Printf(<span class="hljs-string">&quot;切片值：%v\n&quot;</span>, b)<br>fmt.Printf(<span class="hljs-string">&quot;读取内容：%v\n&quot;</span>, <span class="hljs-type">string</span>(b[:n]))<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readLines</span><span class="hljs-params">(file *os.File)</span></span> &#123;<br>reader := bufio.NewReader(file)<br><span class="hljs-keyword">for</span> &#123;<br><br><span class="hljs-comment">// (1) 按行都字符串</span><br>strs, err := reader.ReadString(<span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-comment">// 读取到换行符为止，读取内容包括换行符</span><br>fmt.Print(err, strs)<br><br><span class="hljs-comment">// (2) 按行都字节串</span><br><span class="hljs-comment">// bytes, err := reader.ReadBytes(&#x27;\n&#x27;)</span><br><span class="hljs-comment">// fmt.Print(bytes)</span><br><span class="hljs-comment">// fmt.Print(string(bytes))</span><br><span class="hljs-keyword">if</span> err == io.EOF &#123; <span class="hljs-comment">//io.EOF 读取到了文件的末尾</span><br><span class="hljs-comment">// fmt.Println(&quot;读取到文件末尾！&quot;)</span><br><span class="hljs-keyword">break</span><br>&#125;<br><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readFile</span><span class="hljs-params">()</span></span> &#123;<br>content, err := ioutil.ReadFile(<span class="hljs-string">&quot;满江红&quot;</span>) <span class="hljs-comment">//包含了打开文件和读取整个文件，适用于较小文件</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;read file failed, err:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Print(<span class="hljs-type">string</span>(content))<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">//打开文件</span><br>file, err := os.Open(<span class="hljs-string">&quot;满江红&quot;</span>) <span class="hljs-comment">// 相对路径或者绝对路径</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;err: &quot;</span>, err)<br>&#125;<br><span class="hljs-comment">//关闭文件句柄</span><br><span class="hljs-keyword">defer</span> file.Close()<br><br><span class="hljs-comment">// (1) 按字节读取数据</span><br><span class="hljs-comment">// readBytes(file)</span><br><span class="hljs-comment">// (2) 按行读取文件</span><br><span class="hljs-comment">// readLines(file)</span><br><span class="hljs-comment">// (3) 读取整个文件</span><br><span class="hljs-comment">// readFile()</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="8-3-3、写文件"><a href="#8-3-3、写文件" class="headerlink" title="8.3.3、写文件"></a>8.3.3、写文件</h4><p>OpenFile是一个更一般性的文件打开函数，大多数调用者都应用Open或Create代替本函数。它会使用指定的选项（如O_RDONLY等）、指定的模式（如0666等）打开指定名称的文件。如果操作成功，返回的文件对象可用于I&#x2F;O。如果出错，错误底层类型是*PathError。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">OpenFile</span><span class="hljs-params">(name <span class="hljs-type">string</span>, flag <span class="hljs-type">int</span>, perm FileMode)</span></span> (file *File, err <span class="hljs-type">error</span>) <span class="hljs-comment">// ⽂件路径、打开模式、⽂件权限</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">os.O_RDONLY: 只读模式(read-only)</span><br><span class="hljs-comment">os.O_WRONLY: 只写模式(write-only)</span><br><span class="hljs-comment">os.O_RDWR : 读写模式(read-write)</span><br><span class="hljs-comment">os.O_APPEND: 追加模式(append)</span><br><span class="hljs-comment">os.O_CREATE: ⽂件不存在就创建(create a new file if none exists.)</span><br><span class="hljs-comment">os.O_TRUNC: 打开并清空⽂件（必须有写权限）</span><br><span class="hljs-comment">os.O_EXCL: 如与 O_CREATE ⼀起⽤，构成⼀个新建⽂件的功能，它要求⽂件必须不存在(used with O_CREATE, file must not exist)</span><br><span class="hljs-comment">    os.O_SYNC：同步⽅式打开，即不使⽤缓存，直接写⼊硬盘</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="（1）只写模式"><a href="#（1）只写模式" class="headerlink" title="（1）只写模式"></a>（1）只写模式</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">writeBytesOrStr</span><span class="hljs-params">(file *os.File)</span></span> &#123;<br>str := <span class="hljs-string">&quot;满江红666\n&quot;</span><br><span class="hljs-comment">//写入字节切片数据</span><br>file.Write([]<span class="hljs-type">byte</span>(str))<br><span class="hljs-comment">//直接写入字符串数据</span><br>file.WriteString(<span class="hljs-string">&quot;怒发冲冠,凭栏处、潇潇雨歇。&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">writeByBufio</span><span class="hljs-params">(file *os.File)</span></span> &#123;<br>writer := bufio.NewWriter(file)<br><span class="hljs-comment">//将数据先写入缓存，并不会到文件中</span><br>writer.WriteString(<span class="hljs-string">&quot;大浪淘沙\n&quot;</span>)<br><span class="hljs-comment">// 必须flush将缓存中的内容写入文件</span><br><span class="hljs-comment">// writer.Flush()</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">writeFile</span><span class="hljs-params">()</span></span> &#123;<br>str := <span class="hljs-string">&quot;怒发冲冠，凭栏处、潇潇雨歇。&quot;</span><br>err := ioutil.WriteFile(<span class="hljs-string">&quot;满江红&quot;</span>, []<span class="hljs-type">byte</span>(str), <span class="hljs-number">0666</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;write file failed, err:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>file, err := os.OpenFile(<span class="hljs-string">&quot;满江红.txt&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, <span class="hljs-number">0666</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;open file failed, err:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> file.Close()<br><br><span class="hljs-comment">// 写字节或者字符串</span><br>writeBytesOrStr(file)<br><span class="hljs-comment">// flush写</span><br>writeByBufio(file)<br><span class="hljs-comment">// 写文件</span><br>writeFile()<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>0777：-rwxrwxrwx，创建了一个普通文件，所有人拥有所有的读、写、执行权限<br>0666：-rw-rw-rw-，创建了一个普通文件，所有人拥有对该文件的读、写权限，但是都不可执行<br>0644：-rw-r–r–，创建了一个普通文件，文件所有者对该文件有读写权限，用户组和其他人只有读权限，没有执行权限</p></blockquote><h4 id="（2）读写模式"><a href="#（2）读写模式" class="headerlink" title="（2）读写模式"></a>（2）读写模式</h4><p>读取一个文件每一行内容，并追加一行该行的字符个数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>file, err := os.OpenFile(<span class="hljs-string">&quot;读写满江红&quot;</span>, os.O_CREATE|os.O_RDWR|os.O_APPEND, <span class="hljs-number">0666</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;open file failed, err:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> file.Close()<br><br>reader := bufio.NewReader(file)<br>writer := bufio.NewWriter(file)<br><br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br><span class="hljs-comment">// (1) 按行都字符串</span><br>strs, err := reader.ReadString(<span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-comment">// 读取到换行符为止，读取内容包括换行符</span><br>content := strings.Trim(strs, <span class="hljs-string">&quot;\n&quot;</span>)<br>s := fmt.Sprintf(<span class="hljs-string">&quot;\n该行长度为%d，内容为：%s&quot;</span>, <span class="hljs-built_in">len</span>([]<span class="hljs-type">rune</span>(content)), content)<br><br><span class="hljs-comment">// (2) 将行数记录追加进入文件</span><br>writer.WriteString(s)<br>writer.Flush()<br><br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="8-4、其它文件操作"><a href="#8-4、其它文件操作" class="headerlink" title="8.4、其它文件操作"></a>8.4、其它文件操作</h2><h4 id="（1）-删除文件"><a href="#（1）-删除文件" class="headerlink" title="（1） 删除文件"></a>（1） 删除文件</h4><blockquote><p>os.Remove(fname)  </p></blockquote><h4 id="（2）-创建目录"><a href="#（2）-创建目录" class="headerlink" title="（2） 创建目录"></a>（2） 创建目录</h4><blockquote><p>dname :&#x3D;”rain”</p><p>os.Mkdir(dname,os.ModeDir|os.ModePerm)</p></blockquote><h4 id="（3）获取文件信息"><a href="#（3）获取文件信息" class="headerlink" title="（3）获取文件信息"></a>（3）获取文件信息</h4><p>通过<code>os.Stat</code>方法，我们可以获取文件的信息，比如文件大小、名字等。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    f,err:=os.Stat(<span class="hljs-string">&quot;满江红&quot;</span>)<br>    <span class="hljs-keyword">if</span> err ==<span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;name:&quot;</span>,f.Name())<br>        fmt.Println(<span class="hljs-string">&quot;size:&quot;</span>,f.Size())<br>        fmt.Println(<span class="hljs-string">&quot;is dir:&quot;</span>,f.IsDir())<br>        fmt.Println(<span class="hljs-string">&quot;mode::&quot;</span>,f.Mode())<br>        fmt.Println(<span class="hljs-string">&quot;modTime:&quot;</span>,f.ModTime())<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上就是可以获取到的文件信息，还包括判断是否是目录，权限模式和修改时间。所以我们对于文件的信息获取要使用<code>os.Stat</code>函数，它可以在不打开文件的情况下，高效获取文件信息。</p><p><code>os.Stat</code>函数有两个返回值，一个是文件信息，一个是<code>err</code>，通过<code>err</code>我们可以判断文件是否存在。首先，<code>err==nil</code>的时候，文件肯定是存在的；其次<code>err!=nil</code>的时候也不代表不存在，通过err是否等于<code>os.IsNotExist</code>来判断一个文件不存在。</p><h1 id="九、结构体"><a href="#九、结构体" class="headerlink" title="九、结构体"></a>九、结构体</h1><p>在实际开发中，我们可以将一组类型不同的、但是用来描述同一件事物的变量放到结构体中。例如，在校学生有姓名、年龄、身高、成绩等属性，学了结构体后，我们就不需要再定义多个变量了，将它们都放到结构体中即可。</p><p>在Go语言中，结构体承担着面向对象语言中类的作用。Go语言中，结构体本身仅用来定义属性。还可以通过<strong>接收器函数</strong>来定义方法，使用<strong>内嵌结构</strong>体来定义继承。这样使用结构体相关操作Go语言就可以实现<code>OOP</code>面向对象编程了。</p><h2 id="9-1、声明结构体"><a href="#9-1、声明结构体" class="headerlink" title="9.1、声明结构体"></a>9.1、声明结构体</h2><p>Go语言通过<code>type</code>和<code>struct</code>关键字声明结构体，格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> 类型名 <span class="hljs-keyword">struct</span> &#123;   <span class="hljs-comment">// 标识结构体的类型名，在同一个包内不能重复</span><br>    字段<span class="hljs-number">1</span> 字段<span class="hljs-number">1</span>类型    <span class="hljs-comment">// 字段名必须唯一</span><br>    字段<span class="hljs-number">2</span> 字段<span class="hljs-number">2</span>类型<br>    …<br>&#125;<br></code></pre></td></tr></table></figure><p>Go语言结构体（<code>Struct</code>）从本质上讲是一种自定义的数据类型，只不过这种数据类型比较复杂，是由 int、char、float 等基本类型组成的。你可以认为结构体是一种<code>聚合类型</code>。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs golang"><br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>sid    <span class="hljs-type">int</span><br>name   <span class="hljs-type">string</span><br>age    <span class="hljs-type">int8</span><br>course []<span class="hljs-type">string</span> <span class="hljs-comment">//  选秀课程</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Go 语言使用结构体和结构体成员来描述真实世界的实体和实体对应的各种属性。结构体成员，也可称之为成员变量，字段，属性。属性要满足唯一性。</p><p>同类型的变量也可以写在一行，用逗号隔开</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Book <span class="hljs-keyword">struct</span> &#123;<br>   title,author <span class="hljs-type">string</span><br>   price <span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-2、结构体的实例化"><a href="#9-2、结构体的实例化" class="headerlink" title="9.2、结构体的实例化"></a>9.2、结构体的实例化</h2><p>结构体的定义只是一种内存布局的描述，只有当结构体实例化时，才会真正地分配内存，因此必须在定义结构体并实例化后才能使用结构体的字段。实例化就是根据结构体定义的格式创建一份与格式一致的内存区域，结构体实例与实例间的内存是完全独立的。</p><p>实例化方式包括如下几种。</p><h4 id="9-2-1、声明结构体变量再赋值"><a href="#9-2-1、声明结构体变量再赋值" class="headerlink" title="9.2.1、声明结构体变量再赋值"></a>9.2.1、声明结构体变量再赋值</h4><p>结构体本身是一种类型，可以像整型、字符串等类型一样，以 var 的方式声明结构体即可完成实例化。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>sid    <span class="hljs-type">int</span><br>name   <span class="hljs-type">string</span><br>age    <span class="hljs-type">int8</span><br>course []<span class="hljs-type">string</span> <span class="hljs-comment">//  选秀课程</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">// 声明一个结构体对象 ,值类型，默认开辟空间，字段赋予零值</span><br><span class="hljs-keyword">var</span> s Student<br>fmt.Println(<span class="hljs-string">&quot;s:&quot;</span>, s)<br><span class="hljs-comment">// 要访问结构体成员，需要使用点号 . 操作符</span><br>fmt.Println(s.name)<br><span class="hljs-comment">// 更改成员变量的值</span><br>s.name = <span class="hljs-string">&quot;yuan&quot;</span><br>fmt.Println(s.name)<br><span class="hljs-comment">// s.course[0] = &quot;chinese&quot;   // 结果，如何调整</span><br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>1、结构体属于值类型，即var声明后会像整形字符串一样创建内存空间。</p><p>2、创建结构体对象如果没有给字段赋值，则默认零值（字符串默认 “”,数值默认0，布尔默认false，切片和map默认nil对象）</p></blockquote><p><strong>结构体的内存存储：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>sid    <span class="hljs-type">int</span><br>name   <span class="hljs-type">string</span><br>age    <span class="hljs-type">int8</span><br>course []<span class="hljs-type">string</span> <span class="hljs-comment">//  选秀课程</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">// 声明一个结构体对象 ,值类型，默认开辟空间，字段赋予零值</span><br><span class="hljs-keyword">var</span> s Student<br>fmt.Println(<span class="hljs-string">&quot;s:&quot;</span>, s)<br>s.sid = <span class="hljs-number">1001</span><br>s.name = <span class="hljs-string">&quot;yuan&quot;</span><br>s.age = <span class="hljs-number">23</span><br>s.course = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;chinese&quot;</span>, <span class="hljs-string">&quot;math&quot;</span>, <span class="hljs-string">&quot;english&quot;</span>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;s)<br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;(s.sid))<br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;(s.name))<br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;(s.age))<br>fmt.Printf(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;(s.course)) <span class="hljs-comment">// 切片24个字节</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-09-03%2022.12.24-2214367.png" alt="截屏2022-09-03 22.12.24"></p><p>之前我们学习过值类型和引用类型，知道值类型是变量对应的地址直接存储值，而引用类型是变量对应地址存储的是地址。因为结构体因为是值类型，所以p的地址与存储的第一个值的地址是相同的，而后面每一个成员变量的地址是连续的。</p><h4 id="9-2-2、实例化之-结构体"><a href="#9-2-2、实例化之-结构体" class="headerlink" title="9.2.2、实例化之 结构体{}"></a>9.2.2、实例化之 结构体{}</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// (1) 方式1</span><br>s1 := Student&#123;&#125;<br>s1.sid = <span class="hljs-number">1001</span><br>s1.name = <span class="hljs-string">&quot;yuan&quot;</span><br><span class="hljs-comment">// (2) 方式2：键值对赋值</span><br>s2 := Student&#123;sid: <span class="hljs-number">1002</span>, name: <span class="hljs-string">&quot;rain&quot;</span>, course: []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;chinese&quot;</span>, <span class="hljs-string">&quot;math&quot;</span>, <span class="hljs-string">&quot;english&quot;</span>&#125;&#125;<br>fmt.Println(s2)<br><span class="hljs-comment">// (3) 方式3：多值赋值</span><br>s3 := Student&#123;<span class="hljs-number">1003</span>, <span class="hljs-string">&quot;alvin&quot;</span>, <span class="hljs-number">22</span>, []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;chinese&quot;</span>, <span class="hljs-string">&quot;math&quot;</span>, <span class="hljs-string">&quot;english&quot;</span>&#125;&#125;<br>fmt.Println(s3)<br><br></code></pre></td></tr></table></figure><blockquote><p>1、结构体可以使用“键值对”（Key value pair）初始化字段，每个“键”（Key）对应结构体中的一个字段，键的“值”（Value）对应字段需要初始化的值。键值对的填充是可选的，不需要初始化的字段可以不填入初始化列表中，走默认值。</p><p>2、多值初始化方式必须初始化结构体的所有字段且每一个初始值的填充顺序必须与字段在结构体中的声明顺序一致。</p><p>3、键值对与值列表的初始化形式不能混用。</p></blockquote><h4 id="9-2-3、实例化之-结构体"><a href="#9-2-3、实例化之-结构体" class="headerlink" title="9.2.3、实例化之&amp;结构体{}"></a>9.2.3、实例化之&amp;结构体{}</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>sid    <span class="hljs-type">int</span><br>name   <span class="hljs-type">string</span><br>age    <span class="hljs-type">int8</span><br>course []<span class="hljs-type">string</span> <span class="hljs-comment">//  选秀课程</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CourseInit</span><span class="hljs-params">(stu Student)</span></span> &#123;<br>stu.course = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;chinese&quot;</span>, <span class="hljs-string">&quot;math&quot;</span>, <span class="hljs-string">&quot;english&quot;</span>&#125;<br>fmt.Println(stu)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CourseInit2</span><span class="hljs-params">(stu *Student)</span></span> &#123;<br>(*stu).course = []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;chinese&quot;</span>, <span class="hljs-string">&quot;math&quot;</span>, <span class="hljs-string">&quot;english&quot;</span>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">// 案例1</span><br>s1 := Student&#123;sid: <span class="hljs-number">1001</span>, name: <span class="hljs-string">&quot;alvin&quot;</span>, age: <span class="hljs-number">32</span>&#125;<br>s2 := s1 <span class="hljs-comment">// 值拷贝</span><br>fmt.Println(s2)<br>s1.age = <span class="hljs-number">100</span><br>fmt.Println(s2.name)<br><br><span class="hljs-comment">// 如果希望s3的值跟随s2保持一致怎么实现</span><br>s3 := &amp;s1 <span class="hljs-comment">// var s4 *Student = &amp;s2</span><br>s1.age = <span class="hljs-number">100</span><br>fmt.Println((*s3).age)<br>fmt.Println(s3.age)<br><br><span class="hljs-comment">// 案例2</span><br><span class="hljs-keyword">var</span> s4 = Student&#123;sid: <span class="hljs-number">1001</span>, name: <span class="hljs-string">&quot;alvin&quot;</span>, age: <span class="hljs-number">32</span>&#125;<br>CourseInit(s4)<br>fmt.Println(<span class="hljs-string">&quot;s报的课程：&quot;</span>, s4.course)<br><span class="hljs-comment">// 怎么能初始化成功呢？</span><br><span class="hljs-keyword">var</span> s5 = &amp;Student&#123;sid: <span class="hljs-number">1001</span>, name: <span class="hljs-string">&quot;alvin&quot;</span>, age: <span class="hljs-number">32</span>&#125;<br>CourseInit2(s5)<br>fmt.Println(<span class="hljs-string">&quot;s报的课程：&quot;</span>, (*s5).course) <span class="hljs-comment">// *s.course的写法是错误的</span><br>fmt.Println(<span class="hljs-string">&quot;s报的课程：&quot;</span>, s5.course)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>在Go语言中，结构体指针的变量可以继续使用<code>.</code>，这是因为Go语言为了方便开发者访问结构体指针的成员变量可以像访问结构体的成员变量一样简单，使用了语法糖（Syntactic sugar）技术，将 <code>instance.Name</code> 形式转换为 <code>(*instance).Name</code>。</p></blockquote><h4 id="9-2-4、实例化之-new-结构体"><a href="#9-2-4、实例化之-new-结构体" class="headerlink" title="9.2.4、实例化之  new(结构体)"></a>9.2.4、实例化之  new(结构体)</h4><p>Go语言中，还可以使用 new 关键字对类型（包括结构体、整型、浮点数、字符串等）进行实例化，结构体在实例化后会形成指针类型的结构体。使用 new 的格式如下：其中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">instance := <span class="hljs-built_in">new</span>(T)<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li>T 为类型，可以是结构体、整型、字符串等。</li><li><code>instance</code>：T 类型被实例化后保存到 <code>instance</code> 变量中，<code>instance</code>的类型为 *T，属于指针。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">s := <span class="hljs-built_in">new</span>(Student)              <span class="hljs-comment">// &amp;Student&#123;&#125;</span><br>fmt.Println(reflect.TypeOf(s)) <span class="hljs-comment">// *Student</span><br>fmt.Println(s)                 <span class="hljs-comment">// *Student</span><br>s.name = <span class="hljs-string">&quot;yuan&quot;</span><br>fmt.Println((*s).name)<br>fmt.Println(s.name)<br></code></pre></td></tr></table></figure><h2 id="9-4、模拟构造函数"><a href="#9-4、模拟构造函数" class="headerlink" title="9.4、模拟构造函数"></a>9.4、模拟构造函数</h2><p>Go语言没有构造函数，但是我们可以使用结构体初始化的过程来模拟实现构造函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>sid    <span class="hljs-type">int</span><br>name   <span class="hljs-type">string</span><br>age    <span class="hljs-type">int8</span><br>course []<span class="hljs-type">string</span> <span class="hljs-comment">//  选秀课程</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewStudent</span><span class="hljs-params">(sid <span class="hljs-type">int</span>, name <span class="hljs-type">string</span>, age <span class="hljs-type">int8</span>, course []<span class="hljs-type">string</span>)</span></span> *Student &#123;<br><span class="hljs-keyword">return</span> &amp;Student&#123;<br>sid:    sid,<br>name:   name,<br>age:    age,<br>course: course,<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>s := NewStudent(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;yuan&quot;</span>, <span class="hljs-number">32</span>, <span class="hljs-literal">nil</span>)<br>fmt.Println(s)<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-5、方法接收器"><a href="#9-5、方法接收器" class="headerlink" title="9.5、方法接收器"></a>9.5、方法接收器</h2><p>Go语言中的<code>方法（Method）</code>是一种作用于特定类型变量的函数。这种特定类型变量叫做<code>接收者（Receiver）</code>。</p><p>方法的定义格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(接收者变量 接收者类型)</span></span> 方法名(参数列表) (返回参数) &#123;<br>          函数体<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，</p><ul><li>接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名称首字母的小写，而不是<code>self</code>、<code>this</code>之类的命名。例如，<code>Person</code>类型的接收者变量应该命名为 <code>p</code>，<code>Connector</code>类型的接收者变量应该命名为<code>c</code>等。</li><li>接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型。</li><li>方法名、参数列表、返回参数：具体格式与函数定义相同。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Player <span class="hljs-keyword">struct</span> &#123;<br>Name        <span class="hljs-type">string</span><br>HealthPoint <span class="hljs-type">int</span><br>Level       <span class="hljs-type">int</span><br>NowPosition []<span class="hljs-type">int</span><br>Prop        []<span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewPlayer</span><span class="hljs-params">(name <span class="hljs-type">string</span>, hp <span class="hljs-type">int</span>, level <span class="hljs-type">int</span>, np []<span class="hljs-type">int</span>, prop []<span class="hljs-type">string</span>)</span></span> *Player &#123;<br><br><span class="hljs-keyword">return</span> &amp;Player&#123;<br>name,<br>hp,<br>level,<br>np,<br>prop,<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Player)</span></span> attack() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s发起攻击！\n&quot;</span>, p.Name)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Player)</span></span> attacked() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s被攻击！\n&quot;</span>, p.Name)<br>p.HealthPoint -= <span class="hljs-number">10</span><br>fmt.Println(p.HealthPoint)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Player)</span></span> buyProp(prop <span class="hljs-type">string</span>) &#123;<br>p.Prop = <span class="hljs-built_in">append</span>(p.Prop, prop)<br>fmt.Printf(<span class="hljs-string">&quot;%s购买道具！\n&quot;</span>, p.Name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>player := NewPlayer(<span class="hljs-string">&quot;yuan&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>)<br>player.attack()<br>player.attacked()<br>fmt.Println(player.HealthPoint)<br>player.buyProp(<span class="hljs-string">&quot;魔法石&quot;</span>)<br>fmt.Println(player.Prop)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>1、官方定义：Methods are not mixed with the data definition (the structs): they are orthogonal to types; representation(data) and behavior (methods) are independent</p><p>2、方法与函数的区别是，函数不属于任何类型，方法属于特定的类型。</p></blockquote><h2 id="9-6、匿名字段"><a href="#9-6、匿名字段" class="headerlink" title="9.6、匿名字段"></a>9.6、匿名字段</h2><p>结构体允许其成员字段在声明时没有字段名而只有类型，这种没有名字的字段就称为匿名字段。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-type">string</span><br><span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>p1 := Person&#123;<br><span class="hljs-string">&quot;yuan&quot;</span>,<br><span class="hljs-number">18</span>,<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%#v\n&quot;</span>, p1)        <span class="hljs-comment">//main.Person&#123;string:&quot;yuan&quot;, int:18&#125;</span><br>fmt.Println(p1.<span class="hljs-type">string</span>, p1.<span class="hljs-type">int</span>) <span class="hljs-comment">//北京 18</span><br>&#125;<br></code></pre></td></tr></table></figure><p>结构体也可以作为匿名字段使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Addr <span class="hljs-keyword">struct</span> &#123;<br>country  <span class="hljs-type">string</span><br>province <span class="hljs-type">string</span><br>city     <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>age  <span class="hljs-type">int</span><br>Addr<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>p1 := Person&#123;<br><span class="hljs-string">&quot;yuan&quot;</span>,<br><span class="hljs-number">18</span>,<br>Addr&#123;<span class="hljs-string">&quot;中国&quot;</span>, <span class="hljs-string">&quot;广东省&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>&#125;,<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%#v\n&quot;</span>, p1)      <span class="hljs-comment">//main.Person&#123;string:&quot;北京&quot;, int:18&#125;</span><br>fmt.Println(p1.name, p1.age) <span class="hljs-comment">// yuan 18</span><br>fmt.Println(p1.Addr)<br>fmt.Println(p1.Addr.country) <span class="hljs-comment">// 中国</span><br>fmt.Println(p1.city)         <span class="hljs-comment">// 深圳</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>当结构体中有和匿名字段相同的字段时，采用外层优先访问原则</p></blockquote><h2 id="9-7、结构体的继承"><a href="#9-7、结构体的继承" class="headerlink" title="9.7、结构体的继承"></a>9.7、结构体的继承</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-comment">//Animal 动物</span><br><span class="hljs-keyword">type</span> Animal <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *Animal)</span></span> eat() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s is eating！\n&quot;</span>, a.name)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *Animal)</span></span> sleep() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s is sleeping！\n&quot;</span>, a.name)<br>&#125;<br><br><span class="hljs-comment">// Dog 类型</span><br><span class="hljs-keyword">type</span> Dog <span class="hljs-keyword">struct</span> &#123;<br>Kind    <span class="hljs-type">string</span><br>*Animal <span class="hljs-comment">//通过嵌套匿名结构体实现继承</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Dog)</span></span> bark() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s is barking ~\n&quot;</span>, d.name)<br>&#125;<br><br><span class="hljs-comment">// Cat 类型</span><br><span class="hljs-keyword">type</span> Cat <span class="hljs-keyword">struct</span> &#123;<br>*Animal<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Cat)</span></span> climbTree() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s is climb tree ~\n&quot;</span>, c.name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>d1 := &amp;Dog&#123;<br>Kind: <span class="hljs-string">&quot;金毛&quot;</span>,<br>Animal: &amp;Animal&#123; <span class="hljs-comment">//注意嵌套的是结构体指针</span><br>name: <span class="hljs-string">&quot;旺财&quot;</span>,<br>&#125;,<br>&#125;<br>d1.eat()<br>d1.bark()<br><br>c1 := &amp;Cat&#123;<br>Animal: &amp;Animal&#123;<br>name: <span class="hljs-string">&quot;喵喵&quot;</span>,<br>&#125;,<br>&#125;<br>c1.sleep()<br>c1.climbTree()<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-8、序列化"><a href="#9-8、序列化" class="headerlink" title="9.8、序列化"></a>9.8、序列化</h2><blockquote><p>序列化： 通过某种方式把数据结构或对象写入到磁盘文件中或通过网络传到其他节点的过程。</p><p>反序列化：把磁盘中对象或者把网络节点中传输的数据恢复为python的数据对象的过程。</p></blockquote><h3 id="9-8-1、json初识"><a href="#9-8-1、json初识" class="headerlink" title="9.8.1、json初识"></a>9.8.1、json初识</h3><p>序列化最重要的就是json序列化。</p><p>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript (w3c制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p><table><thead><tr><th>go语言数据类型</th><th>json支持的类型</th></tr></thead><tbody><tr><td>整型、浮点型</td><td>整型、浮点型</td></tr><tr><td>字符串（在双引号中）</td><td>字符串（双引号）</td></tr><tr><td>逻辑值（<code>true</code> 或 <code>false</code>）</td><td>逻辑值（<code>true</code> 或 <code>false</code>）</td></tr><tr><td>数组，切片</td><td>数组（在方括号中）</td></tr><tr><td>map</td><td>对象（在花括号中）</td></tr><tr><td>nil</td><td>null</td></tr></tbody></table><h3 id="9-8-2、结构体的json操作"><a href="#9-8-2、结构体的json操作" class="headerlink" title="9.8.2、结构体的json操作"></a>9.8.2、结构体的json操作</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Addr <span class="hljs-keyword">struct</span> &#123;<br>Province <span class="hljs-type">string</span><br>City     <span class="hljs-type">string</span><br>&#125;<br><span class="hljs-keyword">type</span> Stu <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot;`</span> <span class="hljs-comment">// 结构体的标签</span><br>Age  <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;-&quot;`</span>    <span class="hljs-comment">// 表示不参与序列化</span><br>Addr Addr<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-keyword">var</span> stuMap = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;yuan&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">32</span>, <span class="hljs-string">&quot;addr&quot;</span>: <span class="hljs-string">&quot;beijing&quot;</span>&#125;<br><span class="hljs-keyword">var</span> stuStruct = Stu&#123;Name: <span class="hljs-string">&quot;yuan&quot;</span>, Age: <span class="hljs-number">18</span>, Addr: Addr&#123;Province: <span class="hljs-string">&quot;Hebei&quot;</span>, City: <span class="hljs-string">&quot;langFang&quot;</span>&#125;&#125;<br><br><span class="hljs-comment">// 序列化</span><br>jsonStuMap, _ := json.Marshal(stuMap)<br>jsonStuStruct, _ := json.Marshal(stuStruct)<br><br>fmt.Println(<span class="hljs-type">string</span>(jsonStuMap))<br>fmt.Println(<span class="hljs-type">string</span>(jsonStuStruct))<br><br><span class="hljs-comment">// 反序列化</span><br><span class="hljs-comment">// var x  = make(map[int]string)</span><br><span class="hljs-keyword">var</span> StuMap <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;<br>err := json.Unmarshal(jsonStuMap, &amp;StuMap)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;StuMap&quot;</span>, StuMap, StuMap[<span class="hljs-string">&quot;name&quot;</span>])<br><br><span class="hljs-keyword">var</span> StuStruct Stu<br>err := json.Unmarshal(jsonStuStruct, &amp;StuStruct)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(StuStruct)<br>fmt.Println(StuStruct.Name)<br>fmt.Println(StuStruct.Addr.City)<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-9、章节作业"><a href="#9-9、章节作业" class="headerlink" title="9.9、章节作业"></a>9.9、章节作业</h2><p>将客户关系管理系统改为结构体版本</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Customer <span class="hljs-keyword">struct</span> &#123;<br>Cid    <span class="hljs-type">int</span><br>Name   <span class="hljs-type">string</span><br>Gender <span class="hljs-type">string</span><br>Age    <span class="hljs-type">int8</span><br>Email  <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewCustomer</span><span class="hljs-params">(cid <span class="hljs-type">int</span>, name <span class="hljs-type">string</span>, gender <span class="hljs-type">string</span>, age <span class="hljs-type">int8</span>, email <span class="hljs-type">string</span>)</span></span> Customer &#123;<br><br><span class="hljs-keyword">return</span> Customer&#123;<br>Cid:    cid,<br>Name:   name,<br>Gender: gender,<br>Age:    age,<br>Email:  email,<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">type</span> CustomerService <span class="hljs-keyword">struct</span> &#123;<br>customers   []Customer<br>customersId <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewCustomerService</span><span class="hljs-params">(customers []Customer, customersId <span class="hljs-type">int</span>)</span></span> CustomerService &#123;<br><span class="hljs-keyword">return</span> CustomerService&#123;customers, customersId&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> findById(id <span class="hljs-type">int</span>) <span class="hljs-type">int</span> &#123;<br>index := <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(cs.customers); i++ &#123;<br><br><span class="hljs-keyword">if</span> cs.customers[i].Cid == id &#123;<br>index = i<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> index<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> nextChoice() (b <span class="hljs-type">bool</span>) &#123;<br><span class="hljs-comment">// 引导用户选择继续还是返回</span><br>fmt.Print(<span class="hljs-string">&quot;返回上一层【回车】,继续该操作【C/c】,退出【Q/q】:&quot;</span>)<br><span class="hljs-keyword">var</span> Choice <span class="hljs-type">string</span><br>fmt.Scanln(&amp;Choice)<br><span class="hljs-keyword">if</span> strings.ToUpper(Choice) == <span class="hljs-string">&quot;C&quot;</span> &#123;<br>b = <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> strings.ToUpper(Choice) == <span class="hljs-string">&quot;Q&quot;</span> &#123;<br>os.Exit(<span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> addCustomer() &#123;<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br><span class="hljs-comment">// 引导用户输入学号和姓名</span><br>fmt.Printf(<span class="hljs-string">&quot;\033[1;35;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------添加客户开始-----------------------------&quot;</span>)<br><span class="hljs-comment">// 引导用户输入</span><br><span class="hljs-keyword">var</span> name <span class="hljs-type">string</span><br>fmt.Print(<span class="hljs-string">&quot;请输入客户姓名：&quot;</span>)<br>fmt.Scan(&amp;name)<br><br><span class="hljs-keyword">var</span> gender <span class="hljs-type">string</span><br>fmt.Print(<span class="hljs-string">&quot;请输入客户性别：&quot;</span>)<br>fmt.Scan(&amp;gender)<br><br><span class="hljs-keyword">var</span> age <span class="hljs-type">int8</span><br>fmt.Print(<span class="hljs-string">&quot;请输入客户年龄：&quot;</span>)<br>fmt.Scan(&amp;age)<br><br><span class="hljs-keyword">var</span> email <span class="hljs-type">string</span><br>fmt.Print(<span class="hljs-string">&quot;请输入客户邮箱：&quot;</span>)<br>fmt.Scan(&amp;email)<br><br><span class="hljs-comment">// 创建客户的map对象</span><br>cs.customersId++ <span class="hljs-comment">// 客户编号不需要输入，系统自增即可</span><br>newCustomer := NewCustomer(cs.customersId, name, gender, age, email)<br><span class="hljs-comment">// 添加客户map对象添加到客户切片中</span><br>cs.customers = <span class="hljs-built_in">append</span>(cs.customers, newCustomer)<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;35;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------添加客户完成-----------------------------&quot;</span>)<br>goOn := cs.nextChoice()<br><span class="hljs-keyword">if</span> !goOn &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> listCustomer() &#123;<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;32;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;----------------------------------客户列表开始----------------------------&quot;</span>)<br><span class="hljs-keyword">for</span> _, customer := <span class="hljs-keyword">range</span> cs.customers &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\u001B[1;39;45m编号：%-8d 姓名：%-8s 性别：%-8s 年龄：%-8d 邮箱：%-10s \u001B[0m\n&quot;</span>,<br>customer.Cid, customer.Name, customer.Gender, customer.Age, customer.Email)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;32;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;----------------------------------客户列表完成----------------------------&quot;</span>)<br>goOn := cs.nextChoice()<br><span class="hljs-keyword">if</span> !goOn &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> updateCustomer() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;36;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------客户修改开始----------------------------&quot;</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br><span class="hljs-keyword">var</span> updateCid <span class="hljs-type">int</span><br>fmt.Print(<span class="hljs-string">&quot;请输入更新客户编号(-1退出)：&quot;</span>)<br>fmt.Scan(&amp;updateCid)<br><span class="hljs-keyword">if</span> updateCid == <span class="hljs-number">-1</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>updateIndex := cs.findById(updateCid)<br><span class="hljs-keyword">if</span> updateIndex == <span class="hljs-number">-1</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;删除失败，输入的编号ID不存在&quot;</span>)<br><span class="hljs-keyword">continue</span><br>&#125;<br><br><span class="hljs-comment">// 引导用户输入</span><br><span class="hljs-keyword">var</span> name <span class="hljs-type">string</span><br>fmt.Printf(<span class="hljs-string">&quot;请输入客户姓名(%s)：&quot;</span>, cs.customers[updateIndex].Name)<br>fmt.Scanln(&amp;name)<br><br><span class="hljs-keyword">var</span> gender <span class="hljs-type">string</span><br>fmt.Printf(<span class="hljs-string">&quot;请输入客户性别(%s)：&quot;</span>, cs.customers[updateIndex].Gender)<br>fmt.Scanln(&amp;gender)<br><br><span class="hljs-keyword">var</span> age <span class="hljs-type">int8</span><br>fmt.Printf(<span class="hljs-string">&quot;请输入客户年龄(%d)：&quot;</span>, cs.customers[updateIndex].Age)<br>fmt.Scanln(&amp;age)<br><br><span class="hljs-keyword">var</span> email <span class="hljs-type">string</span><br>fmt.Printf(<span class="hljs-string">&quot;请输入客户邮箱(%s)：&quot;</span>, cs.customers[updateIndex].Email)<br>fmt.Scanln(&amp;email)<br><br><span class="hljs-keyword">if</span> age != <span class="hljs-number">0</span> &#123;<br>cs.customers[updateIndex].Age = age<br>&#125;<br><span class="hljs-keyword">if</span> name != <span class="hljs-string">&quot;&quot;</span> &#123;<br>cs.customers[updateIndex].Name = name<br>&#125;<br><span class="hljs-keyword">if</span> gender != <span class="hljs-string">&quot;&quot;</span> &#123;<br>cs.customers[updateIndex].Gender = gender<br>&#125;<br><span class="hljs-keyword">if</span> email != <span class="hljs-string">&quot;&quot;</span> &#123;<br>cs.customers[updateIndex].Email = email<br>&#125;<br><br>fmt.Printf(<span class="hljs-string">&quot;\033[1;36;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------客户修改完成----------------------------&quot;</span>)<br>goOn := cs.nextChoice()<br><span class="hljs-keyword">if</span> !goOn &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> deleteCustomer() &#123;<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;31;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------删除客户开始----------------------------&quot;</span>)<br><span class="hljs-keyword">var</span> delCid <span class="hljs-type">int</span><br>fmt.Print(<span class="hljs-string">&quot;请输入删除客户编号：&quot;</span>)<br>fmt.Scan(&amp;delCid)<br><br>delIndex := cs.findById(delCid)<br><span class="hljs-keyword">if</span> delIndex == <span class="hljs-number">-1</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;删除失败，输入的编号ID不存在&quot;</span>)<br><span class="hljs-keyword">continue</span><br>&#125;<br>cs.customers = <span class="hljs-built_in">append</span>(cs.customers[:delIndex], cs.customers[delIndex+<span class="hljs-number">1</span>:]...)<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;31;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------删除客户完成----------------------&quot;</span>)<br>goOn := cs.nextChoice()<br><span class="hljs-keyword">if</span> !goOn &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> keepCustomers() &#123;<br><br>customersJsonBytes, _ := json.Marshal(cs.customers)<br>err := ioutil.WriteFile(<span class="hljs-string">&quot;customers.json&quot;</span>, customersJsonBytes, <span class="hljs-number">0666</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br>fmt.Printf(<span class="hljs-string">&quot;\033[1;31;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------保存完成----------------------&quot;</span>)<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> customers []Customer<br>customersJsonBytes, err := ioutil.ReadFile(<span class="hljs-string">&quot;customers.json&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>json.Unmarshal(customersJsonBytes, &amp;customers)<br>cs := NewCustomerService(customers, customers[<span class="hljs-built_in">len</span>(customers)<span class="hljs-number">-1</span>].Cid)<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;30;42m%s\033[0m\n&quot;</span>, <span class="hljs-string">`</span><br><span class="hljs-string">----------------客户信息管理系统--------------</span><br><span class="hljs-string">   1、添加客户</span><br><span class="hljs-string">   2、查看客户</span><br><span class="hljs-string">   3、更新客户</span><br><span class="hljs-string">   4、删除客户</span><br><span class="hljs-string">       5、保存</span><br><span class="hljs-string">   6、退出</span><br><span class="hljs-string">-------------------------------------------</span><br><span class="hljs-string">`</span>)<br><br><span class="hljs-keyword">var</span> choice <span class="hljs-type">int</span><br>fmt.Printf(<span class="hljs-string">&quot;\033[1;38;40m%s\033[0m&quot;</span>, <span class="hljs-string">&quot;请输入选择【1-5】:&quot;</span>)<br>stdin := bufio.NewReader(os.Stdin)<br>fmt.Fscan(stdin, &amp;choice)<br><br><span class="hljs-keyword">switch</span> choice &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>cs.addCustomer()<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>cs.listCustomer()<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>cs.updateCustomer()<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>cs.deleteCustomer()<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>cs.keepCustomers()<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>os.Exit(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;按要求输入数字，请重新输入&quot;</span>)<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="十、接口（interface）"><a href="#十、接口（interface）" class="headerlink" title="十、接口（interface）"></a>十、接口（interface）</h1><h2 id="10-1、楔子"><a href="#10-1、楔子" class="headerlink" title="10.1、楔子"></a>10.1、楔子</h2><h3 id="10-1-1-、多态的含义"><a href="#10-1-1-、多态的含义" class="headerlink" title="10.1.1 、多态的含义"></a>10.1.1 、多态的含义</h3><p>在java里，多态是同一个行为具有不同表现形式或形态的能力，即对象多种表现形式的体现，就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><p>如下图所示：使用手机扫描二维码支付时，二维码并不知道客户是通过何种方式进行支付，只有通过二维码后才能判断是走哪种支付方式执行对应流程。</p><p><img src="/pages_images/Go/v2-3b8a27eac265e7c465e4b2c6643a3f1e_720w.png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 支付抽象类或者接口</span><br> <br>public class Pay &#123;<br>    public String pay() &#123;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;do nothing!&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 支付宝支付</span><br> <br>public class AliPay extends Pay &#123;<br>    @Override<br>    public String pay() &#123;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;支付宝pay&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 微信支付</span><br> <br>public class WeixinPay extends Pay &#123;<br>    @Override<br>    public String pay() &#123;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;微信Pay&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br><br> <span class="hljs-comment">// 银联支付</span><br> <br>public class YinlianPay extends Pay &#123;<br>    @Override<br>    public String pay() &#123;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;银联支付&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试支付</span><br>public static void main(String[] args) &#123;<br>    <br>    <span class="hljs-comment">// 测试支付宝支付多态应用   </span><br>    Pay pay = <span class="hljs-built_in">new</span> AliPay();<br>    pay.pay();<br>    <span class="hljs-comment">// 测试微信支付多态应用    </span><br>    pay = <span class="hljs-built_in">new</span> WeixinPay();<br>    pay.pay();<br>   <span class="hljs-comment">// 测试银联支付多态应用  </span><br>    pay = <span class="hljs-built_in">new</span> YinlianPay();<br>    pay.pay();<br>&#125;<br><br><span class="hljs-comment">// 输出结果如下：</span><br><br>支付宝pay<br>微信Pay<br>银联支付<br></code></pre></td></tr></table></figure><p>多态存在的三个必要条件：</p><ul><li>继承</li><li>重写</li><li>父类引用指向子类对象</li></ul><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Pay</span> <span class="hljs-variable">pay</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AliPay</span>();<br></code></pre></td></tr></table></figure><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，再去调用子类的同名方法。</p><h3 id="10-1-2、抽象类与接口"><a href="#10-1-2、抽象类与接口" class="headerlink" title="10.1.2、抽象类与接口"></a>10.1.2、抽象类与接口</h3><p>这样实现当然是可行的，但其实有一个小小的问题，就是Pay类当中的pay方法多余了。因为我们使用的只会是它的子类，并不会用到Pay这个父类。所以我们没必要实现父类Pay中的pay方法，做一个标记，表示有这么一个方法**，子类实现的时候需要实现它就可以了。</p><p>这就是抽象类和抽象方法的来源，我们可以把Pay做成一个抽象类，声明pay是一个抽象方法。抽象类是不能直接创建实例的，只能创建子类的实例，并且抽象方法也不用实现，只需要标记好参数和返回就行了。具体的实现都在子类当中进行。说白了抽象方法就是一个标记，告诉编译器凡是继承了这个类的子类必须要实现抽象方法，父类当中的方法不能调用。那抽象类就是含有抽象方法的类。</p><p>我们写出Pay变成抽象类之后的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pay</span> &#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">pay</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>很简单，因为我们只需要定义方法的参数就可以了，不需要实现方法的功能，方法的功能在子类当中实现。由于我们标记了pay这个方法是一个抽象方法，凡是继承了Pay的子类都必须要实现这个方法，否则一定会报错。</p><p>抽象类其实是一个擦边球，我们可以在抽象类中定义抽象的方法也就是只声明不实现，也可以在抽象类中实现具体的方法。在抽象类当中非抽象的方法，子类的实例是可以直接调用的，和子类调用父类的普通方法一样。但假如我们不需要父类实现方法，我们提出提取出来的父类中的所有方法都是抽象的呢？针对这一种情况，Java当中还有一个概念叫做接口，也就是interface，本质上来说interface就是抽象类，只不过是只有抽象方法的抽象类。</p><p>所以刚才的Pay通过接口实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Pay</span> &#123;<br>    String <span class="hljs-title function_">pay</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>把Pay变成了interface之后，子类的实现没什么太大的差别，只不过将extends关键字换成了implements。另外，子类只能继承一个抽象类，但是可以实现多个接口。早先的Java版本当中，interface只能够定义方法和常量，在Java8以后的版本当中，我们也可以在接口当中实现一些默认方法和静态方法。</p><p>接口的好处是很明显的，我们可以<strong>用接口的实例来调用所有实现了这个接口的类</strong>。也就是说接口和它的实现是一种要宽泛许多的继承关系，大大增加了灵活性。</p><p>以上虽然全是Java的内容，但是讲的其实是面向对象的内容，如果没有学过Java的小伙伴可能看起来稍稍有一点点吃力，但总体来说问题不大，没必要细扣当中的语法细节，get到核心精髓就可以了。</p><h3 id="10-1-3、Go中的接口实现"><a href="#10-1-3、Go中的接口实现" class="headerlink" title="10.1.3、Go中的接口实现"></a>10.1.3、Go中的接口实现</h3><p><code>Golang</code>当中也有接口，但是它的理念和使用方法和Java稍稍有所不同，它们的使用场景以及实现的目的是类似的，本质上都是为了抽象。通过接口提取出了一些方法，所有继承了这个接口的类都必然带有这些方法，那么我们通过接口获取这些类的实例就可以使用了，大大增加了灵活性。</p><p>但是Java当中的接口有一个很大的问题就是<strong>侵入性</strong>，<code>Golang</code>当中的接口解决了这个问题，也就是说它<strong>完全拿掉了原本弱化的继承关系</strong>，只要接口中定义的方法能对应的上，那么就可以认为这个类实现了这个接口。</p><p>我们先来创建一个interface，当然也是通过type关键字：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Pay <span class="hljs-keyword">interface</span> &#123;<br>    pay() <span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们定义了一个Pay的接口，当中声明了一个pay函数。也就是说<strong>只要是拥有这个函数的结构体就可以用这个接口来接收</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> AliPay <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-keyword">type</span> WeixinPay <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-keyword">type</span> YinlianPay <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a AliPay)</span></span> pay() &#123;<br>   fmt.Println(<span class="hljs-string">&quot;支付宝pay&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(w WeixinPay)</span></span> pay() &#123;<br>   fmt.Println(<span class="hljs-string">&quot;微信pay&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(y YinlianPay)</span></span> pay() &#123;<br>   fmt.Println(<span class="hljs-string">&quot;银联pay&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>之后，我们尝试使用这个接口来接收各种结构体的对象，然后调用它们的pay方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>     <span class="hljs-keyword">var</span> p Pay<br>     p = AliPay&#123;&#125;<br>     p.pay()<br>     p = WeixinPay&#123;&#125;<br>     p.pay()<br>     p = YinlianPay&#123;&#125;<br>     p.pay()<br>&#125;<br></code></pre></td></tr></table></figure><p>出来的结果是一样的！</p><p>golang中的接口设计非常出色，因为它<strong>解耦了接口和实现类之间的联系</strong>，使得进一步增加了我们编码的灵活度，解决了供需关系颠倒的问题。但是世上没有绝对的好坏，golang中的接口在方便了我们编码的同时也带来了一些问题，比如说由于没了接口和实现类的强绑定，其实也一定程度上增加了开发和维护的成本。</p><p>总体来说这是一个仁者见仁的改动，有些写惯了Java的同学可能会觉得没有必要，这是过度解绑，有些人之前深受其害的同学可能觉得这个进步非常关键。但不论你怎么看，这都不影响我们学习它，毕竟<strong>学习本身是不带立场的</strong>。</p><blockquote><p>接口本身就是一种规范，能让大家在一个框架下开发，比如张三新进入部门，开发一个新的支付功能，在接口的限制下，开发就会会规范很多。就像USB接口一样，定义统一接口，无论外部实现的是音响还是硬盘，必须都按定义好的数据格式开发。</p></blockquote><h2 id="10-2、Go的接口语法"><a href="#10-2、Go的接口语法" class="headerlink" title="10.2、Go的接口语法"></a>10.2、Go的接口语法</h2><h3 id="10-2-1、基本语法"><a href="#10-2-1、基本语法" class="headerlink" title="10.2.1、基本语法"></a>10.2.1、基本语法</h3><p>在 Golang 中，interface 是一组 method 的集合，是 <strong>duck-type programming</strong> 的一种体现。不关心属性（数据），只关心行为（方法）。具体使用中你可以自定义自己的 struct，并提供特定的 interface 里面的 method 就可以把它当成 interface 来使用。</p><blockquote><p>if something looks like a duck, swims like a duck and quacks like a duck then it’s probably a duck.</p></blockquote><p>每个接口由数个方法组成，接口的定义格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> 接口类型名 <span class="hljs-keyword">interface</span>&#123;<br>    方法名<span class="hljs-number">1</span>( 参数列表<span class="hljs-number">1</span> ) 返回值列表<span class="hljs-number">1</span><br>    方法名<span class="hljs-number">2</span>( 参数列表<span class="hljs-number">2</span> ) 返回值列表<span class="hljs-number">2</span><br>    …<br>&#125;<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li>接口名：使用<code>type</code>将接口定义为自定义的类型名。Go语言的接口在命名时，一般会在单词后面添加<code>er</code>，如有写操作的接口叫<code>Writer</code>，有字符串功能的接口叫<code>Stringer</code>等。接口名最好要能突出该接口的类型含义。</li><li>方法名：当方法名首字母是大写且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包（package）之外的代码访问。</li><li>参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以省略。</li></ul><h3 id="10-2-2、实现接口的条件"><a href="#10-2-2、实现接口的条件" class="headerlink" title="10.2.2、实现接口的条件"></a>10.2.2、实现接口的条件</h3><p>一个对象只要全部实现了接口中的方法，那么就实现了这个接口。换句话说，接口就是一个<strong>需要实现的方法列表</strong>。</p><p>我们来定义一个<code>Animal</code>接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Animal 接口</span><br><span class="hljs-keyword">type</span> Animal <span class="hljs-keyword">interface</span> &#123;<br>sleep()<br>&#125;<br></code></pre></td></tr></table></figure><p>定义<code>Dog</code>和<code>Cat</code>两个结构体：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Dog <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>&#125;<br><span class="hljs-keyword">type</span> Cat <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>因为<code>Animal</code>接口里只有一个<code>sleep</code>方法，所以我们只需要给<code>Dog</code>和<code>Cat </code>类分别实现<code>sleep</code>方法就可以实现<code>Sayer</code>接口了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Dog实现了Animal接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d Dog)</span></span> sleep() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s正在侧卧着睡觉\n&quot;</span>, d.name)<br>&#125;<br><span class="hljs-comment">// Cat实现了Animal接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Cat)</span></span> sleep() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s正在卷成团睡觉\n&quot;</span>, c.name)<br>&#125;<br></code></pre></td></tr></table></figure><p>接口的实现就是这么简单，只要实现了接口中的所有方法，就实现了这个接口。</p><h3 id="10-2-3、接口类型变量"><a href="#10-2-3、接口类型变量" class="headerlink" title="10.2.3、接口类型变量"></a>10.2.3、接口类型变量</h3><p>那实现了接口有什么用呢？</p><p>接口类型变量能够存储所有实现了该接口的实例。 例如上面的示例中，<code>Animal</code>类型的变量能够存储<code>Dog</code>和<code>Cat</code>类型的变量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">(animal Animal)</span></span>  &#123;<br>animal.sleep()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> a Animal<br><br><span class="hljs-keyword">var</span> d = Dog&#123;<span class="hljs-string">&quot;川普&quot;</span>&#125;<br><span class="hljs-keyword">var</span> c = Cat&#123;<span class="hljs-string">&quot;拜登&quot;</span>&#125;<br><br><span class="hljs-comment">// 案例1</span><br>a = d<br>a.sleep()<br>a = c<br>a.sleep()<br><span class="hljs-comment">// 案例2</span><br>foo(d)<br>foo(c)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="10-2-4、值和指针接收者实现接口"><a href="#10-2-4、值和指针接收者实现接口" class="headerlink" title="10.2.4、值和指针接收者实现接口"></a>10.2.4、值和指针接收者实现接口</h3><p>使用值接收者实现接口和使用指针接收者实现接口有什么区别呢？接下来我们通过一个例子看一下其中的区别。</p><h4 id="（1）值接收者实现接口"><a href="#（1）值接收者实现接口" class="headerlink" title="（1）值接收者实现接口"></a>（1）值接收者实现接口</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Animal <span class="hljs-keyword">interface</span> &#123;<br>sleep()<br>&#125;<br><br><span class="hljs-keyword">type</span> Dog <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-comment">// Dog实现了Animal接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d Dog)</span></span> sleep() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s正在侧卧着睡觉\n&quot;</span>, d.name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a Animal<br><span class="hljs-keyword">var</span> chuanPu = Dog&#123;<span class="hljs-string">&quot;川普&quot;</span>&#125;<br>a = chuanPu     <span class="hljs-comment">// a可以接收Dog类型</span><br>chuanPu.sleep() <span class="hljs-comment">// 将Dog类型chuanPu拷贝给接收者方法sleep的d，然后执行sleep方法</span><br>a = &amp;chuanPu    <span class="hljs-comment">// a可以接受*Dog类型</span><br>a.sleep()       <span class="hljs-comment">//将*Dog类型chuanPu取值操作后拷贝给接收者方法sleep的d，然后执行sleep方法</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>从上面的代码中我们可以发现，使用值接收者实现接口之后，不管是Dog结构体对象还是结构体指针对象都可以赋值给该接口变量。因为Go语言中有对指针类型变量求值的语法糖，Dog指针a内部会自动求值<code>川普</code>结构体对象然后拷贝赋值。</p><h4 id="（2）指针接收者实现接口"><a href="#（2）指针接收者实现接口" class="headerlink" title="（2）指针接收者实现接口"></a>（2）指针接收者实现接口</h4><p>同样的代码我们再来测试一下使用指针接收者有什么区别：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Animal <span class="hljs-keyword">interface</span> &#123;<br>sleep()<br>&#125;<br><br><span class="hljs-keyword">type</span> Dog <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-comment">// Dog实现了Animal接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *Dog)</span></span> sleep() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s正在侧卧着睡觉\n&quot;</span>, d.name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a Animal<br><span class="hljs-keyword">var</span> chuanPu = Dog&#123;<span class="hljs-string">&quot;川普&quot;</span>&#125;<br><span class="hljs-comment">// a = chuanPu     // a不可以接收Dog类型</span><br>a = &amp;chuanPu      <span class="hljs-comment">// a只可以接收*Dog类型</span><br>a.sleep()       <br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>此时实现Animal的接口的是<code>*Dog</code>类型，所以不能给<code>a</code>传入<code>Dog</code>类型的<code>chuanPu</code>，此时a只能存储<code>*Dog</code>类型的值，即<code>&amp;chuanPu</code>。</p><h3 id="10-2-5、类型与接口的关系"><a href="#10-2-5、类型与接口的关系" class="headerlink" title="10.2.5、类型与接口的关系"></a>10.2.5、类型与接口的关系</h3><h4 id="（1）一个类型实现多个接口"><a href="#（1）一个类型实现多个接口" class="headerlink" title="（1）一个类型实现多个接口"></a>（1）一个类型实现多个接口</h4><p>一个类型可以同时实现多个接口，而接口间彼此独立，不知道对方的实现。 例如，狗可以跑，也可以叫。我们就分别定义Runner接口和Sayer接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Sayer 接口</span><br><span class="hljs-keyword">type</span> Sayer <span class="hljs-keyword">interface</span> &#123;<br>say()<br>&#125;<br><br><span class="hljs-comment">// Runner 接口</span><br><span class="hljs-keyword">type</span> Runner <span class="hljs-keyword">interface</span> &#123;<br>run()<br>&#125;<br></code></pre></td></tr></table></figure><p>Dog既可以实现Sleep接口，也可以实现Run接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">// Sayer 接口</span><br><span class="hljs-keyword">type</span> Sayer <span class="hljs-keyword">interface</span> &#123;<br>say()<br>&#125;<br><br><span class="hljs-comment">// Runner 接口</span><br><span class="hljs-keyword">type</span> Runner <span class="hljs-keyword">interface</span> &#123;<br>run()<br>&#125;<br><br><span class="hljs-keyword">type</span> Dog <span class="hljs-keyword">struct</span> &#123;<br>    name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-comment">// 实现Sayer接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d Dog)</span></span> say() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s汪汪汪叫\n&quot;</span>, d.name)<br>&#125;<br><br><span class="hljs-comment">// 实现Runner接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d Dog)</span></span> run() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s吐舌头跑\n&quot;</span>, d.name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> s Sayer<br><span class="hljs-keyword">var</span> r Runner<br><br><span class="hljs-keyword">var</span> d = Dog&#123;name: <span class="hljs-string">&quot;旺财&quot;</span>&#125;<br>s = d<br>s.say()<br>r = d<br>r.run()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）多个类型实现同一接口"><a href="#（2）多个类型实现同一接口" class="headerlink" title="（2）多个类型实现同一接口"></a>（2）多个类型实现同一接口</h4><p>Go语言中不同的类型还可以实现同一接口 首先我们定义一个<code>Runner</code>接口，它要求必须有一个<code>run</code>方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Runner 接口</span><br><span class="hljs-keyword">type</span> Runner <span class="hljs-keyword">interface</span> &#123;<br>run()<br>&#125;<br></code></pre></td></tr></table></figure><p>例如狗可以跑，汽车也可以跑，可以使用如下代码实现这个关系：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Car <span class="hljs-keyword">struct</span> &#123;<br>brand <span class="hljs-type">string</span><br>&#125;<br><span class="hljs-keyword">type</span> Dog <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>&#125;<br><br><br><span class="hljs-comment">// Runner 接口</span><br><span class="hljs-keyword">type</span> Runner <span class="hljs-keyword">interface</span> &#123;<br>run()<br>&#125;<br><br><br><span class="hljs-comment">// Dog实现Runner接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d Dog)</span></span> run() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s正在吐舌头跑\n&quot;</span>, d.name)<br>&#125;<br><br><span class="hljs-comment">// Car实现Runner接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c Car)</span></span> run() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s正在飞速行驶\n&quot;</span>, c.brand)<br>&#125;<br></code></pre></td></tr></table></figure><p>这个时候我们在代码中就可以把狗和汽车当成一个会动的物体来处理了，不再需要关注它们具体是什么，只需要调用它们的<code>move</code>方法就可以了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> r Runner<br><br><span class="hljs-keyword">var</span> d = Dog&#123;name: <span class="hljs-string">&quot;旺财&quot;</span>&#125;<br><span class="hljs-keyword">var</span> c = Car&#123;brand: <span class="hljs-string">&quot;奔驰&quot;</span>&#125;<br>r = d<br>r.run()<br>r = c<br>r.run()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-2-6、类型嵌套"><a href="#10-2-6、类型嵌套" class="headerlink" title="10.2.6、类型嵌套"></a>10.2.6、类型嵌套</h3><p>一个类型（struct）必须实现了接口中的所有方法才能称为实现了该接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Animal 接口</span><br><span class="hljs-keyword">type</span> Animal <span class="hljs-keyword">interface</span> &#123;<br>sleep()<br>run()<br>&#125;<br><br><span class="hljs-keyword">type</span> Dog <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-comment">// Dog实现了run方法和sleep方法，即实现了Animal接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d Dog)</span></span> run() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s正在吐舌头跑\n&quot;</span>, d.name)<br>&#125;<br><span class="hljs-comment">/*func (d Dog) sleep() &#123;</span><br><span class="hljs-comment">fmt.Printf(&quot;%s正在侧翻睡\n&quot;, d.name)</span><br><span class="hljs-comment">&#125;*/</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> r Animal<br><br><span class="hljs-keyword">var</span> d = Dog&#123;name: <span class="hljs-string">&quot;旺财&quot;</span>&#125;<br>    r = d<br>    r.run()<br>&#125;<br></code></pre></td></tr></table></figure><p>一个接口的方法，不一定需要由一个类型完全实现，接口的方法可以通过在类型中嵌入其他类型或者结构体来实现。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">// WashingMachine 洗衣机</span><br><span class="hljs-keyword">type</span> WashingMachine <span class="hljs-keyword">interface</span> &#123;<br>wash()<br>dry()<br>&#125;<br><br><span class="hljs-comment">// 甩干器</span><br><span class="hljs-keyword">type</span> Dryer <span class="hljs-keyword">struct</span>&#123;<br>brand <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-comment">// 实现WashingMachine接口的dry()方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d Dryer)</span></span> dry() &#123;<br>fmt.Println(<span class="hljs-string">&quot;甩干衣服&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// 海尔洗衣机</span><br><span class="hljs-keyword">type</span> Haier <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>Dryer <span class="hljs-comment">//嵌入甩干器</span><br>&#125;<br><br><span class="hljs-comment">// 实现WashingMachine接口的wash()方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(h Haier)</span></span> wash() &#123;<br>fmt.Println(<span class="hljs-string">&quot;洗衣服&quot;</span>)<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> wm WashingMachine<br>wm = Haier&#123;<br>name: <span class="hljs-string">&quot;海尔洗衣机&quot;</span>,<br>Dryer:Dryer&#123;<br>brand:<span class="hljs-string">&quot;西门子&quot;</span>,<br>&#125;,<br>&#125;<br><br>wm.wash()<br>wm.dry()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-2-7、接口嵌套"><a href="#10-2-7、接口嵌套" class="headerlink" title="10.2.7、接口嵌套"></a>10.2.7、接口嵌套</h3><p>接口与接口间可以通过嵌套创造出新的接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">// Animal 接口</span><br><span class="hljs-comment">/*type Animal interface &#123;</span><br><span class="hljs-comment">sleep()</span><br><span class="hljs-comment">run()</span><br><span class="hljs-comment">&#125;*/</span><br><br><br><span class="hljs-comment">// Sleep接口</span><br><span class="hljs-keyword">type</span> Sleep <span class="hljs-keyword">interface</span> &#123;<br>sleep()<br>&#125;<br><span class="hljs-comment">// Runner接口</span><br><span class="hljs-keyword">type</span> Runner <span class="hljs-keyword">interface</span> &#123;<br>run()<br>&#125;<br><br><span class="hljs-comment">// Animal接口</span><br><span class="hljs-keyword">type</span> Animal <span class="hljs-keyword">interface</span> &#123;<br>Sleep<br>Runner<br>&#125;<br><br><span class="hljs-keyword">type</span> Dog <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-comment">// Dog实现了run方法和sleep方法，即实现了Animal接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d Dog)</span></span> run() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s正在吐舌头跑\n&quot;</span>, d.name)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d Dog)</span></span> sleep() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s正在侧翻睡\n&quot;</span>, d.name)<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> r Animal<br><span class="hljs-keyword">var</span> d = Dog&#123;name: <span class="hljs-string">&quot;旺财&quot;</span>&#125;<br>    r = d<br>    r.run()<br>    r.sleep()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-2-8、空接口"><a href="#10-2-8、空接口" class="headerlink" title="10.2.8、空接口"></a>10.2.8、空接口</h3><h4 id="（1）空接口的定义"><a href="#（1）空接口的定义" class="headerlink" title="（1）空接口的定义"></a>（1）空接口的定义</h4><p>空接口是指没有定义任何方法的接口。因此任何类型都实现了空接口。</p><p>空接口类型的变量可以存储任意类型的变量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 定义一个空接口x</span><br><span class="hljs-keyword">var</span> x <span class="hljs-keyword">interface</span>&#123;&#125;<br>s := <span class="hljs-string">&quot;Hello Yuan&quot;</span><br>x = s<br>fmt.Printf(<span class="hljs-string">&quot;type:%T value:%v\n&quot;</span>, x, x)<br>i := <span class="hljs-number">100</span><br>x = i<br>fmt.Printf(<span class="hljs-string">&quot;type:%T value:%v\n&quot;</span>, x, x)<br>b := <span class="hljs-literal">true</span><br>x = b<br>fmt.Printf(<span class="hljs-string">&quot;type:%T value:%v\n&quot;</span>, x, x)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（2）空接口的应用"><a href="#（2）空接口的应用" class="headerlink" title="（2）空接口的应用"></a>（2）空接口的应用</h4><ul><li>空接口作为函数的参数</li></ul><p>使用空接口实现可以接收任意类型的函数参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 空接口作为函数参数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">show</span><span class="hljs-params">(a <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;type:%T value:%v\n&quot;</span>, a, a)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>空接口作为map的值</li></ul><p>使用空接口实现可以保存任意值的字典。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 空接口作为map值</span><br><span class="hljs-keyword">var</span> studentInfo = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)<br>studentInfo[<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&quot;yuan&quot;</span><br>studentInfo[<span class="hljs-string">&quot;age&quot;</span>] = <span class="hljs-number">18</span><br>studentInfo[<span class="hljs-string">&quot;isMarried&quot;</span>] = <span class="hljs-literal">false</span><br>fmt.Println(studentInfo)<br></code></pre></td></tr></table></figure><ul><li>类型断言</li></ul><p>一个接口的值（简称接口值）是由<code>一个具体类型</code>和<code>具体类型的值</code>两部分组成的。这两部分分别称为接口的<code>动态类型</code>和<code>动态值</code>。</p><p>想要判断空接口中的值这个时候就可以使用类型断言，其语法格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">x.(T)<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li>x：表示类型为<code>interface&#123;&#125;</code>的变量</li><li>T：表示断言<code>x</code>可能是的类型。</li></ul><p>该语法返回两个参数，第一个参数是<code>x</code>转化为<code>T</code>类型后的变量，第二个值是一个布尔值，若为<code>true</code>则表示断言成功，为<code>false</code>则表示断言失败。</p><p>举个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> x <span class="hljs-keyword">interface</span>&#123;&#125;<br>x = <span class="hljs-string">&quot;Hello Yuan!&quot;</span><br>v, ok := x.(<span class="hljs-type">string</span>)<br><span class="hljs-keyword">if</span> ok &#123;<br>fmt.Println(v)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;类型断言失败&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的示例中如果要断言多次就需要写多个<code>if</code>判断，这个时候我们可以使用<code>switch</code>语句来实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">justifyType</span><span class="hljs-params">(x <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br><span class="hljs-keyword">switch</span> v := x.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-type">string</span>:<br>fmt.Printf(<span class="hljs-string">&quot;x is a string类型，value is %v\n&quot;</span>, v)<br><span class="hljs-keyword">case</span> <span class="hljs-type">int</span>:<br>fmt.Printf(<span class="hljs-string">&quot;x is a int类型, value is %v\n&quot;</span>, v)<br><span class="hljs-keyword">case</span> <span class="hljs-type">bool</span>:<br>fmt.Printf(<span class="hljs-string">&quot;x is a bool类型,value is %v\n&quot;</span>, v)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;unsupport type！&quot;</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>justifyType(<span class="hljs-number">12</span>)<br>justifyType(<span class="hljs-literal">true</span>)<br>justifyType(<span class="hljs-string">&quot;hi,yuan!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>因为空接口可以存储任意类型值的特点，所以空接口在Go语言中的使用十分广泛。</p><p>关于接口需要注意的是，只有当有两个或两个以上的具体类型必须以相同的方式进行处理时才需要定义接口。不要为了接口而写接口，那样只会增加不必要的抽象，导致不必要的运行时损耗。</p><h1 id="十一、包管理"><a href="#十一、包管理" class="headerlink" title="十一、包管理"></a>十一、包管理</h1><p><img src="/pages_images/Go/v2-1e7d15fd7435e57893daf061545386b6_1440w-2212194.jpg" alt="Go语言学习笔记03 -- 内置基本数据类型之字符串"></p><h2 id="11-1、package"><a href="#11-1、package" class="headerlink" title="11.1、package"></a>11.1、package</h2><p>Go语言是使用包来组织源代码的，包（package）是多个 Go 源码的集合，是一种高级的代码复用方案。Go语言中为我们提供了很多内置包，如 fmt、os、io 等。任何源代码文件必须属于某个包，同时源码文件的第一行有效代码必须是<code>package pacakgeName </code>语句，通过该语句声明自己所在的包。  </p><p>Go语言的包借助了目录树的组织形式，一般包的名称就是其源文件所在目录的名称，虽然Go语言没有强制要求包名必须和其所在的目录名同名，但还是建议包名和所在目录同名，这样结构更清晰。</p><h3 id="11-1-1、包的基本使用"><a href="#11-1-1、包的基本使用" class="headerlink" title="11.1.1、包的基本使用"></a>11.1.1、包的基本使用</h3><p>导入包的语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;包的路径&quot;</span>    <span class="hljs-comment">// 双引号</span><br></code></pre></td></tr></table></figure><p>导入包路径规则：</p><p>Go 程序首先在 <code>GOROOT/src</code> 目录中寻找包目录，如果没有找到，则会去 <code>GOPATH/src</code> 目录中继续寻找。比如 <code>fmt</code> 包是位于 <code>GOROOT/src</code> 目录的 Go 语言标准库中的一部分，它将会从该目录中导入。</p><p>目录结构</p><p><img src="/pages_images/Go/image-20220917232517408.png" alt="image-20220917232517408"></p><p><code>db</code>包</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> db<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HandleMySQL</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;操作MySQL数据库&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> db<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HandleRedis</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;操作redis数据库&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>api包</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> api<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;mysite/db&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RestfulAPI</span><span class="hljs-params">()</span></span> &#123;<br>db.HandleMySQL()<br>fmt.Println(<span class="hljs-string">&quot;RestfulAPI:MySQL数据接口&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> api<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;mysite/db&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RpcAPI</span><span class="hljs-params">()</span></span> &#123;<br>db.HandleRedis()<br>fmt.Println(<span class="hljs-string">&quot;RpcAPI:redis数据接口&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>main</code>包</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;mysite/api&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// db.HandleMySQL()</span><br><span class="hljs-comment">// db.HandleRedis()</span><br><br>api.RestfulAPI()<br>api.RpcAPI()<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>1、包名一般是小写的，见名知意，包名中不能包含<code>- </code>等特殊符号。</p><p>2、包名规范上要和所在的目录同名，也可以不同。比如<code>package api</code>改为<code>package newApi</code>,代码改动为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> newApi <span class="hljs-string">&quot;mysite/api&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>newApi.RestfulAPI()<br>newApi.RpcAPI()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>3、包名为 main 的包为应用程序的入口包，编译不包含 main 包的源码文件时不会得到可执行文件。</p><p>4、一个文件夹下的所有源码文件只能属于同一个包，同样属于同一个包的源码文件不能放在多个文件夹下。</p><p>5、一个包下的不同文件不能含有同名函数。</p><p>6、如果想在一个包中引用另外一个包里的标识符（如变量、常量、类型、函数等）时，该标识符必须是对外可见的（public），在Go语言中只需要将标识符的首字母大写就可以让标识符对外可见了。</p><p>7、环境变量<code>GO111MODULE=off</code>： go env -w GO111MODULE&#x3D;off</p><p>8、将<code>mysite</code>剪切到<code>src</code>外的任何位置，都会导包失败。</p></blockquote><h3 id="11-1-2、包的导入格式"><a href="#11-1-2、包的导入格式" class="headerlink" title="11.1.2、包的导入格式"></a>11.1.2、包的导入格式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 一次导入多个包</span><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;mysite/api&quot;</span><br>)<br><br><span class="hljs-comment">// 设置包的别名</span><br><span class="hljs-keyword">import</span> F <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-comment">// 省略引用格式</span><br><span class="hljs-keyword">import</span> . <span class="hljs-string">&quot;mysite/api&quot;</span><br>RestfulAPI()<br><br><span class="hljs-comment">// 匿名导入 :在引用某个包时，如果只是希望执行包初始化的 init 函数，而不使用包内部的数据时，可以使用匿名引用格式</span><br><span class="hljs-keyword">import</span> _ <span class="hljs-string">&quot;包名&quot;</span><br><span class="hljs-keyword">import</span> (<br>      <span class="hljs-string">&quot;database/sql&quot;</span><br>      _ <span class="hljs-string">&quot;github.com/go-sql-driver/mysql&quot;</span><br>  )  <br></code></pre></td></tr></table></figure><h3 id="11-1-3、包的加载顺序"><a href="#11-1-3、包的加载顺序" class="headerlink" title="11.1.3、包的加载顺序"></a>11.1.3、包的加载顺序</h3><p><code>init()</code>函数会在每个包完成初始化后自动执行，并且执行优先级比main函数高。</p><p>init 函数通常被用来：</p><ul><li>对变量进行初始化</li><li>检查&#x2F;修复程序的状态</li><li>注册</li><li>运行一次计算</li></ul><blockquote><p>注意：</p><p>1、一个包可以有多个 init 函数，包加载时会执行全部的 init 函数，但并不能保证执行顺序，所以不建议在一个包中放入多个 init 函数，将需要初始化的逻辑放到一个 init 函数里面。</p><p>2、包不能出现环形引用的情况，比如包 a 引用了包 b，包 b 引用了包 c，如果包 c 又引用了包 a，则编译不能通过。</p><p>3、包的重复引用是允许的，比如包 a 引用了包 b 和包 c，包 b 和包 c 都引用了包 d。这种场景相当于重复引用了 d，这种情况是允许的，并且 Go 编译器保证包 d 的 init 函数  <code>只会执行一次</code>。</p><p>4、<code>init()</code>函数没有参数也没有返回值。 <code>init()</code>函数在程序运行时自动被调用执行，不能在代码中主动调用它。</p></blockquote><p><img src="/pages_images/Go/image-20210324210805734.png" alt="image-20210324210805734"></p><h2 id="11-2、go-module"><a href="#11-2、go-module" class="headerlink" title="11.2、go module"></a>11.2、go module</h2><p>module是一个相关Go包的集合，它是源代码更替和版本控制的单元。</p><h3 id="11-2-1、Go-mod命令"><a href="#11-2-1、Go-mod命令" class="headerlink" title="11.2.1、Go mod命令"></a>11.2.1、Go mod命令</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">download    download modules to local cache (下载依赖的module到本地cache))</span><br><span class="hljs-comment">edit        edit go.mod from tools or scripts (编辑go.mod文件)</span><br><span class="hljs-comment">graph       print module requirement graph (打印模块依赖图))</span><br><span class="hljs-comment">init        initialize new module in current directory (再当前文件夹下初始化一个新的module, 创建go.mod文件))</span><br><span class="hljs-comment">tidy        add missing and remove unused modules (增加丢失的module，去掉未用的module)</span><br><span class="hljs-comment">vendor      make vendored copy of dependencies (将依赖复制到vendor下)</span><br><span class="hljs-comment">verify      verify dependencies have expected content (校验依赖)</span><br><span class="hljs-comment">why         explain why packages or modules are needed (解释为什么需要依赖)*/</span><br><br></code></pre></td></tr></table></figure><blockquote><p>Mod Cache 路径默认在<code>$GOPATH/pkg</code> 下面：<code>$GOPATH/pkg/mod</code></p></blockquote><h3 id="11-2-2、go-mod流程"><a href="#11-2-2、go-mod流程" class="headerlink" title="11.2.2、go mod流程"></a>11.2.2、go mod流程</h3><p>同样是<code>mysite</code>项目，现在从<code>src</code>中剪切到其它任何位置，会编译报错。用go module来解决这个问题。</p><p>（1） 首先将你的版本更新到最新的Go版本(&gt;&#x3D;1.11)</p><p>（2）通过go命令行，进入到你当前的工程目录下，在命令行设置临时环境变量<code>go env -w GO111MODULE=off</code></p><p>（3）<code>go mod init</code>在当前目录下生成一个<code>go.mod</code>文件，执行这条命令时，当前目录不能存在<code>go.mod</code>文件（有删除）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> mod init xxx  <span class="hljs-comment">// xxx即声明的模块名</span><br></code></pre></td></tr></table></figure><p>该命令会在当前目录下生成<code>go.mod</code>文件，文件中声明了模块名称。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">module xxx<br><span class="hljs-keyword">go</span> <span class="hljs-number">1.16</span><br></code></pre></td></tr></table></figure><p>以后相关依赖可以声明在这里，就像python的<code>requirements</code>。</p><blockquote><p>此时运行程序，会将相关的依赖直接下载到<code>GOPATH/pkg/mod</code>路径下。</p></blockquote><p>（4）执行<code>go mod tidy</code>命令，它会添加缺失的模块以及移除不需要的模块</p><p>执行后会生成<code>go.sum</code>文件(模块下载条目)。添加参数<code>-v</code>，例如<code>go mod tidy -v</code>可以将执行的信息，即删除和添加的包打印到命令行；</p><p>将拉取的依赖存放到<code>GOPATH/pkg/mod</code>路径下。</p><p>（5）执行命令<code>go mod verify</code>来检查当前模块的依赖是否全部下载下来，是否下载下来被修改过。如果所有的模块都没有被修改过，那么执行这条命令之后，会打印<code>all modules verified</code>。</p><p>（6）执行命令<code>go mod vendor</code>生成vendor文件夹，用来区分某些库的不同版本。该文件夹下将会放置你<code>go.mod</code>文件描述的依赖包，文件夹下同时还有一个文件<code>modules.txt</code>，它是你整个工程的所有模块。在执行这条命令之前，如果你工程之前有vendor目录，应该先进行删除。同理<code>go mod vendor -v</code>会将添加到vendor中的模块打印出来；</p><p><img src="/pages_images/Go/image-20220917233933903-3429178.png" alt="image-20220917233933903"></p><p><img src="/pages_images/Go/image-20220918001221237-3431142.png" alt="image-20220918001221237"></p><blockquote><p>内部包调用从初始化模块名<code>go.mod</code>所在的目录开始查找，所以导入<code>api</code>包：<code>import &quot;xxx/api&quot;</code></p></blockquote><h2 id="11-3、章节作业"><a href="#11-3、章节作业" class="headerlink" title="11.3、章节作业"></a>11.3、章节作业</h2><p>将客户关系管理系统改为包管理版本</p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-09-17%2021.46.02.png" alt="截屏2022-09-17 21.46.02"></p><h3 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h3><p>目录结构：</p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-09-17%2018.07.45.png" alt="截屏2022-09-17 18.07.45"></p><p><code>model</code>包的<code>customer.go</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">package model<br><br><span class="hljs-built_in">type</span> Customer struct &#123;<br>Cid    <span class="hljs-built_in">int</span><br>Name   string<br>Gender string<br>Age    int8<br>Email  string<br>&#125;<br><br>func NewCustomer(cid <span class="hljs-built_in">int</span>, name string, gender string, age int8, email string) Customer &#123;<br><br><span class="hljs-keyword">return</span> Customer&#123;<br>Cid:    cid,<br>Name:   name,<br>Gender: gender,<br>Age:    age,<br>Email:  email,<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>service</code>包的<code>costumerService.go</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> service<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;customerSys/model&quot;</span><br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> CustomerService <span class="hljs-keyword">struct</span> &#123;<br>customers   []model.Customer<br>customersId <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewCustomerService</span><span class="hljs-params">(customers []model.Customer, customersId <span class="hljs-type">int</span>)</span></span> CustomerService &#123;<br><span class="hljs-keyword">return</span> CustomerService&#123;customers, customersId&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> findById(id <span class="hljs-type">int</span>) <span class="hljs-type">int</span> &#123;<br>index := <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(cs.customers); i++ &#123;<br><br><span class="hljs-keyword">if</span> cs.customers[i].Cid == id &#123;<br>index = i<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> index<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> nextChoice() (b <span class="hljs-type">bool</span>) &#123;<br><span class="hljs-comment">// 引导用户选择继续还是返回</span><br>fmt.Print(<span class="hljs-string">&quot;返回上一层【回车】,继续该操作【C/c】,退出【Q/q】:&quot;</span>)<br><span class="hljs-keyword">var</span> backChoice <span class="hljs-type">string</span><br>fmt.Scanln(&amp;backChoice)<br><span class="hljs-keyword">if</span> strings.ToUpper(backChoice) == <span class="hljs-string">&quot;C&quot;</span> &#123;<br>b = <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> strings.ToUpper(backChoice) == <span class="hljs-string">&quot;Q&quot;</span> &#123;<br>os.Exit(<span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> AddCustomer() &#123;<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br><span class="hljs-comment">// 引导用户输入学号和姓名</span><br>fmt.Printf(<span class="hljs-string">&quot;\033[1;35;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------添加客户开始-----------------------------&quot;</span>)<br><span class="hljs-comment">// 引导用户输入</span><br><span class="hljs-keyword">var</span> name <span class="hljs-type">string</span><br>fmt.Print(<span class="hljs-string">&quot;请输入客户姓名：&quot;</span>)<br>fmt.Scan(&amp;name)<br><br><span class="hljs-keyword">var</span> gender <span class="hljs-type">string</span><br>fmt.Print(<span class="hljs-string">&quot;请输入客户性别：&quot;</span>)<br>fmt.Scan(&amp;gender)<br><br><span class="hljs-keyword">var</span> age <span class="hljs-type">int8</span><br>fmt.Print(<span class="hljs-string">&quot;请输入客户年龄：&quot;</span>)<br>fmt.Scan(&amp;age)<br><br><span class="hljs-keyword">var</span> email <span class="hljs-type">string</span><br>fmt.Print(<span class="hljs-string">&quot;请输入客户邮箱：&quot;</span>)<br>fmt.Scan(&amp;email)<br><br><span class="hljs-comment">// 创建客户的map对象</span><br>cs.customersId++ <span class="hljs-comment">// 客户编号不需要输入，系统自增即可</span><br>newCustomer := model.NewCustomer(cs.customersId, name, gender, age, email)<br><span class="hljs-comment">// 添加客户map对象添加到客户切片中</span><br>cs.customers = <span class="hljs-built_in">append</span>(cs.customers, newCustomer)<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;35;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------添加客户完成-----------------------------&quot;</span>)<br>goOn := cs.nextChoice()<br><span class="hljs-keyword">if</span> !goOn &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> ListCustomer() &#123;<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;32;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;----------------------------------客户列表开始----------------------------&quot;</span>)<br><span class="hljs-keyword">for</span> _, customer := <span class="hljs-keyword">range</span> cs.customers &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\u001B[1;39;45m编号：%-8d 姓名：%-8s 性别：%-8s 年龄：%-8d 邮箱：%-10s \u001B[0m\n&quot;</span>,<br>customer.Cid, customer.Name, customer.Gender, customer.Age, customer.Email)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;32;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;----------------------------------客户列表完成----------------------------&quot;</span>)<br>goOn := cs.nextChoice()<br><span class="hljs-keyword">if</span> !goOn &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> UpdateCustomer() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;36;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------客户修改开始----------------------------&quot;</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br><span class="hljs-keyword">var</span> updateCid <span class="hljs-type">int</span><br>fmt.Print(<span class="hljs-string">&quot;请输入更新客户编号(-1退出)：&quot;</span>)<br>fmt.Scan(&amp;updateCid)<br><span class="hljs-keyword">if</span> updateCid == <span class="hljs-number">-1</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>updateIndex := cs.findById(updateCid)<br><span class="hljs-keyword">if</span> updateIndex == <span class="hljs-number">-1</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;删除失败，输入的编号ID不存在&quot;</span>)<br><span class="hljs-keyword">continue</span><br>&#125;<br><br><span class="hljs-comment">// 引导用户输入</span><br><span class="hljs-keyword">var</span> name <span class="hljs-type">string</span><br>fmt.Printf(<span class="hljs-string">&quot;请输入客户姓名(%s)：&quot;</span>, cs.customers[updateIndex].Name)<br>fmt.Scanln(&amp;name)<br><br><span class="hljs-keyword">var</span> gender <span class="hljs-type">string</span><br>fmt.Printf(<span class="hljs-string">&quot;请输入客户性别(%s)：&quot;</span>, cs.customers[updateIndex].Gender)<br>fmt.Scanln(&amp;gender)<br><br><span class="hljs-keyword">var</span> age <span class="hljs-type">int8</span><br>fmt.Printf(<span class="hljs-string">&quot;请输入客户年龄(%d)：&quot;</span>, cs.customers[updateIndex].Age)<br>fmt.Scanln(&amp;age)<br><br><span class="hljs-keyword">var</span> email <span class="hljs-type">string</span><br>fmt.Printf(<span class="hljs-string">&quot;请输入客户邮箱(%s)：&quot;</span>, cs.customers[updateIndex].Email)<br>fmt.Scanln(&amp;email)<br><br><span class="hljs-keyword">if</span> age != <span class="hljs-number">0</span> &#123;<br>cs.customers[updateIndex].Age = age<br>&#125;<br><span class="hljs-keyword">if</span> name != <span class="hljs-string">&quot;&quot;</span> &#123;<br>cs.customers[updateIndex].Name = name<br>&#125;<br><span class="hljs-keyword">if</span> gender != <span class="hljs-string">&quot;&quot;</span> &#123;<br>cs.customers[updateIndex].Gender = gender<br>&#125;<br><span class="hljs-keyword">if</span> email != <span class="hljs-string">&quot;&quot;</span> &#123;<br>cs.customers[updateIndex].Email = email<br>&#125;<br><br>fmt.Printf(<span class="hljs-string">&quot;\033[1;36;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------客户修改完成----------------------------&quot;</span>)<br>goOn := cs.nextChoice()<br><span class="hljs-keyword">if</span> !goOn &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> DeleteCustomer() &#123;<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;31;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------删除客户开始----------------------------&quot;</span>)<br><span class="hljs-keyword">var</span> delCid <span class="hljs-type">int</span><br>fmt.Print(<span class="hljs-string">&quot;请输入删除客户编号：&quot;</span>)<br>fmt.Scan(&amp;delCid)<br><br>delIndex := cs.findById(delCid)<br><span class="hljs-keyword">if</span> delIndex == <span class="hljs-number">-1</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;删除失败，输入的编号ID不存在&quot;</span>)<br><span class="hljs-keyword">continue</span><br>&#125;<br>cs.customers = <span class="hljs-built_in">append</span>(cs.customers[:delIndex], cs.customers[delIndex+<span class="hljs-number">1</span>:]...)<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;31;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------删除客户完成----------------------&quot;</span>)<br>goOn := cs.nextChoice()<br><span class="hljs-keyword">if</span> !goOn &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> KeepCustomers() &#123;<br><br>customersJsonBytes, _ := json.Marshal(cs.customers)<br>err := ioutil.WriteFile(<span class="hljs-string">&quot;db/customers.json&quot;</span>, customersJsonBytes, <span class="hljs-number">0666</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br>fmt.Printf(<span class="hljs-string">&quot;\033[1;31;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------保存完成----------------------&quot;</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>main</code>包<code>main.go</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;customerSys/model&quot;</span><br><span class="hljs-string">&quot;customerSys/service&quot;</span><br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> customers []model.Customer<br>customersJsonBytes, err := ioutil.ReadFile(<span class="hljs-string">&quot;db/customers.json&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;err:&quot;</span>, err)<br>&#125;<br>json.Unmarshal(customersJsonBytes, &amp;customers)<br>cs := service.NewCustomerService(customers, customers[<span class="hljs-built_in">len</span>(customers)<span class="hljs-number">-1</span>].Cid)<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;30;42m%s\033[0m\n&quot;</span>, <span class="hljs-string">`</span><br><span class="hljs-string">----------------客户信息管理系统--------------</span><br><span class="hljs-string">   1、添加客户</span><br><span class="hljs-string">   2、查看客户</span><br><span class="hljs-string">   3、更新客户</span><br><span class="hljs-string">   4、删除客户</span><br><span class="hljs-string">           5、保存</span><br><span class="hljs-string">   6、退出</span><br><span class="hljs-string">-------------------------------------------</span><br><span class="hljs-string">`</span>)<br><br><span class="hljs-keyword">var</span> choice <span class="hljs-type">int</span><br>fmt.Printf(<span class="hljs-string">&quot;\033[1;38;40m%s\033[0m&quot;</span>, <span class="hljs-string">&quot;请输入选择【1-5】:&quot;</span>)<br>stdin := bufio.NewReader(os.Stdin)<br>fmt.Fscan(stdin, &amp;choice)<br><br><span class="hljs-keyword">switch</span> choice &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>cs.AddCustomer()<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>cs.ListCustomer()<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>cs.UpdateCustomer()<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>cs.DeleteCustomer()<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>cs.KeepCustomers()<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>os.Exit(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;按要求输入数字，请重新输入&quot;</span>)<br>&#125;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="版本2：前后端分离版本"><a href="#版本2：前后端分离版本" class="headerlink" title="版本2：前后端分离版本"></a>版本2：前后端分离版本</h3><p>目录结构：</p><p><img src="/pages_images/Go/%E6%88%AA%E5%B1%8F2022-09-17%2021.38.00.png" alt="截屏2022-09-17 21.38.00"></p><p><code>model</code>包的<code>customer.go</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> model<br><br><span class="hljs-keyword">type</span> Customer <span class="hljs-keyword">struct</span> &#123;<br>Cid    <span class="hljs-type">int</span><br>Name   <span class="hljs-type">string</span><br>Gender <span class="hljs-type">string</span><br>Age    <span class="hljs-type">int8</span><br>Email  <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewCustomer</span><span class="hljs-params">(cid <span class="hljs-type">int</span>, name <span class="hljs-type">string</span>, gender <span class="hljs-type">string</span>, age <span class="hljs-type">int8</span>, email <span class="hljs-type">string</span>)</span></span> Customer &#123;<br><br><span class="hljs-keyword">return</span> Customer&#123;<br>Cid:    cid,<br>Name:   name,<br>Gender: gender,<br>Age:    age,<br>Email:  email,<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>service</code>包的<code>costumerService.go</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> service<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;customerSys2/model&quot;</span><br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> CustomerService <span class="hljs-keyword">struct</span> &#123;<br>customers   []model.Customer<br>customersId <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewCustomerService</span><span class="hljs-params">()</span></span> CustomerService &#123;<br><span class="hljs-keyword">var</span> customers []model.Customer<br>customersJsonBytes, err := ioutil.ReadFile(<span class="hljs-string">&quot;db/customers.json&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;err:&quot;</span>, err)<br>&#125;<br>json.Unmarshal(customersJsonBytes, &amp;customers)<br><br><span class="hljs-keyword">return</span> CustomerService&#123;customers, <span class="hljs-built_in">len</span>(customers) + <span class="hljs-number">1</span>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> FindById(id <span class="hljs-type">int</span>) <span class="hljs-type">int</span> &#123;<br>index := <span class="hljs-number">-1</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(cs.customers); i++ &#123;<br><br><span class="hljs-keyword">if</span> cs.customers[i].Cid == id &#123;<br>index = i<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> index<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> FindCustomer(id <span class="hljs-type">int</span>) *model.Customer &#123;<br><span class="hljs-keyword">return</span> &amp;cs.customers[cs.FindById(id)]<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> AddCustomer(name <span class="hljs-type">string</span>, gender <span class="hljs-type">string</span>, age <span class="hljs-type">int8</span>, email <span class="hljs-type">string</span>) &#123;<br><span class="hljs-comment">// 创建客户的map对象</span><br>cs.customersId++ <span class="hljs-comment">// 客户编号不需要输入，系统自增即可</span><br>newCustomer := model.NewCustomer(cs.customersId, name, gender, age, email)<br><span class="hljs-comment">// 添加客户map对象添加到客户切片中</span><br>cs.customers = <span class="hljs-built_in">append</span>(cs.customers, newCustomer)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> ListCustomer() []model.Customer &#123;<br><span class="hljs-keyword">return</span> cs.customers<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> UpdateCustomer(updateCustomer *model.Customer, name <span class="hljs-type">string</span>, age <span class="hljs-type">int8</span>, gender <span class="hljs-type">string</span>, email <span class="hljs-type">string</span>) <span class="hljs-type">bool</span> &#123;<br><br><span class="hljs-keyword">if</span> age != <span class="hljs-number">0</span> &#123;<br>updateCustomer.Age = age<br>&#125;<br><span class="hljs-keyword">if</span> name != <span class="hljs-string">&quot;&quot;</span> &#123;<br>updateCustomer.Name = name<br>&#125;<br><span class="hljs-keyword">if</span> gender != <span class="hljs-string">&quot;&quot;</span> &#123;<br>updateCustomer.Gender = gender<br>&#125;<br><span class="hljs-keyword">if</span> email != <span class="hljs-string">&quot;&quot;</span> &#123;<br>updateCustomer.Email = email<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> DeleteCustomer(delIndex <span class="hljs-type">int</span>) &#123;<br>cs.customers = <span class="hljs-built_in">append</span>(cs.customers[:delIndex], cs.customers[delIndex+<span class="hljs-number">1</span>:]...)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cs *CustomerService)</span></span> KeepCustomers() &#123;<br><br>customersJsonBytes, _ := json.Marshal(cs.customers)<br>err := ioutil.WriteFile(<span class="hljs-string">&quot;db/customers.json&quot;</span>, customersJsonBytes, <span class="hljs-number">0666</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>view</code>包的<code>costumerView.go</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> view<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;customerSys2/service&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> CustomerView <span class="hljs-keyword">struct</span> &#123;<br>Choice <span class="hljs-type">int</span> <span class="hljs-comment">//接收⽤户输⼊...</span><br>CS     service.CustomerService<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cv *CustomerView)</span></span> nextChoice() (b <span class="hljs-type">bool</span>) &#123;<br><span class="hljs-comment">// 引导用户选择继续还是返回</span><br>fmt.Print(<span class="hljs-string">&quot;返回上一层【回车】,继续该操作【C/c】,退出【Q/q】:&quot;</span>)<br><span class="hljs-keyword">var</span> backChoice <span class="hljs-type">string</span><br>fmt.Scanln(&amp;backChoice)<br><span class="hljs-keyword">if</span> strings.ToUpper(backChoice) == <span class="hljs-string">&quot;C&quot;</span> &#123;<br>b = <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> strings.ToUpper(backChoice) == <span class="hljs-string">&quot;Q&quot;</span> &#123;<br>os.Exit(<span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cv *CustomerView)</span></span> AddView() &#123;<br><br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br><span class="hljs-comment">// 引导用户输入学号和姓名</span><br>fmt.Printf(<span class="hljs-string">&quot;\033[1;35;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------添加客户开始-----------------------------&quot;</span>)<br><span class="hljs-comment">// 引导用户输入</span><br><span class="hljs-keyword">var</span> name <span class="hljs-type">string</span><br>fmt.Print(<span class="hljs-string">&quot;请输入客户姓名：&quot;</span>)<br>fmt.Scan(&amp;name)<br><br><span class="hljs-keyword">var</span> gender <span class="hljs-type">string</span><br>fmt.Print(<span class="hljs-string">&quot;请输入客户性别：&quot;</span>)<br>fmt.Scan(&amp;gender)<br><br><span class="hljs-keyword">var</span> age <span class="hljs-type">int8</span><br>fmt.Print(<span class="hljs-string">&quot;请输入客户年龄：&quot;</span>)<br>fmt.Scan(&amp;age)<br><br><span class="hljs-keyword">var</span> email <span class="hljs-type">string</span><br>fmt.Print(<span class="hljs-string">&quot;请输入客户邮箱：&quot;</span>)<br>fmt.Scan(&amp;email)<br><br><span class="hljs-comment">// 后端接口调用，实现添加学生的逻辑</span><br>cv.CS.AddCustomer(name, gender, age, email)<br><br>goOn := cv.nextChoice()<br><span class="hljs-keyword">if</span> !goOn &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cv *CustomerView)</span></span> ListView() &#123;<br><br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;32;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;----------------------------------客户列表开始----------------------------&quot;</span>)<br><span class="hljs-keyword">for</span> _, customer := <span class="hljs-keyword">range</span> cv.CS.ListCustomer() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\u001B[1;39;45m编号：%-8d 姓名：%-8s 性别：%-8s 年龄：%-8d 邮箱：%-10s \u001B[0m\n&quot;</span>,<br>customer.Cid, customer.Name, customer.Gender, customer.Age, customer.Email)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;32;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;----------------------------------客户列表完成----------------------------&quot;</span>)<br>goOn := cv.nextChoice()<br><span class="hljs-keyword">if</span> !goOn &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cv *CustomerView)</span></span> UpdateView() &#123;<br><br>fmt.Printf(<span class="hljs-string">&quot;\033[1;36;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------客户修改开始----------------------------&quot;</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br><span class="hljs-keyword">var</span> updateCid <span class="hljs-type">int</span><br>fmt.Print(<span class="hljs-string">&quot;请输入更新客户编号(-1退出)：&quot;</span>)<br>fmt.Scan(&amp;updateCid)<br><span class="hljs-keyword">if</span> updateCid == <span class="hljs-number">-1</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>updateIndex := cv.CS.FindById(updateCid)<br><span class="hljs-keyword">if</span> updateIndex == <span class="hljs-number">-1</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;删除失败，输入的编号ID不存在&quot;</span>)<br><span class="hljs-keyword">continue</span><br>&#125;<br><br>updateCustomer := cv.CS.FindCustomer(updateCid)<br><br><span class="hljs-comment">// 引导用户输入</span><br><span class="hljs-keyword">var</span> name <span class="hljs-type">string</span><br>fmt.Printf(<span class="hljs-string">&quot;请输入客户姓名(%s)：&quot;</span>, updateCustomer.Name)<br>fmt.Scanln(&amp;name)<br><br><span class="hljs-keyword">var</span> gender <span class="hljs-type">string</span><br>fmt.Printf(<span class="hljs-string">&quot;请输入客户性别(%s)：&quot;</span>, updateCustomer.Gender)<br>fmt.Scanln(&amp;gender)<br><br><span class="hljs-keyword">var</span> age <span class="hljs-type">int8</span><br>fmt.Printf(<span class="hljs-string">&quot;请输入客户年龄(%d)：&quot;</span>, updateCustomer.Age)<br>fmt.Scanln(&amp;age)<br><br><span class="hljs-keyword">var</span> email <span class="hljs-type">string</span><br>fmt.Printf(<span class="hljs-string">&quot;请输入客户邮箱(%s)：&quot;</span>, updateCustomer.Email)<br>fmt.Scanln(&amp;email)<br><br><span class="hljs-comment">// 后端接口调用</span><br>cv.CS.UpdateCustomer(updateCustomer, name, age, gender, email)<br><br>fmt.Printf(<span class="hljs-string">&quot;\033[1;36;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------客户修改完成----------------------------&quot;</span>)<br>goOn := cv.nextChoice()<br><span class="hljs-keyword">if</span> !goOn &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cv *CustomerView)</span></span> DeleteView() &#123;<br><br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;31;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------删除客户开始----------------------------&quot;</span>)<br><span class="hljs-keyword">var</span> delCid <span class="hljs-type">int</span><br>fmt.Print(<span class="hljs-string">&quot;请输入删除客户编号：&quot;</span>)<br>fmt.Scan(&amp;delCid)<br><br>delIndex := cv.CS.FindById(delCid)<br><span class="hljs-keyword">if</span> delIndex == <span class="hljs-number">-1</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;删除失败，输入的编号ID不存在&quot;</span>)<br><span class="hljs-keyword">continue</span><br>&#125;<br>cv.CS.DeleteCustomer(delIndex)<br><br>fmt.Printf(<span class="hljs-string">&quot;\033[1;31;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------删除客户完成----------------------&quot;</span>)<br>goOn := cv.nextChoice()<br><span class="hljs-keyword">if</span> !goOn &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cv *CustomerView)</span></span> KeepView() &#123;<br>cv.CS.KeepCustomers()<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;31;40m%s\033[0m\n&quot;</span>, <span class="hljs-string">&quot;---------------------------保存完成----------------------&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cv *CustomerView)</span></span> MainView() &#123;<br><br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;\033[1;30;42m%s\033[0m\n&quot;</span>, <span class="hljs-string">`</span><br><span class="hljs-string">----------------客户信息管理系统--------------</span><br><span class="hljs-string">   1、添加客户</span><br><span class="hljs-string">   2、查看客户</span><br><span class="hljs-string">   3、更新客户</span><br><span class="hljs-string">   4、删除客户</span><br><span class="hljs-string">           5、保存</span><br><span class="hljs-string">   6、退出</span><br><span class="hljs-string">-------------------------------------------</span><br><span class="hljs-string">`</span>)<br><br>fmt.Printf(<span class="hljs-string">&quot;\033[1;38;40m%s\033[0m&quot;</span>, <span class="hljs-string">&quot;请输入选择【1-5】:&quot;</span>)<br>stdin := bufio.NewReader(os.Stdin)<br>fmt.Fscan(stdin, &amp;cv.Choice)<br><br><span class="hljs-keyword">switch</span> cv.Choice &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>cv.AddView()<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>cv.ListView()<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>cv.UpdateView()<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>cv.DeleteView()<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>cv.KeepView()<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>os.Exit(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;按要求输入数字，请重新输入&quot;</span>)<br>&#125;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>main</code>包<code>main.go</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;customerSys2/view&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;customerSys2/service&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>cv := view.CustomerView&#123;<br>Choice: <span class="hljs-number">0</span>,<br>CS:     service.NewCustomerService(),<br>&#125;<br>cv.MainView()<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="十三、网络编程"><a href="#十三、网络编程" class="headerlink" title="十三、网络编程"></a>十三、网络编程</h1><p>网络编程：使用编程语言实现多台计算机的通信。</p><h2 id="13-1、网络三要素"><a href="#13-1、网络三要素" class="headerlink" title="13.1、网络三要素"></a>13.1、网络三要素</h2><p>网络编程三要素：</p><blockquote><p>　　　　（1）IP地址：网络中每一台计算机的唯一标识，通过IP地址找到指定的计算机。</p><p>　　　　（2）端口：用于标识进程的逻辑地址，通过端口找到指定进程。</p><p>　　　　（3）协议：定义通信规则，符合协议则可以通信，不符合不能通信。一般有TCP协议和UDP协议。</p></blockquote><h4 id="（1）IP地址"><a href="#（1）IP地址" class="headerlink" title="（1）IP地址"></a>（1）IP地址</h4><p>计算机分布在世界各地，要想和它们通信，必须要知道确切的位置。确定计算机位置的方式有多种，IP 地址是最常用的，例如，114.114.114.114 是国内第一个、全球第三个开放的 DNS 服务地址，127.0.0.1 是本机地址。</p><p>其实，我们的计算机并不知道 IP 地址对应的地理位置，当要通信时，只是将 IP 地址封装到要发送的数据包中，交给路由器去处理。路由器有非常智能和高效的算法，很快就会找到目标计算机，并将数据包传递给它，完成一次单向通信。</p><p>目前大部分软件使用 IPv4 地址，但 IPv6 也正在被人们接受，尤其是在教育网中，已经大量使用。</p><h4 id="（2）端口"><a href="#（2）端口" class="headerlink" title="（2）端口"></a>（2）端口</h4><p>有了 IP 地址，虽然可以找到目标计算机，但仍然不能进行通信。一台计算机可以同时提供多种网络服务，例如Web服务、FTP服务（文件传输服务）、SMTP服务（邮箱服务）等，仅有 IP 地址，计算机虽然可以正确接收到数据包，但是却不知道要将数据包交给哪个网络程序来处理，所以通信失败。</p><p>为了区分不同的网络程序，计算机会为每个网络程序分配一个独一无二的端口号（Port Number），例如，Web服务的端口号是 80，FTP 服务的端口号是 21，SMTP 服务的端口号是 25。</p><p>端口（Port）是一个虚拟的、逻辑上的概念。可以将端口理解为一道门，数据通过这道门流入流出，每道门有不同的编号，就是端口号。如下图所示：</p><p><img src="/pages_images/Go/1-1510101TT1523.jpg" alt="img"></p><h4 id="（3）协议"><a href="#（3）协议" class="headerlink" title="（3）协议"></a>（3）协议</h4><p>协议（Protocol）就是网络通信的约定，通信的双方必须都遵守才能正常收发数据。协议有很多种，例如 TCP、UDP、IP 等，通信的双方必须使用同一协议才能通信。协议是一种规范，由计算机组织制定，规定了很多细节，例如，如何建立连接，如何相互识别等。</p><blockquote><p>协议仅仅是一种规范，必须由计算机软件来实现。例如 IP 协议规定了如何找到目标计算机，那么各个开发商在开发自己的软件时就必须遵守该协议，不能另起炉灶。</p></blockquote><p>所谓协议族（Protocol Family），就是一组协议（多个协议）的统称。最常用的是 TCP&#x2F;IP 协议族，它包含了 TCP、IP、UDP、Telnet、FTP、SMTP 等上百个互为关联的协议，由于 TCP、IP 是两种常用的底层协议，所以把它们统称为 TCP&#x2F;IP 协议族。</p><h4 id="（4）数据传输方式"><a href="#（4）数据传输方式" class="headerlink" title="（4）数据传输方式"></a>（4）数据传输方式</h4><p>计算机之间有很多数据传输方式，各有优缺点，常用的有两种：SOCK_STREAM 和 SOCK_DGRAM。</p><ol><li><p>SOCK_STREAM 表示面向连接的数据传输方式。数据可以准确无误地到达另一台计算机，如果损坏或丢失，可以重新发送，但效率相对较慢。常见的 http 协议就使用 SOCK_STREAM 传输数据，因为要确保数据的正确性，否则网页不能正常解析。</p></li><li><p>SOCK_DGRAM 表示无连接的数据传输方式。计算机只管传输数据，不作数据校验，如果数据在传输中损坏，或者没有到达另一台计算机，是没有办法补救的。也就是说，数据错了就错了，无法重传。因为 SOCK_DGRAM 所做的校验工作少，所以效率比 SOCK_STREAM 高。</p></li></ol><p>QQ 视频聊天和语音聊天就使用 SOCK_DGRAM 传输数据，因为首先要保证通信的效率，尽量减小延迟，而数据的正确性是次要的，即使丢失很小的一部分数据，视频和音频也可以正常解析，最多出现噪点或杂音，不会对通信质量有实质的影响。</p><blockquote><p>注意：SOCK_DGRAM 没有想象中的糟糕，不会频繁的丢失数据，数据错误只是小概率事件。</p></blockquote><p>有可能多种协议使用同一种数据传输方式，所以在 socket 编程中，需要同时指明数据传输方式和协议。</p><p>综上所述：IP地址和端口能够在广袤的互联网中定位到要通信的程序，协议和数据传输方式规定了如何传输数据，有了这些，两台计算机就可以通信了。</p><h2 id="13-2、TCP协议"><a href="#13-2、TCP协议" class="headerlink" title="13.2、TCP协议"></a>13.2、TCP协议</h2><h4 id="（1）OSI模型"><a href="#（1）OSI模型" class="headerlink" title="（1）OSI模型"></a>（1）OSI模型</h4><p>如果你读过计算机专业，或者学习过网络通信，那你一定听说过 OSI 模型，它曾无数次让你头大。OSI 是 Open System Interconnection 的缩写，译为“开放式系统互联”。<br>OSI 模型把网络通信的工作分为 7 层，从下到上分别是物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。</p><p>这个网络模型究竟是干什么呢？简而言之就是进行数据封装的。</p><p>当另一台计算机接收到数据包时，会从网络接口层再一层一层往上传输，每传输一层就拆开一层包装，直到最后的应用层，就得到了最原始的数据，这才是程序要使用的数据。</p><p><img src="/pages_images/Go/wx1.sinaimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg" alt="img"></p><h4 id="（2）TCP报文格式"><a href="#（2）TCP报文格式" class="headerlink" title="（2）TCP报文格式"></a>（2）TCP报文格式</h4><p>TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的通信协议，数据在传输前要建立连接，传输完毕后还要断开连接。</p><p>客户端在收发数据前要使用 connect() 函数和服务器建立连接。建立连接的目的是保证IP地址、端口、物理链路等正确无误，为数据的传输开辟通道。</p><p>TCP建立连接时要传输三个数据包，俗称三次握手（Three-way Handshaking）。可以形象的比喻为下面的对话：</p><blockquote><ul><li>[Shake 1] 套接字A：“你好，套接字B，我这里有数据要传送给你，建立连接吧。”</li><li>[Shake 2] 套接字B：“好的，我这边已准备就绪。”</li><li>[Shake 3] 套接字A：“谢谢你受理我的请求。”</li></ul></blockquote><p><img src="/pages_images/Go/1-151020115S23R.jpg" alt="img"></p><blockquote><ol><li><p>序号：Seq（Sequence Number）序号占32位，用来标识从计算机A发送到计算机B的数据包的序号，计算机发送数据时对此进行标记。</p></li><li><p>确认号：Ack（Acknowledge Number）确认号占32位，客户端和服务器端都可以发送，Ack &#x3D; Seq + 1。</p></li><li><p>标志位：每个标志位占用1Bit，共有6个，分别为 URG、ACK、PSH、RST、SYN、FIN，具体含义如下：</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// URG：紧急指针（urgent pointer）有效。</span><br><span class="hljs-comment">// ACK：确认序号有效。</span><br><span class="hljs-comment">// PSH：接收方应该尽快将这个报文交给应用层。</span><br><span class="hljs-comment">// RST：重置连接。</span><br><span class="hljs-comment">// SYN：建立一个新连接。</span><br><span class="hljs-comment">// FIN：断开一个连接。</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="（3）TCP-IP三次握手"><a href="#（3）TCP-IP三次握手" class="headerlink" title="（3）TCP&#x2F;IP三次握手"></a>（3）TCP&#x2F;IP三次握手</h4><p>使用 connect() 建立连接时，客户端和服务器端会相互发送三个数据包，请看下图：</p><p><img src="/pages_images/Go/1-151020132J32G.jpg" alt="img"></p><p>客户端调用 socket() 创建套接字后，因为没有建立连接，所以套接字处于<code>CLOSED</code>状态；服务器端调用 listen() 函数后，套接字进入<code>LISTEN</code>状态，开始监听客户端请求。这个时候，客户端开始发起请求：</p><blockquote><ol><li><p>当客户端调用 connect() 函数后，TCP协议会组建一个数据包，并设置 SYN 标志位，表示该数据包是用来建立同步连接的。同时生成一个随机数字 1000，填充“序号（Seq）”字段，表示该数据包的序号。完成这些工作，开始向服务器端发送数据包，客户端就进入了<code>SYN-SEND</code>状态。  </p></li><li><p>服务器端收到数据包，检测到已经设置了 SYN 标志位，就知道这是客户端发来的建立连接的“请求包”。服务器端也会组建一个数据包，并设置 SYN 和 ACK 标志位，SYN 表示该数据包用来建立连接，ACK 用来确认收到了刚才客户端发送的数据包。 服务器生成一个随机数 2000，填充“序号（Seq）”字段。2000 和客户端数据包没有关系。服务器将客户端数据包序号（1000）加1，得到1001，并用这个数字填充“确认号（Ack）”字段。服务器将数据包发出，进入<code>SYN-RECV</code>状态。  </p></li><li><p>客户端收到数据包，检测到已经设置了 SYN 和 ACK 标志位，就知道这是服务器发来的“确认包”。客户端会检测“确认号（Ack）”字段，看它的值是否为 1000+1，如果是就说明连接建立成功。接下来，客户端会继续组建数据包，并设置 ACK 标志位，表示客户端正确接收了服务器发来的“确认包”。同时，将刚才服务器发来的数据包序号（2000）加1，得到 2001，并用这个数字来填充“确认（Ack）”字段。客户端将数据包发出，进入<code>ESTABLISED</code>状态，表示连接已经成功建立。  </p></li><li><p>服务器端收到数据包，检测到已经设置了 ACK 标志位，就知道这是客户端发来的“确认包”。服务器会检测“确认号（Ack）”字段，看它的值是否为 2000+1，如果是就说明连接建立成功，服务器进入<code>ESTABLISED</code>状态。至此，客户端和服务器都进入了<code>ESTABLISED</code>状态，连接建立成功，接下来就可以收发数据了。</p></li></ol><p>注意：三次握手的关键是要确认对方收到了自己的数据包，这个目标就是通过“确认号（Ack）”字段实现的。计算机会记录下自己发送的数据包序号 Seq，待收到对方的数据包后，检测“确认号（Ack）”字段，看<code>Ack = Seq + 1</code>是否成立，如果成立说明对方正确收到了自己的数据包</p></blockquote><h4 id="（4）TCP-IP四次挥手"><a href="#（4）TCP-IP四次挥手" class="headerlink" title="（4）TCP&#x2F;IP四次挥手"></a>（4）TCP&#x2F;IP四次挥手</h4><p>建立连接非常重要，它是数据正确传输的前提；断开连接同样重要，它让计算机释放不再使用的资源。如果连接不能正常断开，不仅会造成数据传输错误，还会导致套接字不能关闭，持续占用资源，如果并发量高，服务器压力堪忧。</p><p>建立连接需要三次握手，断开连接需要四次握手，可以形象的比喻为下面的对话：</p><blockquote><ul><li>[Shake 1] 套接字A：“任务处理完毕，我希望断开连接。”</li><li>[Shake 2] 套接字B：“哦，是吗？请稍等，我准备一下。”</li><li>等待片刻后……</li><li>[Shake 3] 套接字B：“我准备好了，可以断开连接了。”</li><li>[Shake 4] 套接字A：“好的，谢谢合作。”</li></ul></blockquote><p>下图演示了客户端主动断开连接的场景：</p><p><img src="/pages_images/Go/1-15102015224Wc.jpg" alt="img"></p><p>建立连接后，客户端和服务器都处于<code>ESTABLISED</code>状态。这时，客户端发起断开连接的请求：</p><blockquote><ol><li><p>客户端调用 close() 函数后，向服务器发送 FIN 数据包，进入<code>FIN_WAIT_1</code>状态。FIN 是 Finish 的缩写，表示完成任务需要断开连接。</p></li><li><p>服务器收到数据包后，检测到设置了 FIN 标志位，知道要断开连接，于是向客户端发送“确认包”，进入<code>CLOSE_WAIT</code>状态。注意：服务器收到请求后并不是立即断开连接，而是先向客户端发送“确认包”，告诉它我知道了，我需要准备一下才能断开连接。</p></li><li><p>客户端收到“确认包”后进入<code>FIN_WAIT_2</code>状态，等待服务器准备完毕后再次发送数据包。</p></li><li><p>等待片刻后，服务器准备完毕，可以断开连接，于是再主动向客户端发送 FIN 包，告诉它我准备好了，断开连接吧。然后进入<code>LAST_ACK</code>状态。</p></li><li><p>客户端收到服务器的 FIN 包后，再向服务器发送 ACK 包，告诉它你断开连接吧。然后进入<code>TIME_WAIT</code>状态。</p></li><li><p>服务器收到客户端的 ACK 包后，就断开连接，关闭套接字，进入<code>CLOSED</code>状态。</p></li></ol><p>​注意：关于 TIME_WAIT 状态的说明</p></blockquote><p>客户端最后一次发送 ACK包后进入 TIME_WAIT 状态，而不是直接进入 CLOSED 状态关闭连接，这是为什么呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">TCP 是面向连接的传输方式，必须保证数据能够正确到达目标机器，不能丢失或出错，而网络是不稳定的，随时可能会毁坏数据，所以机器A每次向机器B发送数据包后，都要求机器B”确认“，回传ACK包，告诉机器A我收到了，这样机器A才能知道数据传送成功了。</span><br><span class="hljs-comment">如果机器B没有回传ACK包，机器A会重新发送，直到机器B回传ACK包。</span><br><span class="hljs-comment">客户端最后一次向服务器回传ACK包时，有可能会因为网络问题导致服务器收不到，服务器会再次发送 FIN 包，如果这时客户端完全关闭了连接，那么服务器无论如何也收不到ACK包了，所以客户端需要等待片刻、确认对方收到ACK包后才能进入CLOSED状态。</span><br><span class="hljs-comment">那么，要等待多久呢？数据包在网络中是有生存时间的，超过这个时间还未到达目标主机就会被丢弃，并通知源主机。</span><br><span class="hljs-comment">这称为报文最大生存时间（MSL，Maximum Segment Lifetime）。</span><br><span class="hljs-comment">TIME_WAIT 要等待 2MSL 才会进入 CLOSED 状态。ACK 包到达服务器需要 MSL 时间，服务器重传 FIN 包也需要 MSL 时间，2MSL 是数据包往返的最大时间，如果 2MSL 后还未收到服务器重传的 FIN 包，就说明服务器已经收到了 ACK 包。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="13-3、socket介绍"><a href="#13-3、socket介绍" class="headerlink" title="13.3、socket介绍"></a>13.3、socket介绍</h2><h3 id="13-3-1、什么是-socket？"><a href="#13-3-1、什么是-socket？" class="headerlink" title="13.3.1、什么是 socket？"></a>13.3.1、什么是 socket？</h3><p>socket 的原意是“插座”，在计算机通信领域，socket 被翻译为“套接字”，它是计算机之间进行通信的一种约定或一种方式。通过 socket 这种约定，一台计算机可以接收其他计算机的数据，也可以向其他计算机发送数据。<br>我们把插头插到插座上就能从电网获得电力供应，同样，为了与远程计算机进行数据传输，需要连接到因特网，而 socket 就是用来连接到因特网的工具。</p><p><img src="/pages_images/Go/1-1Z1231A00X07.jpg" alt="socket是什么？"></p><p><img src="/pages_images/Go/socket1625716026714.png" alt="socket"></p><h3 id="13-3-2、socket缓冲区与阻塞"><a href="#13-3-2、socket缓冲区与阻塞" class="headerlink" title="13.3.2、socket缓冲区与阻塞"></a>13.3.2、socket缓冲区与阻塞</h3><h4 id="1、socket缓冲区"><a href="#1、socket缓冲区" class="headerlink" title="1、socket缓冲区"></a>1、socket缓冲区</h4><p>每个 socket 被创建后，都会分配两个缓冲区，输入缓冲区和输出缓冲区。write()&#x2F;send() 并不立即向网络中传输数据，而是先将数据写入缓冲区中，再由TCP协议将数据从缓冲区发送到目标机器。一旦将数据写入到缓冲区，函数就可以成功返回，不管它们有没有到达目标机器，也不管它们何时被发送到网络，这些都是TCP协议负责的事情。</p><p>TCP协议独立于 write()&#x2F;send() 函数，数据有可能刚被写入缓冲区就发送到网络，也可能在缓冲区中不断积压，多次写入的数据被一次性发送到网络，这取决于当时的网络情况、当前线程是否空闲等诸多因素，不由程序员控制。read()&#x2F;recv() 函数也是如此，也从输入缓冲区中读取数据，而不是直接从网络中读取。  </p><p><img src="/pages_images/Go/image-20210628165851154.png" alt="image-20210628165851154"></p><p>这些I&#x2F;O缓冲区特性可整理如下：</p><ul><li>I&#x2F;O缓冲区在每个TCP套接字中单独存在；</li><li>I&#x2F;O缓冲区在创建套接字时自动生成；</li><li>即使关闭套接字也会继续传送输出缓冲区中遗留的数据；</li><li>关闭套接字将丢失输入缓冲区中的数据。</li></ul><p>输入输出缓冲区的默认大小一般都是 8K！</p><h4 id="2、阻塞模式"><a href="#2、阻塞模式" class="headerlink" title="2、阻塞模式"></a>2、阻塞模式</h4><p> 对于TCP套接字（默认情况下），当使用send() 发送数据时：</p><blockquote><p>（1) 首先会检查缓冲区，如果缓冲区的可用空间长度小于要发送的数据，那么 send() 会被阻塞（暂停执行），直到缓冲区中的数据被发  送到目标机器，腾出足够的空间，才唤醒 send() 函数继续写入数据。</p><p>（2) 如果TCP协议正在向网络发送数据，那么输出缓冲区会被锁定，不允许写入，send() 也会被阻塞，直到数据发送完毕缓冲区解锁，send() 才会被唤醒。</p><p>（3) 如果要写入的数据大于缓冲区的最大长度，那么将分批写入。</p><p>（4) 直到所有数据被写入缓冲区 send() 才能返回。  </p></blockquote><p>当使用recv() 读取数据时：</p><blockquote><p>（1) 首先会检查缓冲区，如果缓冲区中有数据，那么就读取，否则函数会被阻塞，直到网络上有数据到来。</p><p>（2) 如果要读取的数据长度小于缓冲区中的数据长度，那么就不能一次性将缓冲区中的所有数据读出，剩余数据将不断积压，直到有 recv() 函数再次读取。</p><p>（3) 直到读取到数据后 recv() 函数才会返回，否则就一直被阻塞。</p></blockquote><p>TCP套接字默认情况下是阻塞模式，也是最常用的。当然你也可以更改为非阻塞模式，后续我们会讲解。</p><h3 id="13-3-3、TCP的粘包问题"><a href="#13-3-3、TCP的粘包问题" class="headerlink" title="13.3.3、TCP的粘包问题"></a>13.3.3、TCP的粘包问题</h3><p>上节我们讲到了socket缓冲区和数据的传递过程，可以看到数据的接收和发送是无关的，read()&#x2F;recv() 函数不管数据发送了多少次，都会尽可能多的接收数据。也就是说，read()&#x2F;recv() 和 write()&#x2F;send() 的执行次数可能不同。</p><p>例如，write()&#x2F;send() 重复执行三次，每次都发送字符串”abc”，那么目标机器上的 read()&#x2F;recv() 可能分三次接收，每次都接收”abc”；也可能分两次接收，第一次接收”abcab”，第二次接收”cabc”；也可能一次就接收到字符串”abcabcabc”。</p><p>这就是数据的“粘包”问题，客户端发送的多个数据包被当做一个数据包接收。也称数据的无边界性，read()&#x2F;recv() 函数不知道数据包的开始或结束标志（实际上也没有任何开始或结束标志），只把它们当做连续的数据流来处理。</p><h2 id="13-4、基于Go的socket代码实现"><a href="#13-4、基于Go的socket代码实现" class="headerlink" title="13.4、基于Go的socket代码实现"></a>13.4、基于Go的socket代码实现</h2><h4 id="13-4-1、-聊天案例"><a href="#13-4-1、-聊天案例" class="headerlink" title="13.4.1、 聊天案例"></a>13.4.1、 聊天案例</h4><p>服务端:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 1.创建TCP服务端监听</span><br>listenner, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;0.0.0.0:8888&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> listenner.Close()<br><span class="hljs-comment">// 2.服务端不断等待请求处理</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// 阻塞等待客户端连接</span><br>conn, err := listenner.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">go</span> ClientConn(conn)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 处理服务端逻辑</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ClientConn</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br><span class="hljs-keyword">defer</span> conn.Close()<br><span class="hljs-comment">// 获取客户端地址</span><br>ipAddr := conn.RemoteAddr().String()<br>fmt.Println(ipAddr, <span class="hljs-string">&quot;连接成功&quot;</span>)<br><span class="hljs-comment">// 缓冲区</span><br>buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1024</span>)<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// n是读取的长度</span><br><span class="hljs-comment">// time.Sleep(time.Second*10)  // 粘包</span><br>n, err := conn.Read(buf)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 切出有效数据</span><br>result := buf[:n]<br>fmt.Printf(<span class="hljs-string">&quot;接收到数据，来自[%s]    [%d]:%s\n&quot;</span>, ipAddr, n, <span class="hljs-type">string</span>(result))<br><span class="hljs-comment">// 接收到exit，退出连接</span><br><span class="hljs-keyword">if</span> <span class="hljs-type">string</span>(result) == <span class="hljs-string">&quot;exit&quot;</span> &#123;<br>fmt.Println(ipAddr, <span class="hljs-string">&quot;退出连接&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 回复客户端</span><br>conn.Write([]<span class="hljs-type">byte</span>(strings.ToUpper(<span class="hljs-type">string</span>(result))))<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>聊天案例客户端:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 1.连接服务端</span><br>conn, err := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8888&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><span class="hljs-comment">// 缓冲区</span><br><br><span class="hljs-keyword">for</span> &#123;<br>buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1024</span>)<br>fmt.Printf(<span class="hljs-string">&quot;请输入发送的内容：&quot;</span>)<br>fmt.Scan(&amp;buf)<br>fmt.Printf(<span class="hljs-string">&quot;发送的内容：%s\n&quot;</span>, <span class="hljs-type">string</span>(buf))<br><span class="hljs-comment">// 发送数据</span><br>conn.Write(buf)<br><span class="hljs-comment">//conn.Write(buf)   // 粘包</span><br><span class="hljs-comment">//conn.Write(buf)   // 粘包</span><br><span class="hljs-comment">// 接收服务端返回信息</span><br>res := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1024</span>)<br>n, err := conn.Read(res)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>result := res[:n]<br>fmt.Printf(<span class="hljs-string">&quot;接收到数据:%s\n&quot;</span>, <span class="hljs-type">string</span>(result))<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="13-4-2、-ssh案例"><a href="#13-4-2、-ssh案例" class="headerlink" title="13.4.2、 ssh案例"></a>13.4.2、 ssh案例</h4><p>服务端:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/axgle/mahonia&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;os/exec&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 1.创建TCP服务端监听</span><br>listenner, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;0.0.0.0:8888&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> listenner.Close()<br><br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br><span class="hljs-comment">// 阻塞等待客户端连接</span><br>conn, err := listenner.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">go</span> ClientConn(conn)<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">// 处理服务端逻辑</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ClientConn</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br><span class="hljs-keyword">defer</span> conn.Close()<br><span class="hljs-comment">// 获取客户端地址</span><br>ipAddr := conn.RemoteAddr().String()<br>fmt.Println(ipAddr, <span class="hljs-string">&quot;连接成功&quot;</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br><span class="hljs-comment">// 缓冲区</span><br>data := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1024</span>)<br><span class="hljs-comment">// n是读取的长度</span><br>n, err := conn.Read(data)<br>fmt.Println(<span class="hljs-string">&quot;命令字节数&quot;</span>,n)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 切出有效数据</span><br>data = data[:n]<br>fmt.Printf(<span class="hljs-string">&quot;接收到命令，来自[%s]    [%d]:%s\n&quot;</span>, ipAddr, n, <span class="hljs-type">string</span>(data))<br><span class="hljs-comment">// 接收到exit，退出连接</span><br><span class="hljs-keyword">if</span> <span class="hljs-type">string</span>(data) == <span class="hljs-string">&quot;exit&quot;</span> &#123;<br>fmt.Println(ipAddr, <span class="hljs-string">&quot;退出连接&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 回复客户端</span><br>cmd := exec.Command(<span class="hljs-string">&quot;cmd&quot;</span>,<span class="hljs-string">&quot;/C&quot;</span>,<span class="hljs-type">string</span>(data))<br><span class="hljs-comment">// 执行命令，并返回结果</span><br>output,err := cmd.Output()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br>fmt.Println(<span class="hljs-string">&quot;命令结果字节数:&quot;</span>,<span class="hljs-built_in">len</span>(output))<br>dec := mahonia.NewDecoder(<span class="hljs-string">&quot;gbk&quot;</span>)<br>_, cdata, _ := dec.Translate(output, <span class="hljs-literal">true</span>)<br>result := <span class="hljs-type">string</span>(cdata)<br>fmt.Println(result)<br>conn.Write([]<span class="hljs-type">byte</span>(<span class="hljs-type">string</span>(result)))<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>客户端:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 1.连接服务端</span><br>conn, err := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8888&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><span class="hljs-comment">// 缓冲区</span><br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br><br>reader := bufio.NewReader(os.Stdin) <span class="hljs-comment">// 从标准输入生成读对象</span><br>fmt.Println(<span class="hljs-string">&quot;输入执行命令&gt;&gt;&gt;&quot;</span>)<br>text, _ := reader.ReadString(<span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-comment">// 读到换行</span><br>text = strings.TrimSpace(text)<br><br>fmt.Println(<span class="hljs-string">&quot;text&quot;</span>,text)<br><span class="hljs-comment">// 发送数据</span><br>conn.Write([]<span class="hljs-type">byte</span>(text))<br><span class="hljs-comment">// 接收服务端返回信息</span><br>res := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">100000</span>)  <span class="hljs-comment">// 如何解决大文件传输问题呢？看下面的文件上传案例</span><br>n, err := conn.Read(res)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;err:&quot;</span>,err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;n&quot;</span>,n)<br>result := res[:n]<br>fmt.Printf(<span class="hljs-string">&quot;接收到数据:%s\n&quot;</span>, <span class="hljs-type">string</span>(result))<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="13-4-3、上传文件案例"><a href="#13-4-3、上传文件案例" class="headerlink" title="13.4.3、上传文件案例"></a>13.4.3、上传文件案例</h4><p>服务端：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 1.创建TCP服务端监听</span><br>listenner, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;0.0.0.0:8888&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> listenner.Close()<br><br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br><span class="hljs-comment">// 阻塞等待客户端连接</span><br>conn, err := listenner.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">go</span> ClientConn(conn)<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">// 处理服务端逻辑</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ClientConn</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br><span class="hljs-keyword">defer</span> conn.Close()<br><span class="hljs-comment">// 获取客户端地址</span><br>ipAddr := conn.RemoteAddr().String()<br>fmt.Println(ipAddr, <span class="hljs-string">&quot;连接成功&quot;</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br><span class="hljs-comment">// 缓冲区</span><br>infoByte := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1024</span>)<br><span class="hljs-comment">// n是读取的长度</span><br>n, err := conn.Read(infoByte)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">//</span><br>nameAndSize := strings.Split(<span class="hljs-type">string</span>(infoByte[:n]),<span class="hljs-string">&quot; &quot;</span>)<br>fileSize, err := strconv.Atoi(nameAndSize[<span class="hljs-number">1</span>])<br>fileName := nameAndSize[<span class="hljs-number">0</span>]<br><span class="hljs-comment">// 读数据和写文件</span><br>file, err := os.OpenFile(fileName, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, <span class="hljs-number">0666</span>)<br>writer := bufio.NewWriter(file)<br><br><span class="hljs-comment">// 循环接收数据</span><br><span class="hljs-keyword">var</span> readSize = <span class="hljs-number">0</span><br>fmt.Println(readSize, fileSize)<br><span class="hljs-keyword">for</span> readSize &lt; fileSize &#123;<br>data := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1024</span>)<br><span class="hljs-comment">// n是读取的长度</span><br>n, _ := conn.Read(data)<br>fmt.Println(<span class="hljs-string">&quot;n&quot;</span>, n)<br>_, _ = writer.WriteString(<span class="hljs-type">string</span>(data[:n]))<br>readSize += <span class="hljs-built_in">len</span>(data)<br>&#125;<br>_ = writer.Flush()<br>fmt.Println(<span class="hljs-string">&quot;上传成功!&quot;</span>)<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 1.连接服务端</span><br>conn, err := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8888&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><span class="hljs-comment">// 缓冲区</span><br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br><br>reader := bufio.NewReader(os.Stdin) <span class="hljs-comment">// 从标准输入生成读对象</span><br>fmt.Println(<span class="hljs-string">&quot;输入执行命令&gt;&gt;&gt;&quot;</span>)<br>text, _ := reader.ReadString(<span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-comment">// 读到换行</span><br>text = strings.TrimSpace(text)<br><br>        path := strings.Split(text,<span class="hljs-string">&quot; &quot;</span>)[<span class="hljs-number">1</span>]<br><br><span class="hljs-comment">//打开文件</span><br>file, _ := os.Open(path)<br>        <span class="hljs-comment">// 获取文件大小</span><br>reader = bufio.NewReader(file)<br>f, _ := os.Stat(path)<br><br><span class="hljs-comment">// 发送文件大小</span><br>fsize := f.Size()<br><span class="hljs-comment">// 获取文件名称</span><br>fname := f.Name()<br><br>strInt64 := strconv.FormatInt(fsize, <span class="hljs-number">10</span>)<br>_, _ = conn.Write([]<span class="hljs-type">byte</span>(fname+<span class="hljs-string">&quot; &quot;</span>+strInt64))<br><br><span class="hljs-comment">// 发送文件数据</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// (1) 按行都字符串</span><br>bytes, err := reader.ReadBytes(<span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-comment">// 读取到换行符为止，读取内容包括换行符</span><br><span class="hljs-comment">// 发送数据</span><br>_, _ = conn.Write(bytes)<br><span class="hljs-keyword">if</span> err == io.EOF &#123; <span class="hljs-comment">//io.EOF 读取到了文件的末尾</span><br><span class="hljs-comment">// fmt.Println(&quot;读取到文件末尾！&quot;)</span><br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><br>fmt.Println(<span class="hljs-string">&quot;上传成功&quot;</span>)<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="13-5、web开发"><a href="#13-5、web开发" class="headerlink" title="13.5、web开发"></a>13.5、web开发</h2><h3 id="13-5-1、http协议"><a href="#13-5-1、http协议" class="headerlink" title="13.5.1、http协议"></a>13.5.1、http协议</h3><h4 id="（1）简介"><a href="#（1）简介" class="headerlink" title="（1）简介"></a>（1）简介</h4><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于万维网（WWW:World Wide Web ）服务器与本地浏览器之间传输超文本的传送协议。HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p><p><img src="/pages_images/Go/1588750-20190118162356278-1999323050-1624707725533.png" alt="1588750-20190118162356278-1999323050"></p><h4 id="（2）-http协议特性"><a href="#（2）-http协议特性" class="headerlink" title="（2） http协议特性"></a>（2） http协议特性</h4><h5 id="1-基于TCP-IP协议"><a href="#1-基于TCP-IP协议" class="headerlink" title="(1) 基于TCP&#x2F;IP协议"></a>(1) 基于TCP&#x2F;IP协议</h5><p>http协议是基于TCP&#x2F;IP协议之上的应用层协议。</p><h5 id="2-基于请求－响应模式"><a href="#2-基于请求－响应模式" class="headerlink" title="(2) 基于请求－响应模式"></a>(2) 基于请求－响应模式</h5><p>HTTP协议规定,请求从客户端发出,最后服务器端响应该请求并 返回。换句话说,肯定是先从客户端开始建立通信的,服务器端在没有 接收到请求之前不会发送响应</p><p><img src="/pages_images/Go/1588750-20190118162456025-57507097-1624707725533.png" alt="1588750-20190118162456025-57507097"></p><h5 id="3-无状态保存"><a href="#3-无状态保存" class="headerlink" title="(3) 无状态保存"></a>(3) 无状态保存</h5><p>HTTP是一种不保存状态,即无状态(stateless)协议。HTTP协议 自身不对请求和响应之间的通信状态进行保存。也就是说在HTTP这个 级别,协议对于发送过的请求或响应都不做持久化处理。</p><p>使用HTTP协议,每当有新的请求发送时,就会有对应的新响应产 生。协议本身并不保留之前一切的请求或响应报文的信息。这是为了更快地处理大量事务,确保协议的可伸缩性,而特意把HTTP协议设计成 如此简单的。</p><p>可是,随着Web的不断发展,因无状态而导致业务处理变得棘手 的情况增多了。比如,用户登录到一家购物网站,即使他跳转到该站的 其他页面后,也需要能继续保持登录状态。针对这个实例,网站为了能 够掌握是谁送出的请求,需要保存用户的状态。HTTP&#x2F;1.1虽然是无状态协议,但为了实现期望的保持状态功能, 于是引入了Cookie技术。有了Cookie再用HTTP协议通信,就可以管 理状态了。有关Cookie的详细内容稍后讲解。</p><p><img src="/pages_images/Go/1588750-20190118162508678-1256775662-1624707725533.png" alt="1588750-20190118162508678-1256775662"></p><h5 id="4-无连接"><a href="#4-无连接" class="headerlink" title="(4) 无连接"></a>(4) 无连接</h5><p>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p><h4 id="（3）14-1-3-、http请求协议与响应协议"><a href="#（3）14-1-3-、http请求协议与响应协议" class="headerlink" title="（3）14.1.3 、http请求协议与响应协议"></a>（3）14.1.3 、http请求协议与响应协议</h4><p>http协议包含由浏览器发送数据到服务器需要遵循的请求协议与服务器发送数据到浏览器需要遵循的请求协议。用于HTTP协议交互的信被为HTTP报文。请求端(客户端)的HTTP报文 做请求报文,响应端(服务器端)的 做响应报文。HTTP报文本身是由多行数据构成的字文本。</p><h5 id="1-请求协议"><a href="#1-请求协议" class="headerlink" title="(1) 请求协议"></a>(1) 请求协议</h5><p><img src="/pages_images/Go/1588750-20190118162757959-1733737382-1624707725534.png" alt="1588750-20190118162757959-1733737382"></p><blockquote><p>请求方式: get与post请求</p><ul><li>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditBook?name&#x3D;test1&amp;id&#x3D;123456. POST方法是把提交的数据放在HTTP包的请求体中.</li><li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制</li></ul></blockquote><h5 id="2-响应协议"><a href="#2-响应协议" class="headerlink" title="(2) 响应协议"></a>(2) 响应协议</h5><p><img src="/pages_images/Go/1588750-20190118162740806-776466524-1624707725534.png" alt="1588750-20190118162740806-776466524"></p><p>响应状态码：状态码的职 是当客户端向服务器端发送请求时, 返回的请求 结果。借助状态码,用户可以知道服务器端是正常 理了请求,还是出 现了 。状态码如200 OK,以3位数字和原因 成。数字中的 一位指定了响应 别,后两位无分 。响应 别有以5种。<img src="/pages_images/Go/1588750-20190118162555828-580941844-1617091801039-1624707725534.png" alt="1588750-20190118162555828-580941844"></p><blockquote><p>图片来自于《图解HTTP》</p></blockquote><h3 id="13-5-2、基于net库的web应用"><a href="#13-5-2、基于net库的web应用" class="headerlink" title="13.5.2、基于net库的web应用"></a>13.5.2、基于net库的web应用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br><br>listenner, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;0.0.0.0:8888&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> listenner.Close()<br><span class="hljs-comment">// 2.服务端不断等待请求处理</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// 阻塞等待客户端连接</span><br>conn, err := listenner.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br>buf := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1024</span>)<br>n, err := conn.Read(buf)<br>fmt.Println(<span class="hljs-string">&quot;n&quot;</span>,n)<br>conn.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;HTTP/1.1 200 OK\r\n\r\n&lt;h1&gt;Welcome to Web World!&lt;/h1&gt;&quot;</span>))<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="13-5-3、基于http库的web应用"><a href="#13-5-3、基于http库的web应用" class="headerlink" title="13.5.3、基于http库的web应用"></a>13.5.3、基于http库的web应用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span> <span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;Hello Yuan&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>http.HandleFunc(<span class="hljs-string">&quot;/hi&quot;</span>, foo)<br>http.ListenAndServe(<span class="hljs-string">&quot;:8090&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="十四、并发编程"><a href="#十四、并发编程" class="headerlink" title="十四、并发编程"></a>十四、并发编程</h1><p>有人把Go语言比作 21 世纪的C语言，第一是因为Go语言设计简单，第二则是因为 21 世纪最重要的就是并发程序设计，而 Go 从语言层面就支持并发。同时实现了自动垃圾回收机制。Go语言的并发机制运用起来非常简便，在启动并发的方式上直接添加了语言级的关键字就可以实现，和其他编程语言相比更加轻量。</p><h2 id="14-1、并发技术"><a href="#14-1、并发技术" class="headerlink" title="14.1、并发技术"></a>14.1、并发技术</h2><h3 id="14-1-1、操作系统的进程、线程发展"><a href="#14-1-1、操作系统的进程、线程发展" class="headerlink" title="14.1.1、操作系统的进程、线程发展"></a>14.1.1、操作系统的进程、线程发展</h3><p><img src="/pages_images/Go/QQ%E6%88%AA%E5%9B%BE20201126132525.png"></p><p><img src="/pages_images/Go/%E5%B9%B6%E5%8F%913.png"></p><h3 id="14-1-2、进程概念"><a href="#14-1-2、进程概念" class="headerlink" title="14.1.2、进程概念"></a>14.1.2、进程概念</h3><p>我们都知道计算机的核心是CPU，它承担了所有的计算任务；而操作系统是计算机的管理者，它负责任务的调度、资源的分配和管理，统领整个计算机硬件；应用程序则是具有某种功能的程序，程序是运行于操作系统之上的。</p><blockquote><p>进程是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。</p></blockquote><p>进程是一种抽象的概念，从来没有统一的标准定义。进程一般由程序、数据集合和进程控制块三部分组成。</p><ul><li>程序用于描述进程要完成的功能，是控制进程执行的指令集；</li><li>数据集合是程序在执行时所需要的数据和工作区；</li><li>程序控制块(Program Control Block，简称PCB)，包含进程的描述信息和控制信息，是进程存在的唯一标志。</li></ul><p>进程具有的特征：</p><ul><li>动态性：进程是程序的一次执行过程，是临时的，有生命期的，是动态产生，动态消亡的；</li><li>并发性：任何进程都可以同其他进程一起并发执行；</li><li>独立性：进程是系统进行资源分配和调度的一个独立单位；</li><li>结构性：进程由程序、数据和进程控制块三部分组成。</li></ul><h3 id="14-1-3、线程的概念"><a href="#14-1-3、线程的概念" class="headerlink" title="14.1.3、线程的概念"></a>14.1.3、线程的概念</h3><p>在早期的操作系统中并没有线程的概念，进程是能拥有资源和独立运行的最小单位，也是程序执行的最小单位。任务调度采用的是时间片轮转的抢占式调度方式，而进程是任务调度的最小单位，每个进程有各自独立的一块内存，使得各个进程之间内存地址相互隔离。</p><p>后来，随着计算机的发展，对CPU的要求越来越高，进程之间的切换开销较大，已经无法满足越来越复杂的程序的要求了。于是就发明了线程。</p><p>线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间(也就是所在进程的内存空间)。一个标准的线程由线程ID、当前指令指针(PC)、寄存器和堆栈组成。而进程由内存空间(代码、数据、进程空间、打开的文件)和一个或多个线程组成。</p><h3 id="14-1-4、任务调度"><a href="#14-1-4、任务调度" class="headerlink" title="14.1.4、任务调度"></a>14.1.4、任务调度</h3><p>线程是什么？要理解这个概念，需要先了解一下操作系统的一些相关概念。大部分操作系统(如Windows、Linux)的任务调度是采用时间片轮转的抢占式调度方式。</p><p>在一个进程中，当一个线程任务执行几毫秒后，会由操作系统的内核（负责管理各个任务）进行调度，通过硬件的计数器中断处理器，让该线程强制暂停并将该线程的寄存器放入内存中，通过查看线程列表决定接下来执行哪一个线程，并从内存中恢复该线程的寄存器，最后恢复该线程的执行，从而去执行下一个任务。</p><p>上述过程中，任务执行的那一小段时间叫做时间片，任务正在执行时的状态叫运行状态，被暂停的线程任务状态叫做就绪状态，意为等待下一个属于它的时间片的到来。</p><p>这种方式保证了每个线程轮流执行，由于CPU的执行效率非常高，时间片非常短，在各个任务之间快速地切换，给人的感觉就是多个任务在“同时进行”，这也就是我们所说的并发。</p><h3 id="14-1-5、进程与线程的区别"><a href="#14-1-5、进程与线程的区别" class="headerlink" title="14.1.5、进程与线程的区别"></a>14.1.5、进程与线程的区别</h3><p>前面讲了进程与线程，但可能你还觉得迷糊，感觉他们很类似。的确，进程与线程有着千丝万缕的关系，下面就让我们一起来理一理：</p><blockquote><ol><li>线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位；</li><li>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；</li><li>进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集、堆等)及一些进程级的资源(如打开文件和信号)，某进程内的线程在其它进程不可见；</li><li>调度和切换：线程上下文切换比进程上下文切换要快得多。</li></ol></blockquote><h3 id="14-1-6、线程的生命周期"><a href="#14-1-6、线程的生命周期" class="headerlink" title="14.1.6、线程的生命周期"></a>14.1.6、线程的生命周期</h3><p>当线程的数量小于处理器的数量时，线程的并发是真正的并发，不同的线程运行在不同的处理器上。但当线程的数量大于处理器的数量时，线程的并发会受到一些阻碍，此时并不是真正的并发，因为此时至少有一个处理器会运行多个线程。</p><p>在单个处理器运行多个线程时，并发是一种模拟出来的状态。操作系统采用时间片轮转的方式轮流执行每一个线程。现在，几乎所有的现代操作系统采用的都是时间片轮转的抢占式调度方式，如我们熟悉的Unix、Linux、Windows及macOS等流行的操作系统。</p><p>我们知道线程是程序执行的最小单位，也是任务执行的最小单位。在早期只有进程的操作系统中，进程有五种状态，创建、就绪、运行、阻塞(等待)、退出。早期的进程相当于现在的只有单个线程的进程，那么现在的多线程也有五种状态，现在的多线程的生命周期与早期进程的生命周期类似。</p><p><img src="/pages_images/Go/%E5%B9%B6%E5%8F%917.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">线程的生命周期<br><br><span class="hljs-comment"># 创建：一个新的线程被创建，等待该线程被调用执行；</span><br><span class="hljs-comment"># 就绪：时间片已用完，此线程被强制暂停，等待下一个属于它的时间片到来；</span><br><span class="hljs-comment"># 运行：此线程正在执行，正在占用时间片；</span><br><span class="hljs-comment"># 阻塞：也叫等待状态，等待某一事件(如IO或另一个线程)执行完；</span><br><span class="hljs-comment"># 退出：一个线程完成任务或者其他终止条件发生，该线程终止进入退出状态，退出状态释放该线程所分配的资源。</span><br></code></pre></td></tr></table></figure><h3 id="14-1-7、协程-Coroutines"><a href="#14-1-7、协程-Coroutines" class="headerlink" title="14.1.7、协程(Coroutines)"></a>14.1.7、协程(Coroutines)</h3><p>协程，英文Coroutines，是一种基于线程之上，但又比线程更加轻量级的存在，这种由程序员自己写程序来管理的轻量级线程叫做『用户空间线程』，具有对内核来说不可见的特性。因为是自主开辟的异步任务，所以很多人也更喜欢叫它们纤程（<code>Fiber</code>），或者绿色线程（<code>GreenThread</code>）。正如一个进程可以拥有多个线程一样，一个线程也可以拥有多个协程。</p><blockquote><p>协程解决的是线程的切换开销和内存开销的问题</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">* 用户空间 首先是在用户空间, 避免内核态和用户态的切换导致的成本。<br>* 由语言或者框架层调度<br>* 更小的栈空间允许创建大量实例（百万级别）<br></code></pre></td></tr></table></figure><h3 id="14-1-8、三种线程模型"><a href="#14-1-8、三种线程模型" class="headerlink" title="14.1.8、三种线程模型"></a>14.1.8、三种线程模型</h3><p>无论语言层面何种并发模型，到了操作系统层面，一定是以线程的形态存在的。而操作系统根据资源访问权限的不同，体系架构可分为用户空间和内核空间；内核空间主要操作访问CPU资源、I&#x2F;O资源、内存资源等硬件资源，为上层应用程序提供最基本的基础资源，用户空间呢就是上层应用程序的固定活动空间，用户空间不可以直接访问资源，必须通过“系统调用”、“库函数”或“Shell脚本”来调用内核空间提供的资源。我们现在的计算机语言，可以狭义的认为是一种“软件”，它们中所谓的“线程”，往往是用户态的线程，和操作系统本身内核态的线程（简称KSE），还是有区别的。</p><p><strong>一、用户级线程模型（M : 1）</strong></p><p>将多个用户级线程映射到一个内核级线程，线程管理在用户空间完成。此模式中，用户级线程对操作系统不可见（即透明）。</p><p><img src="/pages_images/Go/%E5%B9%B6%E5%8F%918.jpeg"></p><p>优点：<br>这种模型的好处是线程上下文切换都发生在用户空间，避免的模态切换（mode switch），从而对于性能有积极的影响。</p><p>缺点：</p><ol><li>无法利用多核资源：协程的本质是个单线程,它不能同时将 单个CPU 的多个核用上,协程需要和进程配合才能运行在多CPU上.当然我们日常所编写的绝大部分应用都没有这个必要，除非是cpu密集型应用。</li><li>进行阻塞（Blocking）操作（如IO时）会阻塞掉整个程序</li></ol><p><strong>二、内核级线程模型（1：1）</strong></p><p>将每个用户级线程映射到一个内核级线程。</p><p><img src="/pages_images/Go/%E5%B9%B6%E5%8F%919.jpeg"></p><p>每个线程由内核调度器独立的调度，所以如果一个线程阻塞则不影响其他的线程。<br>优点：在多核处理器的硬件的支持下，内核空间线程模型支持了真正的并行，当一个线程被阻塞后，允许另一个线程继续执行，所以并发能力较强。</p><p>缺点：每创建一个用户级线程都需要创建一个内核级线程与其对应，这样创建线程的开销比较大，会影响到应用程序的性能。</p><p><strong>三、两级线程模型（M:N）</strong></p><p>内核线程和用户线程的数量比为 M : N，内核用户空间综合了前两种的优点。</p><p><img src="/pages_images/Go/%E5%B9%B6%E5%8F%9110.jpeg"></p><p>一个进程中可以对应多个内核级线程，但是进程中的线程不和内核线程一一对应；这种线程模型会先创建多个内核级线程，然后用自身的用户级线程去对应创建的多个内核级线程，自身的用户级线程需要本身程序去调度，内核级的线程交给操作系统内核去调度。这使得大部分的线程上下文切换都发生在用户空间，而多个内核线程又可以充分利用处理器资源。</p><p>Go语言的线程模型就是一种特殊的两级线程模型（GPM调度模型）。</p><h2 id="14-2、goroutine的基本使用"><a href="#14-2、goroutine的基本使用" class="headerlink" title="14.2、goroutine的基本使用"></a>14.2、goroutine的基本使用</h2><h3 id="14-2-1、goroutine的基本语法"><a href="#14-2-1、goroutine的基本语法" class="headerlink" title="14.2.1、goroutine的基本语法"></a>14.2.1、goroutine的基本语法</h3><p>goroutine 是 Go语言中的轻量级线程实现，由 Go 运行时（runtime）管理。Go 程序会智能地将 goroutine 中的任务合理地分配给每个 CPU。Go 程序从 main 包的 main() 函数开始，在程序启动时，Go 程序就会为 main() 函数创建一个默认的 goroutine。  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;foo&quot;</span>)<br>    time.Sleep(time.Second)<br>    fmt.Println(<span class="hljs-string">&quot;foo end&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;bar&quot;</span>)<br>time.Sleep(time.Second*<span class="hljs-number">2</span>)<br>fmt.Println(<span class="hljs-string">&quot;bar end&quot;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    <span class="hljs-keyword">go</span> foo()<br>    bar()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="14-2-2、sync-WaitGroup"><a href="#14-2-2、sync-WaitGroup" class="headerlink" title="14.2.2、sync.WaitGroup"></a>14.2.2、sync.WaitGroup</h3><p>Go语言中可以使用<code>sync.WaitGroup</code>来实现并发任务的同步。 <code>sync.WaitGroup</code>有以下几个方法：</p><table><thead><tr><th align="center">方法名</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">(wg * WaitGroup) Add(delta int)</td><td align="center">计数器+delta</td></tr><tr><td align="center">(wg *WaitGroup) Done()</td><td align="center">计数器-1</td></tr><tr><td align="center">(wg *WaitGroup) Wait()</td><td align="center">阻塞直到计数器变为0</td></tr></tbody></table><p><code>sync.WaitGroup</code>内部维护着一个计数器，计数器的值可以增加和减少。例如当我们启动了N 个并发任务时，就将计数器值增加N。每个任务完成时通过调用Done()方法将计数器减1。通过调用Wait()来等待并发任务执行完，当计数器值为0时，表示所有并发任务已经完成。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>    fmt.Println(<span class="hljs-string">&quot;foo&quot;</span>)<br>    time.Sleep(time.Second)<br>    fmt.Println(<span class="hljs-string">&quot;foo end&quot;</span>)<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>fmt.Println(<span class="hljs-string">&quot;bar&quot;</span>)<br>time.Sleep(time.Second*<span class="hljs-number">2</span>)<br>fmt.Println(<span class="hljs-string">&quot;bar end&quot;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    start:=time.Now()<br>wg.Add(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">go</span> foo()<br>    <span class="hljs-keyword">go</span> bar()<br>wg.Wait()<br>fmt.Println(<span class="hljs-string">&quot;程序结束，运行时间为&quot;</span>,time.Now().Sub(start))<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="14-2-3、GOMAXPROCS"><a href="#14-2-3、GOMAXPROCS" class="headerlink" title="14.2.3、GOMAXPROCS"></a>14.2.3、GOMAXPROCS</h3><p>Go运行时的调度器使用<code>GOMAXPROCS</code>参数来确定需要使用多少个OS线程来同时执行Go代码。默认值是机器上的CPU核心数。例如在一个8核心的机器上，调度器会把Go代码同时调度到8个OS线程上（GOMAXPROCS是m:n调度中的n）。</p><p>Go语言中可以通过<code>runtime.GOMAXPROCS()</code>函数设置当前程序并发时占用的CPU逻辑核心数。</p><p>Go1.5版本之前，默认使用的是单核心执行。Go1.5版本之后，默认使用全部的CPU逻辑核心数。</p><p>我们可以通过将任务分配到不同的CPU逻辑核心上实现并行的效果，这里举个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;runtime&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>fmt.Println(<span class="hljs-string">&quot;A:&quot;</span>, i)<br><span class="hljs-comment">//time.Sleep(time.Millisecond*20)</span><br>&#125;<br><br>wg.Done()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>fmt.Println(<span class="hljs-string">&quot;B:&quot;</span>, i)<br><span class="hljs-comment">//time.Sleep(time.Millisecond*30)</span><br>&#125;<br><br>wg.Done()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>wg.Add(<span class="hljs-number">2</span>)<br>fmt.Println(runtime.NumCPU())<br>runtime.GOMAXPROCS(<span class="hljs-number">1</span>)<span class="hljs-comment">//  改为4</span><br><span class="hljs-keyword">go</span> foo()<br><span class="hljs-keyword">go</span> bar()<br>wg.Wait()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="14-3、GPM调度器"><a href="#14-3、GPM调度器" class="headerlink" title="14.3、GPM调度器"></a>14.3、GPM调度器</h2><p> GPM是GO语言运行时(runtime)层面得实现,是go语言自己实现得一套调度系统 区别于操作系统调度得OS线程</p><blockquote><p><code>M</code>指的是<code>Machine</code>，一个<code>M</code>直接关联了一个内核线程。由操作系统管理。<br><code>P</code>指的是”processor”，代表了<code>M</code>所需的上下文环境，也是处理用户级代码逻辑的处理器。它负责衔接M和G的调度上下文，将等待执行的G与M对接。<br><code>G</code>指的是<code>Goroutine</code>，其实本质上也是一种轻量级的线程。包括了调用栈，重要的调度信息，例如channel等。</p></blockquote><p>P的数量由环境变量中的<code>GOMAXPROCS</code>决定，通常来说它是和核心数对应，例如在4Core的服务器上回启动4个线程。G会有很多个，每个P会将Goroutine从一个就绪的队列中做Pop操作，为了减小锁的竞争，通常情况下每个P会负责一个队列。</p><p>Goroutine调度策略</p><p>每次调用go的时候，都会：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">A、创建一个G对象，加入到本地队列或者全局队列</span><br><span class="hljs-comment">B、如果有空闲的P，则创建一个M</span><br><span class="hljs-comment">C、M会启动一个底层线程，循环执行能找到的G任务</span><br><span class="hljs-comment">D、G任务的执行顺序是先从本地队列找，本地没有则从全局队列找（一次性转移(全局G个数/P个数）个，再去其它P中找（一次性转移一半）。</span><br><span class="hljs-comment">E、G任务执行是按照队列顺序（即调用go的顺序）执行的。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>创建一个M过程如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">A、先找到一个空闲的P，如果没有则直接返回。</span><br><span class="hljs-comment">B、调用系统API创建线程，不同的操作系统调用方法不一样。</span><br><span class="hljs-comment">C、 在创建的线程里循环执行G任务</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>如果一个系统调用或者G任务执行太长，会一直占用内核空间线程，由于本地队列的G任务是顺序执行的，其它G任务就会阻塞。因此，Go程序启动的时候，会专门创建一个线程sysmon，用来监控和管理，sysmon内部是一个循环：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">A、记录所有P的G任务计数schedtick，schedtick会在每执行一个G任务后递增。</span><br><span class="hljs-comment">B、如果检查到 schedtick一直没有递增，说明P一直在执行同一个G任务，如果超过一定的时间（10ms），在G任务的栈信息里面加一个标记。</span><br><span class="hljs-comment">C、G任务在执行的时候，如果遇到非内联函数调用，就会检查一次标记，然后中断自己，把自己加到队列末尾，执行下一个G。</span><br><span class="hljs-comment">D、如果没有遇到非内联函数（有时候正常的小函数会被优化成内联函数）调用，会一直执行G任务，直到goroutine自己结束；如果goroutine是死循环，并且GOMAXPROCS=1，阻塞。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>(1) 局部优先调度</p><p>(2) steal working</p><p>(3) 阻塞调度</p><p>(4) 抢占式调度</p><h2 id="14-4、数据安全与锁"><a href="#14-4、数据安全与锁" class="headerlink" title="14.4、数据安全与锁"></a>14.4、数据安全与锁</h2><h3 id="14-4-1、互斥锁"><a href="#14-4-1、互斥锁" class="headerlink" title="14.4.1、互斥锁"></a>14.4.1、互斥锁</h3><p>互斥锁是一种常用的控制共享资源访问的方法，它能够保证同时只有一个<code>goroutine</code>可以访问共享资源。Go语言中使用<code>sync</code>包的<code>Mutex</code>类型来实现互斥锁。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><span class="hljs-keyword">var</span> lock sync.Mutex<br><span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//lock.Lock()</span><br>x++<br><span class="hljs-comment">//lock.Unlock()</span><br>wg.Done()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>wg.Add(<span class="hljs-number">1000</span>)<br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span> ;i++  &#123;<br>        <span class="hljs-keyword">go</span> add()<br>&#125;<br>wg.Wait()<br>fmt.Println(x)<br>&#125;<br></code></pre></td></tr></table></figure><p>使用互斥锁能够保证同一时间有且只有一个<code>goroutine</code>进入临界区，其他的<code>goroutine</code>则在等待锁；当互斥锁释放后，等待的<code>goroutine</code>才可以获取锁进入临界区，多个<code>goroutine</code>同时等待一个锁时，唤醒的策略是随机的。</p><h3 id="14-4-2、读写锁"><a href="#14-4-2、读写锁" class="headerlink" title="14.4.2、读写锁"></a>14.4.2、读写锁</h3><p>在读多写少的环境中，可以优先使用读写互斥锁（sync.RWMutex），它比互斥锁更加高效。sync 包中的 RWMutex 提供了读写互斥锁的封装。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-comment">// 效率对比</span><br><br><span class="hljs-comment">// 声明读写锁</span><br><span class="hljs-keyword">var</span> rwlock sync.RWMutex<br><span class="hljs-keyword">var</span> mutex sync.Mutex<br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><span class="hljs-comment">// 全局变量</span><br><span class="hljs-keyword">var</span> x <span class="hljs-type">int</span><br><br><span class="hljs-comment">// 写数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">write</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">//mutex.Lock()</span><br>rwlock.Lock()<br>x += <span class="hljs-number">1</span><br>fmt.Println(<span class="hljs-string">&quot;x&quot;</span>,x)<br>time.Sleep(<span class="hljs-number">10</span> * time.Millisecond)<br><span class="hljs-comment">//mutex.Unlock()</span><br>rwlock.Unlock()<br>    wg.Done()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">read</span><span class="hljs-params">(i <span class="hljs-type">int</span>)</span></span> &#123;<br><br><span class="hljs-comment">//mutex.Lock()</span><br>rwlock.RLock()<br>time.Sleep(time.Millisecond)<br>fmt.Println(x)<br><span class="hljs-comment">//mutex.Unlock()</span><br>rwlock.RUnlock()<br><br>    wg.Done()<br>&#125;<br><br><span class="hljs-comment">// 互斥锁执行时间：18533117400</span><br><span class="hljs-comment">// 读写锁执行时间：1312065700</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>start := time.Now()<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> write()<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++ &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> read(i)<br>&#125;<br><br>wg.Wait()<br><br>fmt.Println(<span class="hljs-string">&quot;运行时间：&quot;</span>, time.Now().Sub(start))<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="14-4-3、map锁"><a href="#14-4-3、map锁" class="headerlink" title="14.4.3、map锁"></a>14.4.3、map锁</h3><p>Go语言中内置的map不是并发安全的.</p><p>并发读是安全的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>wg := sync.WaitGroup&#123;&#125;<br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>)<br><span class="hljs-comment">// 添一些假数据</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>m[i] = i*i<br>&#125;<br><span class="hljs-comment">// 遍历打印</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> &#123;<br>fmt.Println(m[x], <span class="hljs-string">&quot;\t&quot;</span>)<br>wg.Done()<br>&#125;(i)<br>&#125;<br>wg.Wait()<br>fmt.Println(m)<br><br>&#125;<br></code></pre></td></tr></table></figure><p>并发写则不安全</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>wg := sync.WaitGroup&#123;&#125;<br><span class="hljs-comment">//m := make(map[int]int)</span><br><span class="hljs-keyword">var</span> m = sync.Map&#123;&#125;<br><br><span class="hljs-comment">// 并发写</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++ &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>m.Store(i,i*i)<br>&#125;(i)<br>&#125;<br>wg.Wait()<br>fmt.Println(m.Load(<span class="hljs-number">1</span>))<br>fmt.Println(m.Load(<span class="hljs-number">2</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="14-4-4、原子性操作"><a href="#14-4-4、原子性操作" class="headerlink" title="14.4.4、原子性操作"></a>14.4.4、原子性操作</h3><ul><li><p>加锁操作比较耗时，整数可以使用原子操作保证线程安全</p></li><li><p>原子操作在用户态就可以完成，因此性能比互斥锁高</p></li></ul><blockquote><p>AddXxx()：加减操作</p><p>CompareAndSwapXxx()：比较并交换</p><p>LoadXxx()：读取操作</p><p>StoreXxx()：写入操作</p><p>SwapXxx()：交换操作</p></blockquote><p>原子操作与互斥锁性能对比:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;sync/atomic&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-comment">// 效率对比</span><br><span class="hljs-comment">// 原子操作需要接收int32或int64</span><br><span class="hljs-keyword">var</span> x <span class="hljs-type">int32</span><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><span class="hljs-keyword">var</span> mutex sync.Mutex<br><br><span class="hljs-comment">// 互斥锁操作</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add1</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">500</span>; i++ &#123;<br>mutex.Lock()<br>x += <span class="hljs-number">1</span><br>mutex.Unlock()<br>&#125;<br>wg.Done()<br>&#125;<br><br><span class="hljs-comment">// 原子操作</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add2</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">500</span>; i++ &#123;<br>atomic.AddInt32(&amp;x, <span class="hljs-number">1</span>)<br>&#125;<br>wg.Done()<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>start := time.Now()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++ &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> add1()<br><span class="hljs-comment">//go add2()</span><br>&#125;<br>wg.Wait()<br>fmt.Println(<span class="hljs-string">&quot;x:&quot;</span>, x)<br>fmt.Println(<span class="hljs-string">&quot;执行时间：&quot;</span>, time.Now().Sub(start))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="14-5、channel（管道）"><a href="#14-5、channel（管道）" class="headerlink" title="14.5、channel（管道）"></a>14.5、channel（管道）</h2><p>channel一个类型管道，通过它可以在goroutine之间发送和接收消息。它是Golang在语言层面提供的goroutine间的通信方式。Go依赖于成为CSP的并发模型，通过Channel实现这种同步模式。Golang并发的核心哲学是不要通过共享内存进行通信。</p><p>在地铁站、食堂、洗手间等公共场所人很多的情况下，大家养成了排队的习惯，目的也是避免拥挤、插队导致的低效的资源使用和交换过程。代码与数据也是如此，多个 goroutine 为了争抢数据，势必造成执行的低效率，使用队列的方式是最高效的，channel 就是一种队列一样的结构。</p><p>Go语言中的通道（channel）是一种特殊的类型。在任何时候，同时只能有一个 goroutine 访问通道进行发送和获取数据。goroutine 间通过通道就可以通信。通道像一个传送带或者队列，总是遵循先入先出（First In First Out）的规则，保证收发数据的顺序。  </p><h3 id="14-5-1、声明创建通道"><a href="#14-5-1、声明创建通道" class="headerlink" title="14.5.1、声明创建通道"></a>14.5.1、声明创建通道</h3><p>通道本身需要一个类型进行修饰，就像切片类型需要标识元素类型。通道的元素类型就是在其内部传输的数据类型，声明如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> 通道变量 <span class="hljs-keyword">chan</span> 通道类型<br></code></pre></td></tr></table></figure><p>通道是引用类型，需要使用 make 进行创建，格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">通道实例 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> 数据类型) <span class="hljs-comment">// 不带缓冲的chan</span><br>通道实例 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> 数据类型,数量) <span class="hljs-comment">// 带缓冲的chan</span><br></code></pre></td></tr></table></figure><h3 id="14-5-2、channel基本操作"><a href="#14-5-2、channel基本操作" class="headerlink" title="14.5.2、channel基本操作"></a>14.5.2、channel基本操作</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> 数据类型)<br><span class="hljs-comment">// 向通道发送数据</span><br>ch &lt;- 值<br><span class="hljs-comment">// 从通道接收数据</span><br>&lt;- ch<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Stu <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-type">string</span><br>age  <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 案例1</span><br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">10</span>)<br>fmt.Println(<span class="hljs-built_in">len</span>(ch), <span class="hljs-built_in">cap</span>(ch))<br><br>ch &lt;- <span class="hljs-number">1</span><br>ch &lt;- <span class="hljs-number">2</span><br>ch &lt;- <span class="hljs-number">3</span><br><br>fmt.Println(&lt;-ch) <span class="hljs-comment">// FIFO</span><br>fmt.Println(&lt;-ch)<br>fmt.Println(&lt;-ch)<br><br><span class="hljs-comment">// 案例2</span><br>ch2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-number">3</span>)<br>ch2 &lt;- <span class="hljs-number">100</span><br>ch2 &lt;- <span class="hljs-string">&quot;hello&quot;</span><br>ch2 &lt;- Stu&#123;<span class="hljs-string">&quot;yuan&quot;</span>, <span class="hljs-number">22</span>&#125;<br><br>fmt.Println(&lt;-ch2)<br>fmt.Println(&lt;-ch2)<br>fmt.Println(&lt;-ch2)<br><span class="hljs-comment">// s := &lt;-ch2</span><br><span class="hljs-comment">//fmt.Println(s.Name)</span><br><span class="hljs-comment">// fmt.Println(s.(Stu).Name)</span><br><br><span class="hljs-comment">// 案例3</span><br>ch3 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">3</span>)<br>x := <span class="hljs-number">10</span><br>ch3 &lt;- x <span class="hljs-comment">// 值拷贝</span><br>x = <span class="hljs-number">20</span><br>fmt.Println(&lt;-ch3)<br><br>ch4 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> *<span class="hljs-type">int</span>, <span class="hljs-number">3</span>)<br>y := <span class="hljs-number">20</span><br>ch4 &lt;- &amp;y<br>y = <span class="hljs-number">30</span><br>p := &lt;-ch4<br>fmt.Println(*p)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="14-5-3、chan是引用类型"><a href="#14-5-3、chan是引用类型" class="headerlink" title="14.5.3、chan是引用类型"></a>14.5.3、chan是引用类型</h3><p>通道的结构hchan,源码再src&#x2F;runtime&#x2F;chan.go下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"> <span class="hljs-keyword">type</span> hchan <span class="hljs-keyword">struct</span> &#123;<br>     qcount   <span class="hljs-type">uint</span>           <span class="hljs-comment">// total data in the queue 当前队列里还剩余元素个数</span><br>     dataqsiz <span class="hljs-type">uint</span>           <span class="hljs-comment">// size of the circular queue 环形队列长度，即缓冲区的大小，即make(chan T,N) 中的N</span><br>     buf      unsafe.Pointer <span class="hljs-comment">// points to an array of dataqsiz elements 环形队列指针</span><br>     elemsize <span class="hljs-type">uint16</span> <span class="hljs-comment">//每个元素的大小</span><br>     closed   <span class="hljs-type">uint32</span> <span class="hljs-comment">//标识当前通道是否处于关闭状态，创建通道后，该字段设置0，即打开通道；通道调用close将其设置为1，通道关闭</span><br>     elemtype *_type <span class="hljs-comment">// element type 元素类型，用于数据传递过程中的赋值</span><br>     sendx    <span class="hljs-type">uint</span>   <span class="hljs-comment">// send index 环形缓冲区的状态字段，它只是缓冲区的当前索引-支持数组，它可以从中发送数据</span><br>     recvx    <span class="hljs-type">uint</span>   <span class="hljs-comment">// receive index 环形缓冲区的状态字段，它只是缓冲区当前索引-支持数组，它可以从中接受数据</span><br>     recvq    waitq  <span class="hljs-comment">// list of recv waiters 等待读消息的goroutine队列</span><br>     sendq    waitq  <span class="hljs-comment">// list of send waiters 等待写消息的goroutine队列</span><br>  <br>     <span class="hljs-comment">// lock protects all fields in hchan, as well as several</span><br>     <span class="hljs-comment">// fields in sudogs blocked on this channel.</span><br>     <span class="hljs-comment">//</span><br>     <span class="hljs-comment">// Do not change another G&#x27;s status while holding this lock</span><br>     <span class="hljs-comment">// (in particular, do not ready a G), as this can deadlock</span><br>     <span class="hljs-comment">// with stack shrinking.</span><br>     lock mutex <span class="hljs-comment">//互斥锁，为每个读写操作锁定通道，因为发送和接受必须是互斥操作</span><br>&#125;<br><br><span class="hljs-comment">// sudog 代表goroutine</span><br> <span class="hljs-keyword">type</span> waitq <span class="hljs-keyword">struct</span> &#123;<br>      first *sudog<br>      last  *sudog<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/pages_images/Go/17528797-1430c1feeed649c3.png" alt="img"></p><p>han内部实现了一个环形队列作为其缓冲区，队列的长度是创建chan时指定的。</p><p><strong>环形队列</strong></p><p>下图展示了一个可缓存6个元素的channel示意图：</p><p><img src="/pages_images/Go/image-20220304120254478-16463665762254.png" alt="image-20220304120254478"></p><ul><li>dataqsiz指示了队列长度为6，即可缓存6个元素；</li><li>buf指向队列的内存，队列中还剩余两个元素；</li><li>qcount表示队列中还有两个元素(len(chan)可查询chan的队列元素个数)；</li><li>sendx指示后续写入的数据存储的位置，取值[0, 6)；</li><li>recvx指示从该位置读取数据, 取值[0, 6)；</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">(c <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;<br>c &lt;- <span class="hljs-number">50</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">// 引用类型</span><br><span class="hljs-keyword">var</span> ch5 = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">3</span>)<br><span class="hljs-keyword">var</span> ch6 = ch5<br>ch5 &lt;- <span class="hljs-number">100</span><br>ch5 &lt;- <span class="hljs-number">200</span><br>fmt.Println(&lt;-ch6)<br>fmt.Println(&lt;-ch5)<br><br><span class="hljs-keyword">var</span> ch7 = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">3</span>)<br>foo(ch7)<br>fmt.Println(&lt;-ch7)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="14-5-4、管道的关闭与循环"><a href="#14-5-4、管道的关闭与循环" class="headerlink" title="14.5.4、管道的关闭与循环"></a>14.5.4、管道的关闭与循环</h3><p>当向通道中发送完数据时，我们可以通过<code>close</code>函数来关闭通道。关闭 channel 非常简单，直接使用Go语言内置的 close() 函数即可,关闭后的通道只可读不可写。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">ch3 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">10</span>)<br>ch3 &lt;- <span class="hljs-number">1</span><br>ch3 &lt;- <span class="hljs-number">2</span><br>ch3 &lt;- <span class="hljs-number">3</span><br><br><span class="hljs-built_in">close</span>(ch3)<br>fmt.Println(&lt;-ch3)<br>ch3 &lt;- <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>如果不close掉channel是会发生死锁的，原因是当for循环读完channel后会继续尝试读取下一个，而由于channel没有写入的协程且没关闭，会一直阻塞形成死锁。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">10</span>)<br>ch &lt;- <span class="hljs-number">1</span><br>ch &lt;- <span class="hljs-number">2</span><br>ch &lt;- <span class="hljs-number">3</span><br><br><span class="hljs-comment">// 方式1</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>time.Sleep(time.Second * <span class="hljs-number">10</span>)<br>ch &lt;- <span class="hljs-number">4</span><br><br>&#125;()<br><br><span class="hljs-keyword">for</span> v := <span class="hljs-keyword">range</span> ch &#123;<br><br>fmt.Println(v, <span class="hljs-built_in">len</span>(ch))<br><span class="hljs-comment">// 读取完所有值后，ch的sendq中没有groutine</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ch) == <span class="hljs-number">0</span> &#123; <span class="hljs-comment">// 如果现有数据量为0，跳出循环</span><br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br><br><span class="hljs-built_in">close</span>(ch)<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> ch &#123;<br>fmt.Println(i)<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>在介绍了如何关闭 channel 之后，我们就多了一个问题：如何判断一个 channel 是否已经被关闭？我们可以在读取的时候使用多重返回值的方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">x, ok := &lt;-ch<br></code></pre></td></tr></table></figure><p>这个用法与 map 中的按键获取 value 的过程比较类似，只需要看第二个 bool 返回值即可，如果返回值是 false 则表示 ch 已经被关闭。</p><h4 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">producer</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">11</span>; i++ &#123;<br><br>ch &lt;- i<br>fmt.Println(<span class="hljs-string">&quot;插入值&quot;</span>,i)<br>&#125;<br>wg.Done()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">consumer</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">11</span>; i++ &#123;<br>time.Sleep(time.Second)<br>fmt.Println(<span class="hljs-string">&quot;取出值&quot;</span>,&lt;-ch)<br>&#125;<br><br>wg.Done()<br>&#125;<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">100</span>)<br><br>wg.Add(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">go</span> producer(ch)<br><span class="hljs-keyword">go</span> consumer(ch)<br><br>wg.Wait()<br>fmt.Println(<span class="hljs-string">&quot;process end&quot;</span>)<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="14-5-5、缓冲通道"><a href="#14-5-5、缓冲通道" class="headerlink" title="14.5.5、缓冲通道"></a>14.5.5、缓冲通道</h3><ul><li>无缓冲的通道是指在接收前没有能力保存任何值的通道</li><li>有缓冲的通道是一种在被接收前能存储一个或者多个值的通道</li></ul><p><img src="/pages_images/Go/QQ%E6%88%AA%E5%9B%BE20201113180512.png"></p><p><img src="/pages_images/Go/QQ%E6%88%AA%E5%9B%BE20201113180447.png"></p><p>无缓冲的通道又称为阻塞的通道。我们来看一下下面的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>ch &lt;- <span class="hljs-number">10</span><br>fmt.Println(<span class="hljs-string">&quot;发送成功&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>上面这段代码能够通过编译，但是执行的时候会出现以下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">fatal error: all goroutines are asleep - deadlock!<br><br>goroutine 1 [chan send]:<br>main.main()<br>        .../src/github.com/Q1mi/studygo/day06/channel02/main.go:8 +0x54<br></code></pre></td></tr></table></figure><p>为什么会出现<code>deadlock</code>错误呢？</p><p>因为我们使用<code>ch := make(chan int)</code>创建的是无缓冲的通道，无缓冲的通道只有在有人接收值的时候才能发送值。简单来说就是无缓冲的通道必须有接收才能发送。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">recv</span><span class="hljs-params">(c <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;<br>ret := &lt;-c<br>fmt.Println(<span class="hljs-string">&quot;接收成功&quot;</span>, ret)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br><span class="hljs-keyword">go</span> recv(ch) <span class="hljs-comment">// 启用goroutine从通道接收值</span><br>ch &lt;- <span class="hljs-number">10</span><br>fmt.Println(<span class="hljs-string">&quot;发送成功&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>无缓冲通道上的发送操作会阻塞，直到另一个<code>goroutine</code>在该通道上执行接收操作，这时值才能发送成功，两个<code>goroutine</code>将继续执行。相反，如果接收操作先执行，接收方的goroutine将阻塞，直到另一个<code>goroutine</code>在该通道上发送一个值。</p><p>使用无缓冲通道进行通信将导致发送和接收的<code>goroutine</code>同步化。因此，无缓冲通道也被称为<code>同步通道</code>。</p><blockquote><p>have a try：生产者消费者模型案例改为无缓冲通道的运行结果？</p></blockquote><h3 id="14-5-6、死锁（deadlock）"><a href="#14-5-6、死锁（deadlock）" class="headerlink" title="14.5.6、死锁（deadlock）"></a>14.5.6、死锁（deadlock）</h3><h4 id="案例1-1"><a href="#案例1-1" class="headerlink" title="案例1"></a>案例1</h4><p>当程序一直在等待从信道里读取数据，而此时并没有人会往信道中写入数据。此时程序就会陷入死循环，造成死锁。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>pipline := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>wg.Add(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>time.Sleep(time.Second)<br>pipline &lt;- i<br>&#125;<br><span class="hljs-built_in">close</span>(pipline) <span class="hljs-comment">// 关闭chan,循环chan的协程就可以退出循环了，否则因为chan的sendq为空陷入deadlock</span><br>&#125;()<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br><span class="hljs-keyword">for</span> v := <span class="hljs-keyword">range</span> pipline &#123;<br>fmt.Println(<span class="hljs-string">&quot;v:&quot;</span>, v)<br>&#125;<br>&#125;()<br><br>wg.Wait()<br><br>&#125;<br></code></pre></td></tr></table></figure><p>解决方法很简单，只要在发送完数据后，手动关闭信道，告诉 range 信道已经关闭，无需等待就行。</p><h4 id="案例2-1"><a href="#案例2-1" class="headerlink" title="案例2"></a>案例2</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">recv</span><span class="hljs-params">(c <span class="hljs-keyword">chan</span> <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br>time.Sleep(time.Second)<br>ret := &lt;-c<br><span class="hljs-keyword">if</span> ret == <span class="hljs-string">&quot;exit&quot;</span>&#123;<br><span class="hljs-built_in">close</span>(c)<br><span class="hljs-keyword">break</span><br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;接收成功&quot;</span>, ret)<br>&#125;<br><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">send</span><span class="hljs-params">(c <span class="hljs-keyword">chan</span> <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br><span class="hljs-keyword">for</span> i:=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++&#123;<br>c&lt;- i<br>&#125;<br>c&lt;- <span class="hljs-string">&quot;exit&quot;</span><br><br><span class="hljs-comment">// time.Sleep(time.Second*10) // 写的协程结束，导致死锁</span><br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">interface</span>&#123;&#125;)<br>wg.Add(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">go</span> recv(ch) <span class="hljs-comment">// 启用goroutine从通道接收值</span><br><span class="hljs-keyword">go</span> send(ch) <span class="hljs-comment">// 启用goroutine从通道接收值</span><br><br>wg.Wait()<br>fmt.Println(<span class="hljs-string">&quot;end&quot;</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="14-5-7、单向通道"><a href="#14-5-7、单向通道" class="headerlink" title="14.5.7、单向通道"></a>14.5.7、单向通道</h3><p>Go语言的类型系统提供了单方向的 channel 类型，顾名思义，单向 channel 就是只能用于写入或者只能用于读取数据。当然 channel 本身必然是同时支持读写的，否则根本没法用。</p><p>我们在将一个 channel 变量传递到一个函数时，可以通过将其指定为单向 channel 变量，从而限制该函数中可以对此 channel 的操作，比如只能往这个 channel 中写入数据，或者只能从这个 channel 读取数据。</p><p>单向 channel 变量的声明非常简单，只能写入数据的通道类型为<code>chan&lt;-</code>，只能读取数据的通道类型为<code>&lt;-chan</code>，格式如下：  </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> 通道实例 <span class="hljs-keyword">chan</span>&lt;- 元素类型    <span class="hljs-comment">// 只能写入数据的通道</span><br><span class="hljs-keyword">var</span> 通道实例 &lt;-<span class="hljs-keyword">chan</span> 元素类型    <span class="hljs-comment">// 只能读取数据的通道</span><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">producer</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">int</span>)</span></span> &#123;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">11</span>; i++ &#123;<br>ch &lt;- i<br>fmt.Println(<span class="hljs-string">&quot;插入值&quot;</span>, i)<br>&#125;<br>wg.Done()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">consumer</span><span class="hljs-params">(ch &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">11</span>; i++ &#123;<br>time.Sleep(time.Second)<br>fmt.Println(<span class="hljs-string">&quot;取出值&quot;</span>, &lt;-ch)<br>&#125;<br><br>wg.Done()<br>&#125;<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br><br>wg.Add(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">go</span> producer(ch)<br><span class="hljs-keyword">go</span> consumer(ch)<br><br>wg.Wait()<br>fmt.Println(<span class="hljs-string">&quot;end&quot;</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="14-5-8、select语句"><a href="#14-5-8、select语句" class="headerlink" title="14.5.8、select语句"></a>14.5.8、select语句</h3><p>golang中的select语句格式如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">select</span> &#123;<br>    <span class="hljs-keyword">case</span> &lt;-ch1:<br>        <span class="hljs-comment">// 如果从 ch1 信道成功接收数据，则执行该分支代码</span><br>    <span class="hljs-keyword">case</span> ch2 &lt;- <span class="hljs-number">1</span>:<br>        <span class="hljs-comment">// 如果成功向 ch2 信道成功发送数据，则执行该分支代码</span><br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-comment">// 如果上面都没有成功，则进入 default 分支处理流程</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到select的语法结构有点类似于switch，但又有些不同。select里的case后面并不带判断条件，而是一个信道的操作，不同于switch里的case，对于从其它语言转过来的开发者来说有些需要特别注意的地方。golang 的 select 就是监听 IO 操作，当 IO 操作发生时，触发相应的动作每个case语句里必须是一个IO操作，确切的说，应该是一个面向channel的IO操作。</p><blockquote><p>注：Go 语言的 <code>select</code> 语句借鉴自 Unix 的 <code>select()</code> 函数，在 Unix 中，可以通过调用 <code>select()</code> 函数来监控一系列的文件句柄，一旦其中一个文件句柄发生了 IO 动作，该 <code>select()</code> 调用就会被返回（C 语言中就是这么做的），后来该机制也被用于实现高并发的 Socket 服务器程序。Go 语言直接在语言级别支持 <code>select</code>关键字，用于处理并发编程中通道之间异步 IO 通信问题。</p></blockquote><p>注意：如果 <code>ch1</code> 或者 <code>ch2</code> 信道都阻塞的话，就会立即进入 <code>default</code> 分支，并不会阻塞。但是如果没有 <code>default</code> 语句，则会阻塞直到某个信道操作成功为止。</p><h4 id="（1）select语句只能用于信道的读写操作"><a href="#（1）select语句只能用于信道的读写操作" class="headerlink" title="（1）select语句只能用于信道的读写操作"></a>（1）select语句只能用于信道的读写操作</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>size := <span class="hljs-number">10</span><br>ch1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, size)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>ch1 &lt;- <span class="hljs-number">1</span><br>&#125;<br><br>ch2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, size+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>ch2 &lt;- <span class="hljs-number">2</span><br>&#125;<br><br><span class="hljs-comment">// select中的case语句是随机执行的</span><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> a := &lt;-ch1:<br>fmt.Println(<span class="hljs-string">&quot;a&quot;</span>, a)<br><span class="hljs-keyword">case</span> b := &lt;-ch2:<br>fmt.Println(<span class="hljs-string">&quot;b&quot;</span>, b)<br><span class="hljs-keyword">case</span> ch2 &lt;- <span class="hljs-number">200</span>:<br>fmt.Println(<span class="hljs-string">&quot;插值成功&quot;</span>)<br><span class="hljs-keyword">default</span>: <span class="hljs-comment">// 如果 ch1 和 ch2 信道都阻塞的话，就会立即进入default分支</span><br>fmt.Println(<span class="hljs-string">&quot;default&quot;</span>)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="（2）超时用法"><a href="#（2）超时用法" class="headerlink" title="（2）超时用法"></a>（2）超时用法</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-comment">// 修改时间后,再查看执行结果</span><br>time.Sleep(time.Second * <span class="hljs-number">3</span>)<br>ch &lt;- <span class="hljs-number">1</span><br>&#125;(ch)<br><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> v := &lt;-ch:<br>fmt.Print(v)<br><span class="hljs-keyword">case</span> &lt;-time.After(<span class="hljs-number">2</span> * time.Second): <span class="hljs-comment">// 等待 2s</span><br>fmt.Println(<span class="hljs-string">&quot;no case ok&quot;</span>)<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="（3）空select"><a href="#（3）空select" class="headerlink" title="（3）空select"></a>（3）空select</h4><p>空<code>select</code>指的是内部不包含任何<code>case</code>，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">select</span>&#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>空的 <code>select</code> 语句会直接阻塞当前的<code>goroutine</code>，使得该<code>goroutine</code>进入无法被唤醒的永久休眠状态。</p><h2 id="14-6、并发案例"><a href="#14-6、并发案例" class="headerlink" title="14.6、并发案例"></a>14.6、并发案例</h2><h3 id="14-6-1、聊天室案例"><a href="#14-6-1、聊天室案例" class="headerlink" title="14.6.1、聊天室案例"></a>14.6.1、聊天室案例</h3><p><img src="/pages_images/Go/image-20210726183910100.png" alt="image-20210726183910100"></p><p><img src="/pages_images/Go/image-20210726183934552.png" alt="image-20210726183934552"></p><p>服务器：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-comment">//保存用户信息的结构体</span><br><span class="hljs-keyword">type</span> Client <span class="hljs-keyword">struct</span> &#123;<br>Chan    <span class="hljs-keyword">chan</span> []<span class="hljs-type">byte</span> <span class="hljs-comment">//传递用户数据</span><br>Addr <span class="hljs-type">string</span>      <span class="hljs-comment">//客户端的IP</span><br>&#125;<br><br><span class="hljs-comment">// 消息类型</span><br><span class="hljs-keyword">type</span> Msg <span class="hljs-keyword">struct</span> &#123;<br>Content <span class="hljs-type">string</span> <span class="hljs-comment">// 消息内容</span><br>User    <span class="hljs-type">string</span> <span class="hljs-comment">// 消息发布者</span><br>&#125;<br><br><span class="hljs-keyword">var</span> onlineClients = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]Client)    <span class="hljs-comment">//保存所有用户  &#123;&quot;Addr&quot;:&#123;&quot;Addr&quot;:Addr,&quot;Chan&quot;:Chan&#125;&#125;</span><br><span class="hljs-keyword">var</span> broadcast = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> Msg)                 <span class="hljs-comment">// 广播管道</span><br><br><span class="hljs-comment">//监听broadcast通道中的数据,一旦有数据，循环写入每一个Client的Chan中,进而是每一个客户端收到该广播数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MessageManager</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>msg := &lt;-broadcast <span class="hljs-comment">//读取message通道中的数据，如果通道中没有数据，就会一直等待。</span><br><span class="hljs-keyword">for</span> _, client := <span class="hljs-keyword">range</span> onlineClients &#123;<br>msgBytes, _ := json.Marshal(msg)<br>client.Chan &lt;- msgBytes<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//监听该客户端的管道，一旦有广播数据,写入socket管道，发给客户端</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteMsgToClient</span><span class="hljs-params">(conn net.Conn, client Client)</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>msgBytes := &lt;-client.Chan      <span class="hljs-comment">//读取C通道中的数据，如果没有数据，就会一直等待</span><br>_, _ = conn.Write(msgBytes) <span class="hljs-comment">//把json字节串数据输出到客户端</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//监听该客户端的socket管道，一旦有数据,写入broadcast管道，进而发给每一个客户端</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">read</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br>data := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1024</span>)<br>n, _ := conn.Read(data)<br>content := strings.TrimSpace(<span class="hljs-type">string</span>(data[:n]))<br>broadcast &lt;- Msg&#123;Content: content, User: conn.RemoteAddr().String()&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%s发来消息:%s\n&quot;</span>, conn.RemoteAddr().String(), content)<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//为每一个客户端开启协程处理函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HandleConnect</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;<br><span class="hljs-comment">//把客户端的用户信息保存在map对象</span><br>addr := conn.RemoteAddr().String() <span class="hljs-comment">//获取客户端的IP</span><br>fmt.Printf(<span class="hljs-string">&quot;来自客户端【%s】的连接\n&quot;</span>, addr)<br><span class="hljs-comment">//把用户信息封装成Client</span><br>client := Client&#123;<span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> []<span class="hljs-type">byte</span>),  addr&#125;<br>onlineClients[addr] = client<br><span class="hljs-comment">//向所有用户广播消息</span><br>content := client.Addr + <span class="hljs-string">&quot;已上线!&quot;</span><br>broadcast &lt;- Msg&#123;Content: content, User: <span class="hljs-string">&quot;系统消息&quot;</span>&#125;<br><span class="hljs-comment">//启动WriteMsgToClient的Go程</span><br><span class="hljs-keyword">go</span> read(conn)<br><span class="hljs-keyword">go</span> WriteMsgToClient(conn, client)<br>&#125;<br><br><span class="hljs-comment">//主协程</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;聊天室服务端启动了...&quot;</span>)<br><span class="hljs-comment">//创建一个监听器</span><br>listener, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8080&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;net.Listen err: &quot;</span>, err)<br><span class="hljs-keyword">return</span> <span class="hljs-comment">//结束主协程</span><br>&#125;<br><br><span class="hljs-comment">//负责监听广播通道中的数据</span><br><span class="hljs-keyword">go</span> MessageManager()<br><br><span class="hljs-keyword">for</span> &#123;<br>conn, err := listener.Accept() <span class="hljs-comment">//阻塞方法，监听客户端的连接</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;listener.Accept err: &quot;</span>, err)<br><span class="hljs-keyword">continue</span> <span class="hljs-comment">//结束当次循环</span><br>&#125;<br><span class="hljs-keyword">go</span> HandleConnect(conn)<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bufio&quot;</span><br><span class="hljs-string">&quot;encoding/json&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-comment">// 消息类型</span><br><span class="hljs-keyword">type</span> Msg <span class="hljs-keyword">struct</span> &#123;<br>Content <span class="hljs-type">string</span> <span class="hljs-comment">// 消息内容</span><br>User    <span class="hljs-type">string</span> <span class="hljs-comment">// 消息发布者</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">read</span><span class="hljs-params">(conn net.Conn)</span></span>  &#123;<br><span class="hljs-keyword">for</span> &#123;<br><br>res := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1024</span>)<br>n, err := conn.Read(res)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>result := res[:n]<br><span class="hljs-keyword">var</span> msg Msg<br>json.Unmarshal(result,&amp;msg)<br>fmt.Printf(<span class="hljs-string">&quot;[%s]:%s\n&quot;</span>,msg.User,msg.Content)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">write</span><span class="hljs-params">(conn net.Conn)</span></span>&#123;<br><span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;<br>reader := bufio.NewReader(os.Stdin) <span class="hljs-comment">// 从标准输入生成读对象</span><br>content, _ := reader.ReadBytes(<span class="hljs-string">&#x27;\n&#x27;</span>) <span class="hljs-comment">// 读到换行</span><br><span class="hljs-comment">// 发送数据</span><br>conn.Write(content)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> wg  sync.WaitGroup<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 1.连接服务端</span><br>conn, err := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1:8080&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> conn.Close()<br><br><span class="hljs-keyword">go</span> read(conn)<br>write(conn)<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="14-6-2、爬虫案例"><a href="#14-6-2、爬虫案例" class="headerlink" title="14.6.2、爬虫案例"></a>14.6.2、爬虫案例</h3><h4 id="（1）爬虫程序"><a href="#（1）爬虫程序" class="headerlink" title="（1）爬虫程序"></a>（1）爬虫程序</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>resp, err := http.Get(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;err&quot;</span>, err)<br>&#125;<br>data, _ := ioutil.ReadAll(resp.Body)<br>ioutil.WriteFile(<span class="hljs-string">&quot;baidu.html&quot;</span>, data, <span class="hljs-number">0666</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="（2）正则匹配"><a href="#（2）正则匹配" class="headerlink" title="（2）正则匹配"></a>（2）正则匹配</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;regexp&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-keyword">const</span> (<br>cityListReg = <span class="hljs-string">`&lt;a href=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;`</span><br>)<br>contents := <span class="hljs-string">`&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;  &lt;a href=&quot;http://www.jd.com&quot;&gt;京东&lt;/a&gt;`</span><br>compile := regexp.MustCompile(cityListReg)<br>submatch := compile.FindAllSubmatch([]<span class="hljs-type">byte</span>(contents), <span class="hljs-number">-1</span>)<br><br><span class="hljs-keyword">for</span> _, m := <span class="hljs-keyword">range</span> submatch &#123;<br><span class="hljs-comment">//fmt.Println(&quot;url:&quot;, string(m[1]), &quot;city:&quot;, string(m[2]))</span><br>fmt.Println(<span class="hljs-string">&quot;content match:&quot;</span>, <span class="hljs-type">string</span>(m[<span class="hljs-number">0</span>]), <span class="hljs-type">string</span>(m[<span class="hljs-number">1</span>]), <span class="hljs-type">string</span>(m[<span class="hljs-number">2</span>]))<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="（3）爬虫斗图案例版本1"><a href="#（3）爬虫斗图案例版本1" class="headerlink" title="（3）爬虫斗图案例版本1"></a>（3）爬虫斗图案例版本1</h4><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;regexp&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> pageNum = <span class="hljs-number">3</span><br><span class="hljs-keyword">var</span> reImg = <span class="hljs-string">`data-original=&quot;(https?://img.pkdoutu.com/production/uploads/image/[\s\S]+?.(jpg|png|jpeg|gif|null))`</span><br><br><span class="hljs-keyword">var</span> SliceImageUrls []<span class="hljs-type">string</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 构建起始时间</span><br>start := time.Now().Unix()<br><span class="hljs-comment">// 2.爬虫协程：d多个协程向管道添加图片链接</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= pageNum; i++ &#123;<br>fmt.Println(<span class="hljs-string">&quot;i&quot;</span>, i)<br>getImgUrls(<span class="hljs-string">&quot;https://www.pkdoutu.com/photo/list/?page=&quot;</span> + strconv.Itoa(i))<br>&#125;<br>ConsumerImgUrl()<br><br>end := time.Now().Unix()<br>fmt.Println(<span class="hljs-string">&quot;总计用时：&quot;</span>, end-start)<br>&#125;<br><br><span class="hljs-comment">// 处理异常</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HandleError</span><span class="hljs-params">(err <span class="hljs-type">error</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;err:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ConsumerImgUrl</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> _, url := <span class="hljs-keyword">range</span> SliceImageUrls &#123;<br>fmt.Println(<span class="hljs-string">&quot;url:::&quot;</span>, url)<br>DownloadImg(url)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getImgUrls</span><span class="hljs-params">(pageUrl <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-comment">// 获取页面字符串</span><br>pageStr := <span class="hljs-type">string</span>(spiderData(pageUrl))<br><span class="hljs-comment">// 根据正则匹配筛选到符合要求的img的URL</span><br>re := regexp.MustCompile(reImg)<br><br>results := re.FindAllSubmatch([]<span class="hljs-type">byte</span>(pageStr), <span class="hljs-number">-1</span>)<br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> results &#123;<br>SliceImageUrls = <span class="hljs-built_in">append</span>(SliceImageUrls, <span class="hljs-type">string</span>(item[<span class="hljs-number">1</span>]))<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getFileName</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-comment">// 1.获取文件名和文件应该存哪</span><br><span class="hljs-comment">// lastIndex是最后一个/的位置</span><br>lastIndex := strings.LastIndex(url, <span class="hljs-string">&quot;/&quot;</span>)<br>filename := url[lastIndex+<span class="hljs-number">1</span>:]<br><span class="hljs-comment">// 创建时间戳，防止重名</span><br>timePre := strconv.Itoa(<span class="hljs-type">int</span>(time.Now().UnixNano()))<br>filename = <span class="hljs-string">&quot;Doutu/&quot;</span> + timePre + <span class="hljs-string">&quot;_&quot;</span> + filename<br>fmt.Println(<span class="hljs-string">&quot;filename&quot;</span>, filename)<br><span class="hljs-keyword">return</span> filename<br>&#125;<br><br><span class="hljs-comment">// 爬虫网络数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">spiderData</span><span class="hljs-params">(_url <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br><span class="hljs-comment">// 发送请求</span><br>fmt.Println(<span class="hljs-string">&quot;_url&quot;</span>, _url)<br>resp, err := http.Get(_url)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>HandleError(err)<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><span class="hljs-comment">// 接数据</span><br>data, _ := ioutil.ReadAll(resp.Body)<br><span class="hljs-keyword">return</span> data<br><br>&#125;<br><br><span class="hljs-comment">// DownloadImg 下载图片</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DownloadImg</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> &#123;<br>filename := getFileName(url)<br><span class="hljs-comment">// 2.保存文件</span><br>data := spiderData(url)<br><span class="hljs-comment">// 写文件</span><br>err := ioutil.WriteFile(filename, data, <span class="hljs-number">0666</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s 下载失败 \n&quot;</span>, filename)<br>HandleError(err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%s 下载成功 \n&quot;</span>, filename)<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="（4）爬虫斗图案例版本2"><a href="#（4）爬虫斗图案例版本2" class="headerlink" title="（4）爬虫斗图案例版本2"></a>（4）爬虫斗图案例版本2</h4><p>补充知识点：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-keyword">var</span> c = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">5</span>)<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>c &lt;- <span class="hljs-number">1</span><br>c &lt;- <span class="hljs-number">2</span><br>c &lt;- <span class="hljs-number">3</span><br><span class="hljs-built_in">close</span>(c)<br>&#125;()<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> c &#123;<br>fmt.Println(i)<br>&#125;<br><br>&#125;()<br><br>wg.Wait()<br>fmt.Println(<span class="hljs-string">&quot;end&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">(_url <span class="hljs-type">string</span>)</span></span> &#123; <br>res, _ := http.Get(_url)<br><span class="hljs-keyword">defer</span> res.Body.Close()<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>很神奇的现象，存在一个包含http.Get的函数，即使没有执行，也会使range c出现阻塞而不是死锁！！！</p></blockquote><p>代码：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io/ioutil&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;regexp&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> waitGroup sync.WaitGroup<br><span class="hljs-keyword">var</span> chanImageUrls = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">10000</span>)<br><span class="hljs-keyword">var</span> pageNum = <span class="hljs-number">10</span><br><span class="hljs-keyword">var</span> reImg = <span class="hljs-string">`data-original=&quot;(https?://img.pkdoutu.com/production/uploads/image/[\s\S]+?.(jpg|png|jpeg|gif|null))`</span><br><span class="hljs-keyword">var</span> chanTask = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, pageNum)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CheckProducerDone</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> count <span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> &#123;<br>url := &lt;-chanTask<br>fmt.Printf(<span class="hljs-string">&quot;%s 完成了爬取任务&quot;</span>, url)<br>count++<br><span class="hljs-keyword">if</span> count == pageNum &#123;<br><span class="hljs-comment">// 生产者完成生产任务，关闭数据管道，消费者遍历完管道数据会自动退出循环</span><br><span class="hljs-built_in">close</span>(chanImageUrls)<br><span class="hljs-comment">// 完成任务，跳出循环</span><br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 构建起始时间</span><br>start := time.Now().Unix()<br><span class="hljs-comment">// 2.爬虫协程：d多个协程向管道添加图片链接</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= pageNum; i++ &#123;<br>fmt.Println(<span class="hljs-string">&quot;i&quot;</span>, i)<br>waitGroup.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> getImgUrls(<span class="hljs-string">&quot;https://www.pkdoutu.com/photo/list/?page=&quot;</span> + strconv.Itoa(i))<br>&#125;<br><br><span class="hljs-keyword">go</span> CheckProducerDone()<br><br>waitGroup.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> ConsumerImgUrl()<br><br>waitGroup.Wait()<br>end := time.Now().Unix()<br>fmt.Println(<span class="hljs-string">&quot;总计用时：&quot;</span>, end-start)<br>&#125;<br><br><span class="hljs-comment">// 处理异常</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HandleError</span><span class="hljs-params">(err <span class="hljs-type">error</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;err:&quot;</span>, err)<br><span class="hljs-keyword">return</span><br><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ConsumerImgUrl</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> waitGroup.Done()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>waitGroup.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> waitGroup.Done()<br><span class="hljs-keyword">for</span> url := <span class="hljs-keyword">range</span> chanImageUrls &#123;<br>fmt.Println(<span class="hljs-string">&quot;url:::&quot;</span>, url)<br>DownloadImg(url)<br>&#125;<br>&#125;()<br><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getImgUrls</span><span class="hljs-params">(pageUrl <span class="hljs-type">string</span>)</span></span> &#123;<br>waitGroup.Done()<br><span class="hljs-comment">// 获取页面字符串</span><br>pageBytes := spiderData(pageUrl)<br><span class="hljs-comment">// 根据正则匹配筛选到符合要求的img的URL</span><br>re := regexp.MustCompile(reImg)<br><br>results := re.FindAllSubmatch(pageBytes, <span class="hljs-number">-1</span>)<br><span class="hljs-keyword">for</span> _, item := <span class="hljs-keyword">range</span> results &#123;<br>chanImageUrls &lt;- <span class="hljs-type">string</span>(item[<span class="hljs-number">1</span>])<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;len chanImageUrls&quot;</span>, <span class="hljs-built_in">len</span>(chanImageUrls))<br><br>chanTask &lt;- pageUrl<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getFileName</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-comment">// 1.获取文件名和文件应该存哪</span><br><span class="hljs-comment">// lastIndex是最后一个/的位置</span><br>lastIndex := strings.LastIndex(url, <span class="hljs-string">&quot;/&quot;</span>)<br>filename := url[lastIndex+<span class="hljs-number">1</span>:]<br><span class="hljs-comment">// 创建时间戳，防止重名</span><br>timePre := strconv.Itoa(<span class="hljs-type">int</span>(time.Now().UnixNano()))<br>filename = <span class="hljs-string">&quot;Doutu/&quot;</span> + timePre + <span class="hljs-string">&quot;_&quot;</span> + filename<br>fmt.Println(<span class="hljs-string">&quot;filename&quot;</span>, filename)<br><span class="hljs-keyword">return</span> filename<br>&#125;<br><br><span class="hljs-comment">// 爬虫网络数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">spiderData</span><span class="hljs-params">(_url <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">byte</span> &#123;<br><span class="hljs-comment">// 发送请求</span><br>fmt.Println(<span class="hljs-string">&quot;_url&quot;</span>, _url)<br>resp, err := http.Get(_url)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>HandleError(err)<br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br><span class="hljs-comment">// 接数据</span><br>data, _ := ioutil.ReadAll(resp.Body)<br><span class="hljs-keyword">return</span> data<br><br>&#125;<br><br><span class="hljs-comment">// DownloadImg 下载图片</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DownloadImg</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> &#123;<br>filename := getFileName(url)<br><span class="hljs-comment">// 2.保存文件</span><br>data := spiderData(url)<br><span class="hljs-comment">// 写文件</span><br>err := ioutil.WriteFile(filename, data, <span class="hljs-number">0666</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s 下载失败 \n&quot;</span>, filename)<br>HandleError(err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%s 下载成功 \n&quot;</span>, filename)<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Go开发之路</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
